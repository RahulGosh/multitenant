{"file_contents":{"README.md":{"content":"This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).\n\n## Getting Started\n\nFirst, run the development server:\n\n```bash\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\nYou can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.\n\nThis project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.\n\n## Learn More\n\nTo learn more about Next.js, take a look at the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\n\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!\n\n## Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.\n","size_bytes":1450},"next.config.ts":{"content":"import { withPayload } from \"@payloadcms/next/withPayload\";\nimport type { NextConfig } from \"next\";\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n};\n\nexport default withPayload(nextConfig);\n","size_bytes":206},"src/constants.ts":{"content":"export const DEFAULT_LIMIT = 8;","size_bytes":31},"src/payload-types.ts":{"content":"/* tslint:disable */\n/* eslint-disable */\n/**\n * This file was automatically generated by Payload.\n * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,\n * and re-run `payload generate:types` to regenerate this file.\n */\n\n/**\n * Supported timezones in IANA format.\n *\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"supportedTimezones\".\n */\nexport type SupportedTimezones =\n  | 'Pacific/Midway'\n  | 'Pacific/Niue'\n  | 'Pacific/Honolulu'\n  | 'Pacific/Rarotonga'\n  | 'America/Anchorage'\n  | 'Pacific/Gambier'\n  | 'America/Los_Angeles'\n  | 'America/Tijuana'\n  | 'America/Denver'\n  | 'America/Phoenix'\n  | 'America/Chicago'\n  | 'America/Guatemala'\n  | 'America/New_York'\n  | 'America/Bogota'\n  | 'America/Caracas'\n  | 'America/Santiago'\n  | 'America/Buenos_Aires'\n  | 'America/Sao_Paulo'\n  | 'Atlantic/South_Georgia'\n  | 'Atlantic/Azores'\n  | 'Atlantic/Cape_Verde'\n  | 'Europe/London'\n  | 'Europe/Berlin'\n  | 'Africa/Lagos'\n  | 'Europe/Athens'\n  | 'Africa/Cairo'\n  | 'Europe/Moscow'\n  | 'Asia/Riyadh'\n  | 'Asia/Dubai'\n  | 'Asia/Baku'\n  | 'Asia/Karachi'\n  | 'Asia/Tashkent'\n  | 'Asia/Calcutta'\n  | 'Asia/Dhaka'\n  | 'Asia/Almaty'\n  | 'Asia/Jakarta'\n  | 'Asia/Bangkok'\n  | 'Asia/Shanghai'\n  | 'Asia/Singapore'\n  | 'Asia/Tokyo'\n  | 'Asia/Seoul'\n  | 'Australia/Brisbane'\n  | 'Australia/Sydney'\n  | 'Pacific/Guam'\n  | 'Pacific/Noumea'\n  | 'Pacific/Auckland'\n  | 'Pacific/Fiji';\n\nexport interface Config {\n  auth: {\n    users: UserAuthOperations;\n  };\n  blocks: {};\n  collections: {\n    users: User;\n    media: Media;\n    categories: Category;\n    products: Product;\n    tags: Tag;\n    tenants: Tenant;\n    orders: Order;\n    reviews: Review;\n    'payload-locked-documents': PayloadLockedDocument;\n    'payload-preferences': PayloadPreference;\n    'payload-migrations': PayloadMigration;\n  };\n  collectionsJoins: {\n    categories: {\n      subcategories: 'categories';\n    };\n  };\n  collectionsSelect: {\n    users: UsersSelect<false> | UsersSelect<true>;\n    media: MediaSelect<false> | MediaSelect<true>;\n    categories: CategoriesSelect<false> | CategoriesSelect<true>;\n    products: ProductsSelect<false> | ProductsSelect<true>;\n    tags: TagsSelect<false> | TagsSelect<true>;\n    tenants: TenantsSelect<false> | TenantsSelect<true>;\n    orders: OrdersSelect<false> | OrdersSelect<true>;\n    reviews: ReviewsSelect<false> | ReviewsSelect<true>;\n    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;\n    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;\n    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;\n  };\n  db: {\n    defaultIDType: string;\n  };\n  globals: {};\n  globalsSelect: {};\n  locale: null;\n  user: User & {\n    collection: 'users';\n  };\n  jobs: {\n    tasks: unknown;\n    workflows: unknown;\n  };\n}\nexport interface UserAuthOperations {\n  forgotPassword: {\n    email: string;\n    password: string;\n  };\n  login: {\n    email: string;\n    password: string;\n  };\n  registerFirstUser: {\n    email: string;\n    password: string;\n  };\n  unlock: {\n    email: string;\n    password: string;\n  };\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"users\".\n */\nexport interface User {\n  id: string;\n  username: string;\n  roles?: ('super-admin' | 'user')[] | null;\n  tenants?:\n    | {\n        tenant: string | Tenant;\n        id?: string | null;\n      }[]\n    | null;\n  updatedAt: string;\n  createdAt: string;\n  email: string;\n  resetPasswordToken?: string | null;\n  resetPasswordExpiration?: string | null;\n  salt?: string | null;\n  hash?: string | null;\n  loginAttempts?: number | null;\n  lockUntil?: string | null;\n  sessions?:\n    | {\n        id: string;\n        createdAt?: string | null;\n        expiresAt: string;\n      }[]\n    | null;\n  password?: string | null;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"tenants\".\n */\nexport interface Tenant {\n  id: string;\n  /**\n   * This is the name of the store (e.g, Yash's Store)\n   */\n  name: string;\n  /**\n   * This is the subdomain for the store (e.g, [slug].funroad.com)\n   */\n  slug: string;\n  image?: (string | null) | Media;\n  /**\n   * Stripe Account ID associated with your shop\n   */\n  stripeAccountId: string;\n  /**\n   * You cannot create products until you submit your stripe details\n   */\n  stripeDetailsSubmitted?: boolean | null;\n  updatedAt: string;\n  createdAt: string;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"media\".\n */\nexport interface Media {\n  id: string;\n  alt: string;\n  updatedAt: string;\n  createdAt: string;\n  url?: string | null;\n  thumbnailURL?: string | null;\n  filename?: string | null;\n  mimeType?: string | null;\n  filesize?: number | null;\n  width?: number | null;\n  height?: number | null;\n  focalX?: number | null;\n  focalY?: number | null;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"categories\".\n */\nexport interface Category {\n  id: string;\n  name: string;\n  slug: string;\n  color?: string | null;\n  parent?: (string | null) | Category;\n  subcategories?: {\n    docs?: (string | Category)[];\n    hasNextPage?: boolean;\n    totalDocs?: number;\n  };\n  updatedAt: string;\n  createdAt: string;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"products\".\n */\nexport interface Product {\n  id: string;\n  tenant?: (string | null) | Tenant;\n  name: string;\n  description?: string | null;\n  /**\n   * Price in USD\n   */\n  price: number;\n  category?: (string | null) | Category;\n  tags?: (string | null) | Tag;\n  image?: (string | null) | Media;\n  cover?: (string | null) | Media;\n  refundPolicy?: ('30-day' | '14-day' | '7-day' | '3-day' | 'no-refunds') | null;\n  /**\n   * Protected content only visible to customers after purchase. Add product documentation, downloadble files, getting started guides, and bonus materials. Supports Markdown formatting\n   */\n  content?: string | null;\n  updatedAt: string;\n  createdAt: string;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"tags\".\n */\nexport interface Tag {\n  id: string;\n  name: string;\n  products?: (string | Product)[] | null;\n  updatedAt: string;\n  createdAt: string;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"orders\".\n */\nexport interface Order {\n  id: string;\n  name: string;\n  user: string | User;\n  product: string | Product;\n  /**\n   * Stripe checkout session associated wuth with the order\n   */\n  stripeCheckoutSessionId: string;\n  updatedAt: string;\n  createdAt: string;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"reviews\".\n */\nexport interface Review {\n  id: string;\n  description: string;\n  rating: number;\n  product?: (string | null) | Product;\n  user?: (string | null) | User;\n  updatedAt: string;\n  createdAt: string;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"payload-locked-documents\".\n */\nexport interface PayloadLockedDocument {\n  id: string;\n  document?:\n    | ({\n        relationTo: 'users';\n        value: string | User;\n      } | null)\n    | ({\n        relationTo: 'media';\n        value: string | Media;\n      } | null)\n    | ({\n        relationTo: 'categories';\n        value: string | Category;\n      } | null)\n    | ({\n        relationTo: 'products';\n        value: string | Product;\n      } | null)\n    | ({\n        relationTo: 'tags';\n        value: string | Tag;\n      } | null)\n    | ({\n        relationTo: 'tenants';\n        value: string | Tenant;\n      } | null)\n    | ({\n        relationTo: 'orders';\n        value: string | Order;\n      } | null)\n    | ({\n        relationTo: 'reviews';\n        value: string | Review;\n      } | null);\n  globalSlug?: string | null;\n  user: {\n    relationTo: 'users';\n    value: string | User;\n  };\n  updatedAt: string;\n  createdAt: string;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"payload-preferences\".\n */\nexport interface PayloadPreference {\n  id: string;\n  user: {\n    relationTo: 'users';\n    value: string | User;\n  };\n  key?: string | null;\n  value?:\n    | {\n        [k: string]: unknown;\n      }\n    | unknown[]\n    | string\n    | number\n    | boolean\n    | null;\n  updatedAt: string;\n  createdAt: string;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"payload-migrations\".\n */\nexport interface PayloadMigration {\n  id: string;\n  name?: string | null;\n  batch?: number | null;\n  updatedAt: string;\n  createdAt: string;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"users_select\".\n */\nexport interface UsersSelect<T extends boolean = true> {\n  username?: T;\n  roles?: T;\n  tenants?:\n    | T\n    | {\n        tenant?: T;\n        id?: T;\n      };\n  updatedAt?: T;\n  createdAt?: T;\n  email?: T;\n  resetPasswordToken?: T;\n  resetPasswordExpiration?: T;\n  salt?: T;\n  hash?: T;\n  loginAttempts?: T;\n  lockUntil?: T;\n  sessions?:\n    | T\n    | {\n        id?: T;\n        createdAt?: T;\n        expiresAt?: T;\n      };\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"media_select\".\n */\nexport interface MediaSelect<T extends boolean = true> {\n  alt?: T;\n  updatedAt?: T;\n  createdAt?: T;\n  url?: T;\n  thumbnailURL?: T;\n  filename?: T;\n  mimeType?: T;\n  filesize?: T;\n  width?: T;\n  height?: T;\n  focalX?: T;\n  focalY?: T;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"categories_select\".\n */\nexport interface CategoriesSelect<T extends boolean = true> {\n  name?: T;\n  slug?: T;\n  color?: T;\n  parent?: T;\n  subcategories?: T;\n  updatedAt?: T;\n  createdAt?: T;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"products_select\".\n */\nexport interface ProductsSelect<T extends boolean = true> {\n  tenant?: T;\n  name?: T;\n  description?: T;\n  price?: T;\n  category?: T;\n  tags?: T;\n  image?: T;\n  cover?: T;\n  refundPolicy?: T;\n  content?: T;\n  updatedAt?: T;\n  createdAt?: T;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"tags_select\".\n */\nexport interface TagsSelect<T extends boolean = true> {\n  name?: T;\n  products?: T;\n  updatedAt?: T;\n  createdAt?: T;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"tenants_select\".\n */\nexport interface TenantsSelect<T extends boolean = true> {\n  name?: T;\n  slug?: T;\n  image?: T;\n  stripeAccountId?: T;\n  stripeDetailsSubmitted?: T;\n  updatedAt?: T;\n  createdAt?: T;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"orders_select\".\n */\nexport interface OrdersSelect<T extends boolean = true> {\n  name?: T;\n  user?: T;\n  product?: T;\n  stripeCheckoutSessionId?: T;\n  updatedAt?: T;\n  createdAt?: T;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"reviews_select\".\n */\nexport interface ReviewsSelect<T extends boolean = true> {\n  description?: T;\n  rating?: T;\n  product?: T;\n  user?: T;\n  updatedAt?: T;\n  createdAt?: T;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"payload-locked-documents_select\".\n */\nexport interface PayloadLockedDocumentsSelect<T extends boolean = true> {\n  document?: T;\n  globalSlug?: T;\n  user?: T;\n  updatedAt?: T;\n  createdAt?: T;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"payload-preferences_select\".\n */\nexport interface PayloadPreferencesSelect<T extends boolean = true> {\n  user?: T;\n  key?: T;\n  value?: T;\n  updatedAt?: T;\n  createdAt?: T;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"payload-migrations_select\".\n */\nexport interface PayloadMigrationsSelect<T extends boolean = true> {\n  name?: T;\n  batch?: T;\n  updatedAt?: T;\n  createdAt?: T;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"auth\".\n */\nexport interface Auth {\n  [k: string]: unknown;\n}\n\n\ndeclare module 'payload' {\n  export interface GeneratedTypes extends Config {}\n}","size_bytes":12296},"src/payload.config.ts":{"content":"// storage-adapter-import-placeholder\nimport { mongooseAdapter } from \"@payloadcms/db-mongodb\";\nimport { payloadCloudPlugin } from \"@payloadcms/payload-cloud\";\nimport { lexicalEditor } from \"@payloadcms/richtext-lexical\";\nimport path from \"path\";\nimport { buildConfig } from \"payload\";\nimport { fileURLToPath } from \"url\";\nimport sharp from \"sharp\";\nimport { multiTenantPlugin } from \"./../node_modules/@payloadcms/plugin-multi-tenant/dist/index\";\nimport { Media } from \"./collections/Media\";\nimport { Users } from \"./collections/Users\";\nimport { Categories } from \"./collections/Categories\";\nimport { Products } from \"./collections/Products\";\nimport { Tags } from \"./collections/Tags\";\nimport { Tenants } from \"./collections/Tenants\";\nimport { Orders } from \"./collections/Orders\";\nimport { Reviews } from \"./collections/Reviews\";\nimport { isSuperAdmin } from \"./lib/access\";\n\nconst filename = fileURLToPath(import.meta.url);\nconst dirname = path.dirname(filename);\n\nexport default buildConfig({\n  admin: {\n    user: Users.slug,\n    importMap: {\n      baseDir: path.resolve(dirname),\n    },\n  },\n  collections: [Users, Media, Categories, Products, Tags, Tenants, Orders, Reviews],\n  cookiePrefix: \"funroad\",\n  editor: lexicalEditor(),\n  secret: process.env.PAYLOAD_SECRET || \"\",\n  typescript: {\n    outputFile: path.resolve(dirname, \"payload-types.ts\"),\n  },\n  db: mongooseAdapter({\n    url: process.env.DATABASE_URI || \"\",\n  }),\n  sharp,\n  plugins: [\n    payloadCloudPlugin(),\n    multiTenantPlugin({\n      collections: {\n        products: {},\n      },\n      tenantsArrayField: {\n        includeDefaultField: false,\n      },\n      userHasAccessToAllTenants: (user) => isSuperAdmin(user)}),\n    // storage-adapter-placeholder\n  ],\n});\n","size_bytes":1736},"src/seed.ts":{"content":"import { getPayload } from \"payload\";\r\nimport config from \"@payload-config\"\r\n\r\nconst categories = [\r\n  {\r\n    name: \"All\",\r\n    slug: \"all\",\r\n  },\r\n  {\r\n    name: \"Business & Money\",\r\n    color: \"#FFB347\",\r\n    slug: \"business-money\",\r\n    subcategories: [\r\n      { name: \"Accounting\", slug: \"accounting\" },\r\n      {\r\n        name: \"Entrepreneurship\",\r\n        slug: \"entrepreneurship\",\r\n      },\r\n      { name: \"Gigs & Side Projects\", slug: \"gigs-side-projects\" },\r\n      { name: \"Investing\", slug: \"investing\" },\r\n      { name: \"Management & Leadership\", slug: \"management-leadership\" },\r\n      {\r\n        name: \"Marketing & Sales\",\r\n        slug: \"marketing-sales\",\r\n      },\r\n      { name: \"Networking, Careers & Jobs\", slug: \"networking-careers-jobs\" },\r\n      { name: \"Personal Finance\", slug: \"personal-finance\" },\r\n      { name: \"Real Estate\", slug: \"real-estate\" },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Software Development\",\r\n    color: \"#7EC8E3\",\r\n    slug: \"software-development\",\r\n    subcategories: [\r\n      { name: \"Web Development\", slug: \"web-development\" },\r\n      { name: \"Mobile Development\", slug: \"mobile-development\" },\r\n      { name: \"Game Development\", slug: \"game-development\" },\r\n      { name: \"Programming Languages\", slug: \"programming-languages\" },\r\n      { name: \"DevOps\", slug: \"devops\" },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Writing & Publishing\",\r\n    color: \"#D8B5FF\",\r\n    slug: \"writing-publishing\",\r\n    subcategories: [\r\n      { name: \"Fiction\", slug: \"fiction\" },\r\n      { name: \"Non-Fiction\", slug: \"non-fiction\" },\r\n      { name: \"Blogging\", slug: \"blogging\" },\r\n      { name: \"Copywriting\", slug: \"copywriting\" },\r\n      { name: \"Self-Publishing\", slug: \"self-publishing\" },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Other\",\r\n    slug: \"other\",\r\n  },\r\n  {\r\n    name: \"Education\",\r\n    color: \"#FFE066\",\r\n    slug: \"education\",\r\n    subcategories: [\r\n      { name: \"Online Courses\", slug: \"online-courses\" },\r\n      { name: \"Tutoring\", slug: \"tutoring\" },\r\n      { name: \"Test Preparation\", slug: \"test-preparation\" },\r\n      { name: \"Language Learning\", slug: \"language-learning\" },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Self Improvement\",\r\n    color: \"#96E6B3\",\r\n    slug: \"self-improvement\",\r\n    subcategories: [\r\n      { name: \"Productivity\", slug: \"productivity\" },\r\n      { name: \"Personal Development\", slug: \"personal-development\" },\r\n      { name: \"Mindfulness\", slug: \"mindfulness\" },\r\n      { name: \"Career Growth\", slug: \"career-growth\" },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Fitness & Health\",\r\n    color: \"#FF9AA2\",\r\n    slug: \"fitness-health\",\r\n    subcategories: [\r\n      { name: \"Workout Plans\", slug: \"workout-plans\" },\r\n      { name: \"Nutrition\", slug: \"nutrition\" },\r\n      { name: \"Mental Health\", slug: \"mental-health\" },\r\n      { name: \"Yoga\", slug: \"yoga\" },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Design\",\r\n    color: \"#B5B9FF\",\r\n    slug: \"design\",\r\n    subcategories: [\r\n      { name: \"UI/UX\", slug: \"ui-ux\" },\r\n      { name: \"Graphic Design\", slug: \"graphic-design\" },\r\n      { name: \"3D Modeling\", slug: \"3d-modeling\" },\r\n      { name: \"Typography\", slug: \"typography\" },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Drawing & Painting\",\r\n    color: \"#FFCAB0\",\r\n    slug: \"drawing-painting\",\r\n    subcategories: [\r\n      { name: \"Watercolor\", slug: \"watercolor\" },\r\n      { name: \"Acrylic\", slug: \"acrylic\" },\r\n      { name: \"Oil\", slug: \"oil\" },\r\n      { name: \"Pastel\", slug: \"pastel\" },\r\n      { name: \"Charcoal\", slug: \"charcoal\" },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Music\",\r\n    color: \"#FFD700\",\r\n    slug: \"music\",\r\n    subcategories: [\r\n      { name: \"Songwriting\", slug: \"songwriting\" },\r\n      { name: \"Music Production\", slug: \"music-production\" },\r\n      { name: \"Music Theory\", slug: \"music-theory\" },\r\n      { name: \"Music History\", slug: \"music-history\" },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Photography\",\r\n    color: \"#FF6B6B\",\r\n    slug: \"photography\",\r\n    subcategories: [\r\n      { name: \"Portrait\", slug: \"portrait\" },\r\n      { name: \"Landscape\", slug: \"landscape\" },\r\n      { name: \"Street Photography\", slug: \"street-photography\" },\r\n      { name: \"Nature\", slug: \"nature\" },\r\n      { name: \"Macro\", slug: \"macro\" },\r\n    ],\r\n  },\r\n]\r\n\r\nconst seed = async () => {\r\n  const payload = await getPayload({ config });\r\n\r\n  await payload.delete({\r\n    collection: \"categories\",\r\n    where: {},\r\n  });\r\n\r\n  for (const category of categories) {\r\n    const parentCategory = await payload.create({\r\n      collection: \"categories\",\r\n      data: {\r\n        name: category.name,\r\n        slug: category.slug,\r\n        color: category.color,\r\n        parent: null,\r\n      },\r\n    });\r\n\r\n   for (const subcategory of category.subcategories || []) {\r\n  await payload.create({\r\n    collection: \"categories\",\r\n    data: {\r\n      name: subcategory.name,\r\n      slug: subcategory.slug,\r\n      parent: parentCategory.id,\r\n    }\r\n  })\r\n}\r\n  }\r\n};\r\n\r\nawait seed()\r\n\r\nprocess.exit(0)","size_bytes":4890},"src/collections/Categories.ts":{"content":"import { isSuperAdmin } from \"@/lib/access\";\r\nimport { CollectionConfig } from \"payload\";\r\n\r\nexport const Categories: CollectionConfig = {\r\n  slug: \"categories\",\r\n  access: {\r\n    read: () => true,\r\n    create: ({req}) => isSuperAdmin(req.user),\r\n    update: ({req}) => isSuperAdmin(req.user),\r\n    delete: ({req}) => isSuperAdmin(req.user),\r\n  },\r\n  admin: {\r\n    useAsTitle: \"name\",\r\n    hidden: ({user}) => !isSuperAdmin(user)\r\n  },\r\n  fields: [\r\n    {\r\n      name: \"name\",\r\n      type: \"text\",\r\n      required: true,\r\n    },\r\n    {\r\n      name: \"slug\",\r\n      type: \"text\",\r\n      required: true,\r\n      unique: true,\r\n      index: true,\r\n    },\r\n    {\r\n      name: \"color\",\r\n      type: \"text\",\r\n    },\r\n    {\r\n      name: \"parent\",\r\n      type: \"relationship\",\r\n      relationTo: \"categories\",\r\n      hasMany: false,\r\n    },\r\n    {\r\n      name: \"subcategories\",\r\n      type: \"join\",\r\n      collection: \"categories\",\r\n      on: \"parent\",\r\n      hasMany: true,\r\n    },\r\n  ],\r\n};\r\n","size_bytes":984},"src/collections/Media.ts":{"content":"import { isSuperAdmin } from \"@/lib/access\";\nimport type { CollectionConfig } from \"payload\";\n\nexport const Media: CollectionConfig = {\n  slug: \"media\",\n  access: {\n    read: () => true,\n    delete: ({ req }) => isSuperAdmin(req.user),\n  },\n  fields: [\n    {\n      name: \"alt\",\n      type: \"text\",\n      required: true,\n    },\n  ],\n  upload: true,\n};\n","size_bytes":351},"src/collections/Orders.ts":{"content":"import { isSuperAdmin } from \"@/lib/access\";\r\nimport type { CollectionConfig } from \"payload\";\r\n\r\nexport const Orders: CollectionConfig = {\r\n  slug: \"orders\",\r\n  access: {\r\n    read: ({req}) => isSuperAdmin(req.user),\r\n    create: ({req}) => isSuperAdmin(req.user),\r\n    update: ({req}) => isSuperAdmin(req.user),\r\n    delete: ({req}) => isSuperAdmin(req.user),\r\n  },\r\n  admin: {\r\n    useAsTitle: \"name\",\r\n  },\r\n  fields: [\r\n    {\r\n      name: \"name\",\r\n      type: \"text\",\r\n      required: true,\r\n    },\r\n    {\r\n      name: \"user\",\r\n      type: \"relationship\",\r\n      relationTo: \"users\",\r\n      required: true,\r\n      hasMany: false,\r\n    },\r\n    {\r\n      name: \"product\",\r\n      type: \"relationship\",\r\n      relationTo: \"products\",\r\n      required: true,\r\n      hasMany: false,\r\n    },\r\n    {\r\n      name: \"stripeCheckoutSessionId\",\r\n      type: \"text\",\r\n      required: true,\r\n      admin: {\r\n        description: \"Stripe checkout session associated wuth with the order\"\r\n      }\r\n    },\r\n  ],\r\n};\r\n","size_bytes":1002},"src/collections/Products.ts":{"content":"import { isSuperAdmin } from \"@/lib/access\";\r\nimport { Tenant } from \"@/payload-types\";\r\nimport type { CollectionConfig } from \"payload\";\r\n\r\nexport const Products: CollectionConfig = {\r\n  slug: \"products\",\r\n  access: {\r\n    create: ({ req }) => {\r\n      if (isSuperAdmin(req.user)) return true;\r\n      const tenant = req.user?.tenants?.[0]?.tenant as Tenant;\r\n\r\n      return Boolean(tenant?.stripeDetailsSubmitted);\r\n    },\r\n  },\r\n  admin: {\r\n    useAsTitle: \"name\",\r\n  },\r\n  fields: [\r\n    {\r\n      name: \"name\",\r\n      type: \"text\",\r\n      required: true,\r\n    },\r\n    {\r\n      name: \"description\",\r\n      type: \"text\",\r\n    },\r\n    {\r\n      name: \"price\",\r\n      type: \"number\",\r\n      required: true,\r\n      admin: {\r\n        description: \"Price in USD\",\r\n      },\r\n    },\r\n    {\r\n      name: \"category\",\r\n      type: \"relationship\",\r\n      relationTo: \"categories\",\r\n      hasMany: false,\r\n    },\r\n    {\r\n      name: \"tags\",\r\n      type: \"relationship\",\r\n      relationTo: \"tags\",\r\n      hasMany: false,\r\n    },\r\n    {\r\n      name: \"image\",\r\n      type: \"upload\",\r\n      relationTo: \"media\",\r\n    },\r\n    {\r\n      name: \"cover\",\r\n      type: \"upload\",\r\n      relationTo: \"media\",\r\n    },\r\n    {\r\n      name: \"refundPolicy\",\r\n      type: \"select\",\r\n      options: [\"30-day\", \"14-day\", \"7-day\", \"3-day\", \"no-refunds\"],\r\n      defaultValue: \"30-day\",\r\n    },\r\n    {\r\n      name: \"content\",\r\n      type: \"textarea\",\r\n      admin: {\r\n        description:\r\n          \"Protected content only visible to customers after purchase. Add product documentation, downloadble files, getting started guides, and bonus materials. Supports Markdown formatting\",\r\n      },\r\n    },\r\n  ],\r\n};","size_bytes":1676},"src/collections/Reviews.ts":{"content":"import { isSuperAdmin } from \"@/lib/access\";\r\nimport type { CollectionConfig } from \"payload\";\r\n\r\nexport const Reviews: CollectionConfig = {\r\n  slug: \"reviews\",\r\n  access: {\r\n    read: ({ req }) => isSuperAdmin(req.user),\r\n    create: ({ req }) => isSuperAdmin(req.user),\r\n    update: ({ req }) => isSuperAdmin(req.user),\r\n    delete: ({ req }) => isSuperAdmin(req.user),\r\n  },\r\n  admin: {\r\n    useAsTitle: \"description\",\r\n  },\r\n  fields: [\r\n    {\r\n      name: \"description\",\r\n      type: \"textarea\",\r\n      required: true,\r\n    },\r\n    {\r\n      name: \"rating\",\r\n      type: \"number\",\r\n      required: true,\r\n      min: 1,\r\n      max: 5,\r\n    },\r\n    {\r\n      name: \"product\",\r\n      type: \"relationship\",\r\n      relationTo: \"products\",\r\n      hasMany: false,\r\n    },\r\n    {\r\n      name: \"user\",\r\n      type: \"relationship\",\r\n      relationTo: \"users\",\r\n      hasMany: false,\r\n    },\r\n  ],\r\n};\r\n","size_bytes":895},"src/collections/Tags.tsx":{"content":"import { isSuperAdmin } from \"@/lib/access\";\r\nimport type { CollectionConfig } from \"payload\";\r\n\r\nexport const Tags: CollectionConfig = {\r\n  slug: \"tags\",\r\n  admin: {\r\n    useAsTitle: \"name\",\r\n    hidden: ({ user }) => !isSuperAdmin(user),\r\n  },\r\n  access: {\r\n    read: () => true,\r\n    create: ({ req }) => isSuperAdmin(req.user),\r\n    update: ({ req }) => isSuperAdmin(req.user),\r\n    delete: ({ req }) => isSuperAdmin(req.user),\r\n  },\r\n  fields: [\r\n    {\r\n      name: \"name\",\r\n      type: \"text\",\r\n      required: true,\r\n      unique: true,\r\n    },\r\n    {\r\n      name: \"products\",\r\n      type: \"relationship\",\r\n      relationTo: \"products\",\r\n      hasMany: true,\r\n    },\r\n  ],\r\n};\r\n","size_bytes":685},"src/collections/Tenants.ts":{"content":"import { isSuperAdmin } from \"@/lib/access\";\r\nimport type { CollectionConfig } from \"payload\";\r\n\r\nexport const Tenants: CollectionConfig = {\r\n  slug: \"tenants\",\r\n  access: {\r\n    create: ({ req }) => isSuperAdmin(req.user),\r\n    delete: ({ req }) => isSuperAdmin(req.user),\r\n  },\r\n  admin: {\r\n    useAsTitle: \"slug\",\r\n  },\r\n  fields: [\r\n    {\r\n      name: \"name\",\r\n      required: true,\r\n      type: \"text\",\r\n      label: \"Store Name\",\r\n      admin: {\r\n        description: \"This is the name of the store (e.g, Yash's Store)\",\r\n      },\r\n    },\r\n    {\r\n      name: \"slug\",\r\n      type: \"text\",\r\n      index: true,\r\n      required: true,\r\n      unique: true,\r\n      access: {\r\n        update: ({req}) => isSuperAdmin(req.user)\r\n      },\r\n      admin: {\r\n        description:\r\n          \"This is the subdomain for the store (e.g, [slug].funroad.com)\",\r\n      },\r\n    },\r\n    {\r\n      name: \"image\",\r\n      type: \"upload\",\r\n      relationTo: \"media\",\r\n    },\r\n    {\r\n      name: \"stripeAccountId\",\r\n      type: \"text\",\r\n      required: true,\r\n      access: {\r\n        update: ({ req }) => isSuperAdmin(req.user),\r\n      },\r\n      admin: {\r\n        readOnly: true,\r\n        description: \"Stripe Account ID associated with your shop\",\r\n      },\r\n    },\r\n    {\r\n      name: \"stripeDetailsSubmitted\",\r\n      type: \"checkbox\",\r\n      access: {\r\n        update: ({ req }) => isSuperAdmin(req.user),\r\n      },\r\n      admin: {\r\n        readOnly: true,\r\n        description:\r\n          \"You cannot create products until you submit your stripe details\",\r\n      },\r\n    },\r\n  ],\r\n};\r\n","size_bytes":1570},"src/collections/Users.ts":{"content":"import type { CollectionConfig } from \"payload\";\nimport { tenantsArrayField } from \"@payloadcms/plugin-multi-tenant/fields\";\nimport { isSuperAdmin } from \"@/lib/access\";\n\nconst DefaultTenantArrayField = tenantsArrayField({\n  tenantsArrayFieldName: \"tenants\",\n  tenantsCollectionSlug: \"tenants\",\n  tenantsArrayTenantFieldName: \"tenant\",\n  arrayFieldAccess: {\n    read: () => true,\n    create: ({ req }) => isSuperAdmin(req.user),\n    update: ({ req }) => isSuperAdmin(req.user),\n  },\n  tenantFieldAccess: {\n    read: () => true,\n    create: ({ req }) => isSuperAdmin(req.user),\n    update: ({ req }) => isSuperAdmin(req.user),\n  },\n});\n\nexport const Users: CollectionConfig = {\n  slug: \"users\",\n  access: {\n    read: () => true,\n    create: ({req}) => isSuperAdmin(req.user),\n    delete: ({req}) => isSuperAdmin(req.user),\n    update: ({req, id}) => {\n      if(isSuperAdmin) return true\n\n      return req.user?.id === id\n    }\n  },\n  admin: {\n    useAsTitle: \"email\",\n    hidden: ({user}) => !isSuperAdmin(user)\n  },\n  auth: true,\n  fields: [\n    {\n      name: \"username\",\n      required: true,\n      unique: true,\n      type: \"text\",\n    },\n    {\n      admin: {\n        position: \"sidebar\",\n      },\n      name: \"roles\",\n      type: \"select\",\n      defaultValue: [\"user\"],\n      hasMany: true,\n      options: [\"super-admin\", \"user\"],\n      access: {\n        update: ({req}) => isSuperAdmin(req.user)\n      }\n    },\n    {\n      ...DefaultTenantArrayField,\n      admin: {\n        ...(DefaultTenantArrayField?.admin || {}),\n        position: \"sidebar\",\n      },\n    },\n  ],\n};\n","size_bytes":1574},"src/components/star-picker.tsx":{"content":"\"use client\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { StarIcon } from \"lucide-react\";\r\nimport React, { useState } from \"react\";\r\n\r\ninterface StarPickerProps {\r\n  value?: number;\r\n  onChange?: (value: number) => void;\r\n  disabled?: boolean;\r\n  className?: string;\r\n}\r\n\r\nconst StarPicker = ({\r\n  value,\r\n  onChange,\r\n  disabled,\r\n  className,\r\n}: StarPickerProps) => {\r\n  const [hoverValue, setHoverValue] = useState(0);\r\n\r\n  const handleChange = (value: number) => {\r\n    console.log({value})\r\n\r\n    onChange?.(value)\r\n  }\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"flex items-center\",\r\n        disabled && \"opacity-50 cursor-not-allowed\",\r\n        className\r\n      )}\r\n    >\r\n      {[1, 2, 3, 4, 5].map((star) => (\r\n        <button\r\n          key={star}\r\n          type=\"button\"\r\n          disabled={disabled}\r\n          className={cn(\r\n            \"p-0.5 hover:scale-110 transition\",\r\n            !disabled && \"cursor-pointer\"\r\n          )}\r\n          onClick={() => handleChange(star)}\r\n          onMouseEnter={() => setHoverValue(star)}\r\n          onMouseLeave={() => setHoverValue(0)}\r\n        >\r\n          <StarIcon\r\n            className={cn(\r\n              \"size-5\",\r\n              ((hoverValue || value) ?? 0) >= star\r\n                ? \"fill-black stroke-black\"\r\n                : \"stroke-black\"\r\n            )}\r\n          />\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StarPicker;\r\n","size_bytes":1436},"src/components/star-rating.tsx":{"content":"import { cn } from \"@/lib/utils\";\r\nimport { StarIcon } from \"lucide-react\";\r\nimport React from \"react\";\r\n\r\nconst MAX_RATING = 5;\r\nconst MIN_RATING = 0;\r\n\r\ninterface StarRatingsProps {\r\n  rating: number;\r\n  className?: string;\r\n  iconClassName?: string;\r\n  text?: string;\r\n}\r\n\r\nconst StarRatings = ({\r\n  rating,\r\n  className,\r\n  iconClassName,\r\n  text,\r\n}: StarRatingsProps) => {\r\n  const safeRating = Math.max(MIN_RATING, Math.min(rating, MAX_RATING));\r\n\r\n  return (\r\n    <div className={cn(\"flex items-center gap-x-1\", className)}>\r\n      {Array.from({ length: MAX_RATING }).map((_, index) => (\r\n        <StarIcon\r\n          key={index}\r\n          className={cn(\r\n            \"size-4\",\r\n            index < safeRating ? \"fill-black\" : \"\",\r\n            iconClassName\r\n          )}\r\n        />\r\n      ))}\r\n      {text && <p>{text}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StarRatings;\r\n","size_bytes":889},"src/hooks/use-mobile.ts":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"src/lib/access.ts":{"content":"import { ClientUser } from \"payload\";\r\nimport type {User} from \"@/payload-types\"\r\n\r\nexport const isSuperAdmin = (user: User | ClientUser | null) => {\r\n    return Boolean(user?.roles.includes(\"super-admin\"))\r\n}","size_bytes":209},"src/lib/stripe.ts":{"content":"import Stripe from \"stripe\";\r\n\r\nexport const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\r\n  apiVersion: \"2025-08-27.basil\",\r\n  typescript: true,\r\n});\r\n","size_bytes":161},"src/lib/utils.ts":{"content":"// src/lib/utils.ts\nimport { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function generateTenantUrl(tenantSlug: string) {\n  return `/tenants/${tenantSlug}`;\n}\n\n// For server-side usage, create a separate server-only utility\nexport const serverGenerateAuthCookie = async (\n  prefix: string,\n  value: string\n) => {\n  const { cookies } = await import(\"next/headers\");\n  const cookieStore = await cookies();\n  cookieStore.set({\n    name: `${prefix}-token`,\n    value: value,\n    httpOnly: true,\n    path: \"/\",\n  });\n};\n\n// For client-side usage\nexport const clientGenerateAuthCookie = (prefix: string, value: string) => {\n  if (typeof document !== \"undefined\") {\n    document.cookie = `${prefix}-token=${value}; path=/;`;\n  }\n};\n\n// Maintain the original interface but with a different implementation\ninterface Props {\n  prefix: string;\n  value: string;\n}\n\nexport const generateAuthCookie = async ({ prefix, value }: Props) => {\n  if (typeof window !== \"undefined\") {\n    // Client-side\n    clientGenerateAuthCookie(prefix, value);\n  } else {\n    // Server-side\n    await serverGenerateAuthCookie(prefix, value);\n  }\n};\n\nexport function formatCurrency(value: number | string) {\n  return new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    maximumFractionDigits: 0,\n  }).format(Number(value));\n}\n","size_bytes":1444},"src/trpc/client.tsx":{"content":"'use client';\r\n// ^-- to make sure we can mount the Provider from a server component\r\nimport type { QueryClient } from '@tanstack/react-query';\r\nimport { QueryClientProvider } from '@tanstack/react-query';\r\nimport { createTRPCClient, httpBatchLink } from '@trpc/client';\r\nimport { createTRPCContext } from '@trpc/tanstack-react-query';\r\nimport { useState } from 'react';\r\nimport { makeQueryClient } from './query-client';\r\nimport type { AppRouter } from './routers/_app';\r\nexport const { TRPCProvider, useTRPC } = createTRPCContext<AppRouter>();\r\nlet browserQueryClient: QueryClient;\r\nfunction getQueryClient() {\r\n  if (typeof window === 'undefined') {\r\n    // Server: always make a new query client\r\n    return makeQueryClient();\r\n  }\r\n  // Browser: make a new query client if we don't already have one\r\n  // This is very important, so we don't re-make a new client if React\r\n  // suspends during the initial render. This may not be needed if we\r\n  // have a suspense boundary BELOW the creation of the query client\r\n  if (!browserQueryClient) browserQueryClient = makeQueryClient();\r\n  return browserQueryClient;\r\n}\r\nfunction getUrl() {\r\n  const base = (() => {\r\n    if (typeof window !== 'undefined') return '';\r\n    return process.env.NEXT_PUBLIC_APP_URL\r\n  })();\r\n  return `${base}/api/trpc`;\r\n}\r\nexport function TRPCReactProvider(\r\n  props: Readonly<{\r\n    children: React.ReactNode;\r\n  }>,\r\n) {\r\n  // NOTE: Avoid useState when initializing the query client if you don't\r\n  //       have a suspense boundary between this and the code that may\r\n  //       suspend because React will throw away the client on the initial\r\n  //       render if it suspends and there is no boundary\r\n  const queryClient = getQueryClient();\r\n  const [trpcClient] = useState(() =>\r\n    createTRPCClient<AppRouter>({\r\n      links: [\r\n        httpBatchLink({\r\n          // transformer: superjson, <-- if you use a data transformer\r\n          url: getUrl(),\r\n        }),\r\n      ],\r\n    }),\r\n  );\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      <TRPCProvider trpcClient={trpcClient} queryClient={queryClient}>\r\n        {props.children}\r\n      </TRPCProvider>\r\n    </QueryClientProvider>\r\n  );\r\n}","size_bytes":2193},"src/trpc/init.ts":{"content":"import { initTRPC, TRPCError } from \"@trpc/server\";\r\nimport { getPayload } from \"payload\";\r\nimport { cache } from \"react\";\r\nimport config from \"@payload-config\";\r\nimport { headers as getHeaders } from \"next/headers\";\r\n\r\nexport const createTRPCContext = cache(async () => {\r\n  /**\r\n   * @see: https://trpc.io/docs/server/context\r\n   */\r\n  return { userId: \"user_123\" };\r\n});\r\n// Avoid exporting the entire t-object\r\n// since it's not very descriptive.\r\n// For instance, the use of a t variable\r\n// is common in i18n libraries.\r\nconst t = initTRPC.create({\r\n  /**\r\n   * @see https://trpc.io/docs/server/data-transformers\r\n   */\r\n  // transformer: superjson,\r\n});\r\n// Base router and procedure helpers\r\nexport const createTRPCRouter = t.router;\r\nexport const createCallerFactory = t.createCallerFactory;\r\nexport const baseProcedure = t.procedure.use(async ({ next }) => {\r\n  const payload = await getPayload({ config });\r\n\r\n  return next({ ctx: { db: payload } });\r\n});\r\n\r\nexport const protectedProcedure = baseProcedure.use(async ({ ctx, next }) => {\r\n  const headers = await getHeaders();\r\n  const session = await ctx.db.auth({ headers });\r\n\r\n  if (!session.user) {\r\n    throw new TRPCError({\r\n      code: \"UNAUTHORIZED\",\r\n      message: \"Not Authenticated\",\r\n    });\r\n  }\r\n\r\n  return next({\r\n    ctx: {\r\n      ...ctx,\r\n      session: {\r\n        ...session,\r\n        user: session.user,\r\n      },\r\n    },\r\n  });\r\n});\r\n","size_bytes":1417},"src/trpc/query-client.ts":{"content":"import {\r\n  defaultShouldDehydrateQuery,\r\n  QueryClient,\r\n} from '@tanstack/react-query';\r\n// import superjson from 'superjson';\r\nexport function makeQueryClient() {\r\n  return new QueryClient({\r\n    defaultOptions: {\r\n      queries: {\r\n        staleTime: 30 * 1000,\r\n      },\r\n      dehydrate: {\r\n        // serializeData: superjson.serialize,\r\n        shouldDehydrateQuery: (query) =>\r\n          defaultShouldDehydrateQuery(query) ||\r\n          query.state.status === 'pending',\r\n      },\r\n      hydrate: {\r\n        // deserializeData: superjson.deserialize,\r\n      },\r\n    },\r\n  });\r\n}","size_bytes":587},"src/trpc/server.tsx":{"content":"import 'server-only'; // <-- ensure this file cannot be imported from the client\r\nimport { createTRPCOptionsProxy } from '@trpc/tanstack-react-query';\r\nimport { cache } from 'react';\r\nimport { createTRPCContext } from './init';\r\nimport { makeQueryClient } from './query-client';\r\nimport { appRouter } from './routers/_app';\r\n// import { dehydrate, HydrationBoundary } from '@tanstack/react-query';\r\n\r\nexport const getQueryClient = cache(makeQueryClient);\r\nexport const trpc = createTRPCOptionsProxy({\r\n  ctx: createTRPCContext,\r\n  router: appRouter,\r\n  queryClient: getQueryClient,\r\n});\r\n\r\nexport const caller = appRouter.createCaller(createTRPCContext)\r\n\r\n// export function HydrateClient(props: {children: React.ReactNode}) {\r\n//   const queryClient = getQueryClient()\r\n\r\n//   return (\r\n//     <HydrationBoundary state={dehydrate(queryClient)}>\r\n//       {props.children}\r\n//     </HydrationBoundary>\r\n//   )\r\n// }","size_bytes":916},"src/app/(app)/globals.css":{"content":"@import \"tailwindcss\";\n@import \"tw-animate-css\";\n\n@custom-variant dark (&:is(.dark *));\n\n@theme inline {\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --font-sans: var(--font-geist-sans);\n  --font-mono: var(--font-geist-mono);\n  --color-sidebar-ring: var(--sidebar-ring);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar: var(--sidebar);\n  --color-chart-5: var(--chart-5);\n  --color-chart-4: var(--chart-4);\n  --color-chart-3: var(--chart-3);\n  --color-chart-2: var(--chart-2);\n  --color-chart-1: var(--chart-1);\n  --color-ring: var(--ring);\n  --color-input: var(--input);\n  --color-border: var(--border);\n  --color-destructive: var(--destructive);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-accent: var(--accent);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-muted: var(--muted);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-secondary: var(--secondary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-primary: var(--primary);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-popover: var(--popover);\n  --color-card-foreground: var(--card-foreground);\n  --color-card: var(--card);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 4px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n}\n\n:root {\n  --radius: 0.625rem;\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.145 0 0);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.145 0 0);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.145 0 0);\n  --primary: oklch(0.205 0 0);\n  --primary-foreground: oklch(0.985 0 0);\n  --secondary: oklch(0.97 0 0);\n  --secondary-foreground: oklch(0.205 0 0);\n  --muted: oklch(0.97 0 0);\n  --muted-foreground: oklch(0.556 0 0);\n  --accent: oklch(0.97 0 0);\n  --accent-foreground: oklch(0.205 0 0);\n  --destructive: oklch(0.577 0.245 27.325);\n  --border: oklch(0 0 0);\n  --input: oklch(0 0 0);\n  --ring: oklch(0.708 0 0);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.145 0 0);\n  --sidebar-primary: oklch(0.205 0 0);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.97 0 0);\n  --sidebar-accent-foreground: oklch(0.205 0 0);\n  --sidebar-border: oklch(0.922 0 0);\n  --sidebar-ring: oklch(0.708 0 0);\n}\n\n.dark {\n  --background: oklch(0.145 0 0);\n  --foreground: oklch(0.985 0 0);\n  --card: oklch(0.205 0 0);\n  --card-foreground: oklch(0.985 0 0);\n  --popover: oklch(0.205 0 0);\n  --popover-foreground: oklch(0.985 0 0);\n  --primary: oklch(0.922 0 0);\n  --primary-foreground: oklch(0.205 0 0);\n  --secondary: oklch(0.269 0 0);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.269 0 0);\n  --muted-foreground: oklch(0.708 0 0);\n  --accent: oklch(0.269 0 0);\n  --accent-foreground: oklch(0.985 0 0);\n  --destructive: oklch(0.704 0.191 22.216);\n  --border: oklch(1 0 0 / 10%);\n  --input: oklch(1 0 0 / 15%);\n  --ring: oklch(0.556 0 0);\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.205 0 0);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.269 0 0);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(1 0 0 / 10%);\n  --sidebar-ring: oklch(0.556 0 0);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n","size_bytes":4160},"src/app/(app)/layout.tsx":{"content":"import type { Metadata } from \"next\";\nimport { DM_Sans } from \"next/font/google\";\nimport { NuqsAdapter } from \"nuqs/adapters/next/app\";\nimport { TRPCReactProvider } from \"@/trpc/client\";\nimport { Toaster } from \"@/components/ui/sonner\";\nimport \"./globals.css\";\n\nconst dmSans = DM_Sans({\n  subsets: [\"latin\"],\n});\n\nexport const metadata: Metadata = {\n  title: \"Create Next App\",\n  description: \"Generated by create next app\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body className={`${dmSans.className} antialiased`}>\n        <NuqsAdapter>\n          <TRPCReactProvider>\n            {children}\n            <Toaster />\n          </TRPCReactProvider>\n        </NuqsAdapter>\n      </body>\n    </html>\n  );\n}\n","size_bytes":804},"src/app/(payload)/layout.tsx":{"content":"/* THIS FILE WAS GENERATED AUTOMATICALLY BY PAYLOAD. */\n/* DO NOT MODIFY IT BECAUSE IT COULD BE REWRITTEN AT ANY TIME. */\nimport config from '@payload-config'\nimport '@payloadcms/next/css'\nimport type { ServerFunctionClient } from 'payload'\nimport { handleServerFunctions, RootLayout } from '@payloadcms/next/layouts'\nimport React from 'react'\n\nimport { importMap } from './admin/importMap.js'\nimport './custom.scss'\n\ntype Args = {\n  children: React.ReactNode\n}\n\nconst serverFunction: ServerFunctionClient = async function (args) {\n  'use server'\n  return handleServerFunctions({\n    ...args,\n    config,\n    importMap,\n  })\n}\n\nconst Layout = ({ children }: Args) => (\n  <RootLayout config={config} importMap={importMap} serverFunction={serverFunction}>\n    {children}\n  </RootLayout>\n)\n\nexport default Layout\n","size_bytes":810},"src/app/my-route/route.ts":{"content":"import configPromise from '@payload-config'\nimport { getPayload } from 'payload'\n\nexport const GET = async () => {\n  const payload = await getPayload({\n    config: configPromise,\n  })\n\n  const data = await payload.find({\n    collection: 'categories',\n  }) \n\n  return Response.json(data)\n}\n","size_bytes":289},"src/components/ui/accordion.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDownIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Accordion({\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Root>) {\n  return <AccordionPrimitive.Root data-slot=\"accordion\" {...props} />\n}\n\nfunction AccordionItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Item>) {\n  return (\n    <AccordionPrimitive.Item\n      data-slot=\"accordion-item\"\n      className={cn(\"border-b last:border-b-0\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AccordionTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        data-slot=\"accordion-trigger\"\n        className={cn(\n          \"focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <ChevronDownIcon className=\"text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200\" />\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  )\n}\n\nfunction AccordionContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Content>) {\n  return (\n    <AccordionPrimitive.Content\n      data-slot=\"accordion-content\"\n      className=\"data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm\"\n      {...props}\n    >\n      <div className={cn(\"pt-0 pb-4\", className)}>{children}</div>\n    </AccordionPrimitive.Content>\n  )\n}\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":2053},"src/components/ui/alert-dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nfunction AlertDialog({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {\n  return <AlertDialogPrimitive.Root data-slot=\"alert-dialog\" {...props} />\n}\n\nfunction AlertDialogTrigger({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {\n  return (\n    <AlertDialogPrimitive.Trigger data-slot=\"alert-dialog-trigger\" {...props} />\n  )\n}\n\nfunction AlertDialogPortal({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {\n  return (\n    <AlertDialogPrimitive.Portal data-slot=\"alert-dialog-portal\" {...props} />\n  )\n}\n\nfunction AlertDialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {\n  return (\n    <AlertDialogPrimitive.Overlay\n      data-slot=\"alert-dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {\n  return (\n    <AlertDialogPortal>\n      <AlertDialogOverlay />\n      <AlertDialogPrimitive.Content\n        data-slot=\"alert-dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      />\n    </AlertDialogPortal>\n  )\n}\n\nfunction AlertDialogHeader({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogFooter({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {\n  return (\n    <AlertDialogPrimitive.Title\n      data-slot=\"alert-dialog-title\"\n      className={cn(\"text-lg font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {\n  return (\n    <AlertDialogPrimitive.Description\n      data-slot=\"alert-dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogAction({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {\n  return (\n    <AlertDialogPrimitive.Action\n      className={cn(buttonVariants(), className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogCancel({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {\n  return (\n    <AlertDialogPrimitive.Cancel\n      className={cn(buttonVariants({ variant: \"outline\" }), className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":3864},"src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-card text-card-foreground\",\n        destructive:\n          \"text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Alert({\n  className,\n  variant,\n  ...props\n}: React.ComponentProps<\"div\"> & VariantProps<typeof alertVariants>) {\n  return (\n    <div\n      data-slot=\"alert\"\n      role=\"alert\"\n      className={cn(alertVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-title\"\n      className={cn(\n        \"col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDescription({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-description\"\n      className={cn(\n        \"text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1614},"src/components/ui/aspect-ratio.tsx":{"content":"\"use client\"\n\nimport * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nfunction AspectRatio({\n  ...props\n}: React.ComponentProps<typeof AspectRatioPrimitive.Root>) {\n  return <AspectRatioPrimitive.Root data-slot=\"aspect-ratio\" {...props} />\n}\n\nexport { AspectRatio }\n","size_bytes":280},"src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Avatar({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root\n      data-slot=\"avatar\"\n      className={cn(\n        \"relative flex size-8 shrink-0 overflow-hidden rounded-full\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarImage({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <AvatarPrimitive.Image\n      data-slot=\"avatar-image\"\n      className={cn(\"aspect-square size-full\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarFallback({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        \"bg-muted flex size-full items-center justify-center rounded-full\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1097},"src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90\",\n        destructive:\n          \"border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1631},"src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Breadcrumb({ ...props }: React.ComponentProps<\"nav\">) {\n  return <nav aria-label=\"breadcrumb\" data-slot=\"breadcrumb\" {...props} />\n}\n\nfunction BreadcrumbList({ className, ...props }: React.ComponentProps<\"ol\">) {\n  return (\n    <ol\n      data-slot=\"breadcrumb-list\"\n      className={cn(\n        \"text-muted-foreground flex flex-wrap items-center gap-1.5 text-sm break-words sm:gap-2.5\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"breadcrumb-item\"\n      className={cn(\"inline-flex items-center gap-1.5\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbLink({\n  asChild,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"breadcrumb-link\"\n      className={cn(\"hover:text-foreground transition-colors\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbPage({ className, ...props }: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"breadcrumb-page\"\n      role=\"link\"\n      aria-disabled=\"true\"\n      aria-current=\"page\"\n      className={cn(\"text-foreground font-normal\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbSeparator({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"breadcrumb-separator\"\n      role=\"presentation\"\n      aria-hidden=\"true\"\n      className={cn(\"[&>svg]:size-3.5\", className)}\n      {...props}\n    >\n      {children ?? <ChevronRight />}\n    </li>\n  )\n}\n\nfunction BreadcrumbEllipsis({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"breadcrumb-ellipsis\"\n      role=\"presentation\"\n      aria-hidden=\"true\"\n      className={cn(\"flex size-9 items-center justify-center\", className)}\n      {...props}\n    >\n      <MoreHorizontal className=\"size-4\" />\n      <span className=\"sr-only\">More</span>\n    </span>\n  )\n}\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2357},"src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-base font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive border cursor-pointer\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n        elevated: \"bg-white hover:shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] hover:translate-x-[4px] hover:translate-y-[4px] transition-all\"\n      },\n      size: {\n        default: \"h-12 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-10 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-12 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n","size_bytes":2246},"src/components/ui/calendar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport {\n  ChevronDownIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n} from \"lucide-react\"\nimport { DayButton, DayPicker, getDefaultClassNames } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button, buttonVariants } from \"@/components/ui/button\"\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  captionLayout = \"label\",\n  buttonVariant = \"ghost\",\n  formatters,\n  components,\n  ...props\n}: React.ComponentProps<typeof DayPicker> & {\n  buttonVariant?: React.ComponentProps<typeof Button>[\"variant\"]\n}) {\n  const defaultClassNames = getDefaultClassNames()\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\n        \"bg-background group/calendar p-3 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent\",\n        String.raw`rtl:**:[.rdp-button\\_next>svg]:rotate-180`,\n        String.raw`rtl:**:[.rdp-button\\_previous>svg]:rotate-180`,\n        className\n      )}\n      captionLayout={captionLayout}\n      formatters={{\n        formatMonthDropdown: (date) =>\n          date.toLocaleString(\"default\", { month: \"short\" }),\n        ...formatters,\n      }}\n      classNames={{\n        root: cn(\"w-fit\", defaultClassNames.root),\n        months: cn(\n          \"flex gap-4 flex-col md:flex-row relative\",\n          defaultClassNames.months\n        ),\n        month: cn(\"flex flex-col w-full gap-4\", defaultClassNames.month),\n        nav: cn(\n          \"flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between\",\n          defaultClassNames.nav\n        ),\n        button_previous: cn(\n          buttonVariants({ variant: buttonVariant }),\n          \"size-(--cell-size) aria-disabled:opacity-50 p-0 select-none\",\n          defaultClassNames.button_previous\n        ),\n        button_next: cn(\n          buttonVariants({ variant: buttonVariant }),\n          \"size-(--cell-size) aria-disabled:opacity-50 p-0 select-none\",\n          defaultClassNames.button_next\n        ),\n        month_caption: cn(\n          \"flex items-center justify-center h-(--cell-size) w-full px-(--cell-size)\",\n          defaultClassNames.month_caption\n        ),\n        dropdowns: cn(\n          \"w-full flex items-center text-sm font-medium justify-center h-(--cell-size) gap-1.5\",\n          defaultClassNames.dropdowns\n        ),\n        dropdown_root: cn(\n          \"relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md\",\n          defaultClassNames.dropdown_root\n        ),\n        dropdown: cn(\n          \"absolute bg-popover inset-0 opacity-0\",\n          defaultClassNames.dropdown\n        ),\n        caption_label: cn(\n          \"select-none font-medium\",\n          captionLayout === \"label\"\n            ? \"text-sm\"\n            : \"rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3.5\",\n          defaultClassNames.caption_label\n        ),\n        table: \"w-full border-collapse\",\n        weekdays: cn(\"flex\", defaultClassNames.weekdays),\n        weekday: cn(\n          \"text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem] select-none\",\n          defaultClassNames.weekday\n        ),\n        week: cn(\"flex w-full mt-2\", defaultClassNames.week),\n        week_number_header: cn(\n          \"select-none w-(--cell-size)\",\n          defaultClassNames.week_number_header\n        ),\n        week_number: cn(\n          \"text-[0.8rem] select-none text-muted-foreground\",\n          defaultClassNames.week_number\n        ),\n        day: cn(\n          \"relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none\",\n          defaultClassNames.day\n        ),\n        range_start: cn(\n          \"rounded-l-md bg-accent\",\n          defaultClassNames.range_start\n        ),\n        range_middle: cn(\"rounded-none\", defaultClassNames.range_middle),\n        range_end: cn(\"rounded-r-md bg-accent\", defaultClassNames.range_end),\n        today: cn(\n          \"bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none\",\n          defaultClassNames.today\n        ),\n        outside: cn(\n          \"text-muted-foreground aria-selected:text-muted-foreground\",\n          defaultClassNames.outside\n        ),\n        disabled: cn(\n          \"text-muted-foreground opacity-50\",\n          defaultClassNames.disabled\n        ),\n        hidden: cn(\"invisible\", defaultClassNames.hidden),\n        ...classNames,\n      }}\n      components={{\n        Root: ({ className, rootRef, ...props }) => {\n          return (\n            <div\n              data-slot=\"calendar\"\n              ref={rootRef}\n              className={cn(className)}\n              {...props}\n            />\n          )\n        },\n        Chevron: ({ className, orientation, ...props }) => {\n          if (orientation === \"left\") {\n            return (\n              <ChevronLeftIcon className={cn(\"size-4\", className)} {...props} />\n            )\n          }\n\n          if (orientation === \"right\") {\n            return (\n              <ChevronRightIcon\n                className={cn(\"size-4\", className)}\n                {...props}\n              />\n            )\n          }\n\n          return (\n            <ChevronDownIcon className={cn(\"size-4\", className)} {...props} />\n          )\n        },\n        DayButton: CalendarDayButton,\n        WeekNumber: ({ children, ...props }) => {\n          return (\n            <td {...props}>\n              <div className=\"flex size-(--cell-size) items-center justify-center text-center\">\n                {children}\n              </div>\n            </td>\n          )\n        },\n        ...components,\n      }}\n      {...props}\n    />\n  )\n}\n\nfunction CalendarDayButton({\n  className,\n  day,\n  modifiers,\n  ...props\n}: React.ComponentProps<typeof DayButton>) {\n  const defaultClassNames = getDefaultClassNames()\n\n  const ref = React.useRef<HTMLButtonElement>(null)\n  React.useEffect(() => {\n    if (modifiers.focused) ref.current?.focus()\n  }, [modifiers.focused])\n\n  return (\n    <Button\n      ref={ref}\n      variant=\"ghost\"\n      size=\"icon\"\n      data-day={day.date.toLocaleDateString()}\n      data-selected-single={\n        modifiers.selected &&\n        !modifiers.range_start &&\n        !modifiers.range_end &&\n        !modifiers.range_middle\n      }\n      data-range-start={modifiers.range_start}\n      data-range-end={modifiers.range_end}\n      data-range-middle={modifiers.range_middle}\n      className={cn(\n        \"data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70\",\n        defaultClassNames.day,\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Calendar, CalendarDayButton }\n","size_bytes":7660},"src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1989},"src/components/ui/carousel.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nfunction Carousel({\n  orientation = \"horizontal\",\n  opts,\n  setApi,\n  plugins,\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & CarouselProps) {\n  const [carouselRef, api] = useEmblaCarousel(\n    {\n      ...opts,\n      axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n    },\n    plugins\n  )\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n  const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n  const onSelect = React.useCallback((api: CarouselApi) => {\n    if (!api) return\n    setCanScrollPrev(api.canScrollPrev())\n    setCanScrollNext(api.canScrollNext())\n  }, [])\n\n  const scrollPrev = React.useCallback(() => {\n    api?.scrollPrev()\n  }, [api])\n\n  const scrollNext = React.useCallback(() => {\n    api?.scrollNext()\n  }, [api])\n\n  const handleKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === \"ArrowLeft\") {\n        event.preventDefault()\n        scrollPrev()\n      } else if (event.key === \"ArrowRight\") {\n        event.preventDefault()\n        scrollNext()\n      }\n    },\n    [scrollPrev, scrollNext]\n  )\n\n  React.useEffect(() => {\n    if (!api || !setApi) return\n    setApi(api)\n  }, [api, setApi])\n\n  React.useEffect(() => {\n    if (!api) return\n    onSelect(api)\n    api.on(\"reInit\", onSelect)\n    api.on(\"select\", onSelect)\n\n    return () => {\n      api?.off(\"select\", onSelect)\n    }\n  }, [api, onSelect])\n\n  return (\n    <CarouselContext.Provider\n      value={{\n        carouselRef,\n        api: api,\n        opts,\n        orientation:\n          orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n        scrollPrev,\n        scrollNext,\n        canScrollPrev,\n        canScrollNext,\n      }}\n    >\n      <div\n        onKeyDownCapture={handleKeyDown}\n        className={cn(\"relative\", className)}\n        role=\"region\"\n        aria-roledescription=\"carousel\"\n        data-slot=\"carousel\"\n        {...props}\n      >\n        {children}\n      </div>\n    </CarouselContext.Provider>\n  )\n}\n\nfunction CarouselContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div\n      ref={carouselRef}\n      className=\"overflow-hidden\"\n      data-slot=\"carousel-content\"\n    >\n      <div\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction CarouselItem({ className, ...props }: React.ComponentProps<\"div\">) {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      data-slot=\"carousel-item\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CarouselPrevious({\n  className,\n  variant = \"outline\",\n  size = \"icon\",\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      data-slot=\"carousel-previous\"\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute size-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"top-1/2 -left-12 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n}\n\nfunction CarouselNext({\n  className,\n  variant = \"outline\",\n  size = \"icon\",\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      data-slot=\"carousel-next\"\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute size-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"top-1/2 -right-12 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n}\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":5556},"src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nfunction ChartContainer({\n  id,\n  className,\n  children,\n  config,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  config: ChartConfig\n  children: React.ComponentProps<\n    typeof RechartsPrimitive.ResponsiveContainer\n  >[\"children\"]\n}) {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-slot=\"chart\"\n        data-chart={chartId}\n        className={cn(\n          \"[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n}\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nfunction ChartTooltipContent({\n  active,\n  payload,\n  className,\n  indicator = \"dot\",\n  hideLabel = false,\n  hideIndicator = false,\n  label,\n  labelFormatter,\n  labelClassName,\n  formatter,\n  color,\n  nameKey,\n  labelKey,\n}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n  React.ComponentProps<\"div\"> & {\n    hideLabel?: boolean\n    hideIndicator?: boolean\n    indicator?: \"line\" | \"dot\" | \"dashed\"\n    nameKey?: string\n    labelKey?: string\n  }) {\n  const { config } = useChart()\n\n  const tooltipLabel = React.useMemo(() => {\n    if (hideLabel || !payload?.length) {\n      return null\n    }\n\n    const [item] = payload\n    const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n    const itemConfig = getPayloadConfigFromPayload(config, item, key)\n    const value =\n      !labelKey && typeof label === \"string\"\n        ? config[label as keyof typeof config]?.label || label\n        : itemConfig?.label\n\n    if (labelFormatter) {\n      return (\n        <div className={cn(\"font-medium\", labelClassName)}>\n          {labelFormatter(value, payload)}\n        </div>\n      )\n    }\n\n    if (!value) {\n      return null\n    }\n\n    return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n  }, [\n    label,\n    labelFormatter,\n    payload,\n    hideLabel,\n    labelClassName,\n    config,\n    labelKey,\n  ])\n\n  if (!active || !payload?.length) {\n    return null\n  }\n\n  const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n  return (\n    <div\n      className={cn(\n        \"border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl\",\n        className\n      )}\n    >\n      {!nestLabel ? tooltipLabel : null}\n      <div className=\"grid gap-1.5\">\n        {payload.map((item, index) => {\n          const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n          const indicatorColor = color || item.payload.fill || item.color\n\n          return (\n            <div\n              key={item.dataKey}\n              className={cn(\n                \"[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5\",\n                indicator === \"dot\" && \"items-center\"\n              )}\n            >\n              {formatter && item?.value !== undefined && item.name ? (\n                formatter(item.value, item.name, item, index, item.payload)\n              ) : (\n                <>\n                  {itemConfig?.icon ? (\n                    <itemConfig.icon />\n                  ) : (\n                    !hideIndicator && (\n                      <div\n                        className={cn(\n                          \"shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)\",\n                          {\n                            \"h-2.5 w-2.5\": indicator === \"dot\",\n                            \"w-1\": indicator === \"line\",\n                            \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                              indicator === \"dashed\",\n                            \"my-0.5\": nestLabel && indicator === \"dashed\",\n                          }\n                        )}\n                        style={\n                          {\n                            \"--color-bg\": indicatorColor,\n                            \"--color-border\": indicatorColor,\n                          } as React.CSSProperties\n                        }\n                      />\n                    )\n                  )}\n                  <div\n                    className={cn(\n                      \"flex flex-1 justify-between leading-none\",\n                      nestLabel ? \"items-end\" : \"items-center\"\n                    )}\n                  >\n                    <div className=\"grid gap-1.5\">\n                      {nestLabel ? tooltipLabel : null}\n                      <span className=\"text-muted-foreground\">\n                        {itemConfig?.label || item.name}\n                      </span>\n                    </div>\n                    {item.value && (\n                      <span className=\"text-foreground font-mono font-medium tabular-nums\">\n                        {item.value.toLocaleString()}\n                      </span>\n                    )}\n                  </div>\n                </>\n              )}\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nfunction ChartLegendContent({\n  className,\n  hideIcon = false,\n  payload,\n  verticalAlign = \"bottom\",\n  nameKey,\n}: React.ComponentProps<\"div\"> &\n  Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n    hideIcon?: boolean\n    nameKey?: string\n  }) {\n  const { config } = useChart()\n\n  if (!payload?.length) {\n    return null\n  }\n\n  return (\n    <div\n      className={cn(\n        \"flex items-center justify-center gap-4\",\n        verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n        className\n      )}\n    >\n      {payload.map((item) => {\n        const key = `${nameKey || item.dataKey || \"value\"}`\n        const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n        return (\n          <div\n            key={item.value}\n            className={cn(\n              \"[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3\"\n            )}\n          >\n            {itemConfig?.icon && !hideIcon ? (\n              <itemConfig.icon />\n            ) : (\n              <div\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                style={{\n                  backgroundColor: item.color,\n                }}\n              />\n            )}\n            {itemConfig?.label}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":9781},"src/components/ui/checkbox.tsx":{"content":"\"use client\";\n\nimport * as React from \"react\";\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\";\nimport { CheckIcon } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Checkbox({\n  className,\n  ...props\n}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {\n  return (\n    <CheckboxPrimitive.Root\n      data-slot=\"checkbox\"\n      className={cn(\n        \"peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        \"bg-white\",\n        className\n      )}\n      {...props}\n    >\n      <CheckboxPrimitive.Indicator\n        data-slot=\"checkbox-indicator\"\n        className=\"flex items-center justify-center text-current transition-none\"\n      >\n        <CheckIcon className=\"size-3.5\" />\n      </CheckboxPrimitive.Indicator>\n    </CheckboxPrimitive.Root>\n  );\n}\n\nexport { Checkbox };\n","size_bytes":1253},"src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nfunction Collapsible({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.Root>) {\n  return <CollapsiblePrimitive.Root data-slot=\"collapsible\" {...props} />\n}\n\nfunction CollapsibleTrigger({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleTrigger\n      data-slot=\"collapsible-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction CollapsibleContent({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleContent\n      data-slot=\"collapsible-content\"\n      {...props}\n    />\n  )\n}\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":800},"src/components/ui/command.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { SearchIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\"\n\nfunction Command({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive>) {\n  return (\n    <CommandPrimitive\n      data-slot=\"command\"\n      className={cn(\n        \"bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandDialog({\n  title = \"Command Palette\",\n  description = \"Search for a command to run...\",\n  children,\n  className,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof Dialog> & {\n  title?: string\n  description?: string\n  className?: string\n  showCloseButton?: boolean\n}) {\n  return (\n    <Dialog {...props}>\n      <DialogHeader className=\"sr-only\">\n        <DialogTitle>{title}</DialogTitle>\n        <DialogDescription>{description}</DialogDescription>\n      </DialogHeader>\n      <DialogContent\n        className={cn(\"overflow-hidden p-0\", className)}\n        showCloseButton={showCloseButton}\n      >\n        <Command className=\"[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nfunction CommandInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Input>) {\n  return (\n    <div\n      data-slot=\"command-input-wrapper\"\n      className=\"flex h-9 items-center gap-2 border-b px-3\"\n    >\n      <SearchIcon className=\"size-4 shrink-0 opacity-50\" />\n      <CommandPrimitive.Input\n        data-slot=\"command-input\"\n        className={cn(\n          \"placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction CommandList({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.List>) {\n  return (\n    <CommandPrimitive.List\n      data-slot=\"command-list\"\n      className={cn(\n        \"max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandEmpty({\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Empty>) {\n  return (\n    <CommandPrimitive.Empty\n      data-slot=\"command-empty\"\n      className=\"py-6 text-center text-sm\"\n      {...props}\n    />\n  )\n}\n\nfunction CommandGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Group>) {\n  return (\n    <CommandPrimitive.Group\n      data-slot=\"command-group\"\n      className={cn(\n        \"text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Separator>) {\n  return (\n    <CommandPrimitive.Separator\n      data-slot=\"command-separator\"\n      className={cn(\"bg-border -mx-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CommandItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Item>) {\n  return (\n    <CommandPrimitive.Item\n      data-slot=\"command-item\"\n      className={cn(\n        \"data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"command-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4818},"src/components/ui/context-menu.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction ContextMenu({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Root>) {\n  return <ContextMenuPrimitive.Root data-slot=\"context-menu\" {...props} />\n}\n\nfunction ContextMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Trigger>) {\n  return (\n    <ContextMenuPrimitive.Trigger data-slot=\"context-menu-trigger\" {...props} />\n  )\n}\n\nfunction ContextMenuGroup({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Group>) {\n  return (\n    <ContextMenuPrimitive.Group data-slot=\"context-menu-group\" {...props} />\n  )\n}\n\nfunction ContextMenuPortal({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Portal>) {\n  return (\n    <ContextMenuPrimitive.Portal data-slot=\"context-menu-portal\" {...props} />\n  )\n}\n\nfunction ContextMenuSub({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Sub>) {\n  return <ContextMenuPrimitive.Sub data-slot=\"context-menu-sub\" {...props} />\n}\n\nfunction ContextMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.RadioGroup>) {\n  return (\n    <ContextMenuPrimitive.RadioGroup\n      data-slot=\"context-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <ContextMenuPrimitive.SubTrigger\n      data-slot=\"context-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto\" />\n    </ContextMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction ContextMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.SubContent>) {\n  return (\n    <ContextMenuPrimitive.SubContent\n      data-slot=\"context-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Content>) {\n  return (\n    <ContextMenuPrimitive.Portal>\n      <ContextMenuPrimitive.Content\n        data-slot=\"context-menu-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-context-menu-content-available-height) min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md\",\n          className\n        )}\n        {...props}\n      />\n    </ContextMenuPrimitive.Portal>\n  )\n}\n\nfunction ContextMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: \"default\" | \"destructive\"\n}) {\n  return (\n    <ContextMenuPrimitive.Item\n      data-slot=\"context-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.CheckboxItem>) {\n  return (\n    <ContextMenuPrimitive.CheckboxItem\n      data-slot=\"context-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <ContextMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </ContextMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </ContextMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction ContextMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.RadioItem>) {\n  return (\n    <ContextMenuPrimitive.RadioItem\n      data-slot=\"context-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <ContextMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </ContextMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </ContextMenuPrimitive.RadioItem>\n  )\n}\n\nfunction ContextMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <ContextMenuPrimitive.Label\n      data-slot=\"context-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"text-foreground px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Separator>) {\n  return (\n    <ContextMenuPrimitive.Separator\n      data-slot=\"context-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"context-menu-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":8222},"src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { XIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogContent({\n  className,\n  children,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content> & {\n  showCloseButton?: boolean\n}) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        {showCloseButton && (\n          <DialogPrimitive.Close\n            data-slot=\"dialog-close\"\n            className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\"\n          >\n            <XIcon />\n            <span className=\"sr-only\">Close</span>\n          </DialogPrimitive.Close>\n        )}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\"text-lg leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n}\n","size_bytes":3982},"src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Drawer({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) {\n  return <DrawerPrimitive.Root data-slot=\"drawer\" {...props} />\n}\n\nfunction DrawerTrigger({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Trigger>) {\n  return <DrawerPrimitive.Trigger data-slot=\"drawer-trigger\" {...props} />\n}\n\nfunction DrawerPortal({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Portal>) {\n  return <DrawerPrimitive.Portal data-slot=\"drawer-portal\" {...props} />\n}\n\nfunction DrawerClose({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Close>) {\n  return <DrawerPrimitive.Close data-slot=\"drawer-close\" {...props} />\n}\n\nfunction DrawerOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Overlay>) {\n  return (\n    <DrawerPrimitive.Overlay\n      data-slot=\"drawer-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Content>) {\n  return (\n    <DrawerPortal data-slot=\"drawer-portal\">\n      <DrawerOverlay />\n      <DrawerPrimitive.Content\n        data-slot=\"drawer-content\"\n        className={cn(\n          \"group/drawer-content bg-background fixed z-50 flex h-auto flex-col\",\n          \"data-[vaul-drawer-direction=top]:inset-x-0 data-[vaul-drawer-direction=top]:top-0 data-[vaul-drawer-direction=top]:mb-24 data-[vaul-drawer-direction=top]:max-h-[80vh] data-[vaul-drawer-direction=top]:rounded-b-lg data-[vaul-drawer-direction=top]:border-b\",\n          \"data-[vaul-drawer-direction=bottom]:inset-x-0 data-[vaul-drawer-direction=bottom]:bottom-0 data-[vaul-drawer-direction=bottom]:mt-24 data-[vaul-drawer-direction=bottom]:max-h-[80vh] data-[vaul-drawer-direction=bottom]:rounded-t-lg data-[vaul-drawer-direction=bottom]:border-t\",\n          \"data-[vaul-drawer-direction=right]:inset-y-0 data-[vaul-drawer-direction=right]:right-0 data-[vaul-drawer-direction=right]:w-3/4 data-[vaul-drawer-direction=right]:border-l data-[vaul-drawer-direction=right]:sm:max-w-sm\",\n          \"data-[vaul-drawer-direction=left]:inset-y-0 data-[vaul-drawer-direction=left]:left-0 data-[vaul-drawer-direction=left]:w-3/4 data-[vaul-drawer-direction=left]:border-r data-[vaul-drawer-direction=left]:sm:max-w-sm\",\n          className\n        )}\n        {...props}\n      >\n        <div className=\"bg-muted mx-auto mt-4 hidden h-2 w-[100px] shrink-0 rounded-full group-data-[vaul-drawer-direction=bottom]/drawer-content:block\" />\n        {children}\n      </DrawerPrimitive.Content>\n    </DrawerPortal>\n  )\n}\n\nfunction DrawerHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"drawer-header\"\n      className={cn(\n        \"flex flex-col gap-0.5 p-4 group-data-[vaul-drawer-direction=bottom]/drawer-content:text-center group-data-[vaul-drawer-direction=top]/drawer-content:text-center md:gap-1.5 md:text-left\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"drawer-footer\"\n      className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Title>) {\n  return (\n    <DrawerPrimitive.Title\n      data-slot=\"drawer-title\"\n      className={cn(\"text-foreground font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Description>) {\n  return (\n    <DrawerPrimitive.Description\n      data-slot=\"drawer-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":4255},"src/components/ui/dropdown-menu.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}\n\nfunction DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  )\n}\n\nfunction DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md\",\n          className\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  )\n}\n\nfunction DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  )\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: \"default\" | \"destructive\"\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto size-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n}\n","size_bytes":8284},"src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  useFormState,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState } = useFormContext()\n  const formState = useFormState({ name: fieldContext.name })\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nfunction FormItem({ className, ...props }: React.ComponentProps<\"div\">) {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div\n        data-slot=\"form-item\"\n        className={cn(\"grid gap-2\", className)}\n        {...props}\n      />\n    </FormItemContext.Provider>\n  )\n}\n\nfunction FormLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      data-slot=\"form-label\"\n      data-error={!!error}\n      className={cn(\"data-[error=true]:text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n}\n\nfunction FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      data-slot=\"form-control\"\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n}\n\nfunction FormDescription({ className, ...props }: React.ComponentProps<\"p\">) {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      data-slot=\"form-description\"\n      id={formDescriptionId}\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction FormMessage({ className, ...props }: React.ComponentProps<\"p\">) {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : props.children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      data-slot=\"form-message\"\n      id={formMessageId}\n      className={cn(\"text-destructive text-sm\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n}\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":3759},"src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction HoverCard({\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Root>) {\n  return <HoverCardPrimitive.Root data-slot=\"hover-card\" {...props} />\n}\n\nfunction HoverCardTrigger({\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Trigger>) {\n  return (\n    <HoverCardPrimitive.Trigger data-slot=\"hover-card-trigger\" {...props} />\n  )\n}\n\nfunction HoverCardContent({\n  className,\n  align = \"center\",\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Content>) {\n  return (\n    <HoverCardPrimitive.Portal data-slot=\"hover-card-portal\">\n      <HoverCardPrimitive.Content\n        data-slot=\"hover-card-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-64 origin-(--radix-hover-card-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden\",\n          className\n        )}\n        {...props}\n      />\n    </HoverCardPrimitive.Portal>\n  )\n}\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1532},"src/components/ui/input-otp.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { MinusIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction InputOTP({\n  className,\n  containerClassName,\n  ...props\n}: React.ComponentProps<typeof OTPInput> & {\n  containerClassName?: string\n}) {\n  return (\n    <OTPInput\n      data-slot=\"input-otp\"\n      containerClassName={cn(\n        \"flex items-center gap-2 has-disabled:opacity-50\",\n        containerClassName\n      )}\n      className={cn(\"disabled:cursor-not-allowed\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction InputOTPGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"input-otp-group\"\n      className={cn(\"flex items-center\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction InputOTPSlot({\n  index,\n  className,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  index: number\n}) {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext?.slots[index] ?? {}\n\n  return (\n    <div\n      data-slot=\"input-otp-slot\"\n      data-active={isActive}\n      className={cn(\n        \"data-[active=true]:border-ring data-[active=true]:ring-ring/50 data-[active=true]:aria-invalid:ring-destructive/20 dark:data-[active=true]:aria-invalid:ring-destructive/40 aria-invalid:border-destructive data-[active=true]:aria-invalid:border-destructive dark:bg-input/30 border-input relative flex h-9 w-9 items-center justify-center border-y border-r text-sm shadow-xs transition-all outline-none first:rounded-l-md first:border-l last:rounded-r-md data-[active=true]:z-10 data-[active=true]:ring-[3px]\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"animate-caret-blink bg-foreground h-4 w-px duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n}\n\nfunction InputOTPSeparator({ ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div data-slot=\"input-otp-separator\" role=\"separator\" {...props}>\n      <MinusIcon />\n    </div>\n  )\n}\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2254},"src/components/ui/input.tsx":{"content":"import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        // Modified classes\n        \"h-12 bg-white font-medium md:text-base\",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Input };\n","size_bytes":1024},"src/components/ui/label.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n","size_bytes":611},"src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Menubar({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Root>) {\n  return (\n    <MenubarPrimitive.Root\n      data-slot=\"menubar\"\n      className={cn(\n        \"bg-background flex h-9 items-center gap-1 rounded-md border p-1 shadow-xs\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu data-slot=\"menubar-menu\" {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group data-slot=\"menubar-group\" {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal data-slot=\"menubar-portal\" {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return (\n    <MenubarPrimitive.RadioGroup data-slot=\"menubar-radio-group\" {...props} />\n  )\n}\n\nfunction MenubarTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Trigger>) {\n  return (\n    <MenubarPrimitive.Trigger\n      data-slot=\"menubar-trigger\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex items-center rounded-sm px-2 py-1 text-sm font-medium outline-hidden select-none\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarContent({\n  className,\n  align = \"start\",\n  alignOffset = -4,\n  sideOffset = 8,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Content>) {\n  return (\n    <MenubarPortal>\n      <MenubarPrimitive.Content\n        data-slot=\"menubar-content\"\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[12rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-md\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPortal>\n  )\n}\n\nfunction MenubarItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Item> & {\n  inset?: boolean\n  variant?: \"default\" | \"destructive\"\n}) {\n  return (\n    <MenubarPrimitive.Item\n      data-slot=\"menubar-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.CheckboxItem>) {\n  return (\n    <MenubarPrimitive.CheckboxItem\n      data-slot=\"menubar-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <MenubarPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </MenubarPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </MenubarPrimitive.CheckboxItem>\n  )\n}\n\nfunction MenubarRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioItem>) {\n  return (\n    <MenubarPrimitive.RadioItem\n      data-slot=\"menubar-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <MenubarPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </MenubarPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </MenubarPrimitive.RadioItem>\n  )\n}\n\nfunction MenubarLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <MenubarPrimitive.Label\n      data-slot=\"menubar-label\"\n      data-inset={inset}\n      className={cn(\n        \"px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Separator>) {\n  return (\n    <MenubarPrimitive.Separator\n      data-slot=\"menubar-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"menubar-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nfunction MenubarSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <MenubarPrimitive.SubTrigger\n      data-slot=\"menubar-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-none select-none data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto h-4 w-4\" />\n    </MenubarPrimitive.SubTrigger>\n  )\n}\n\nfunction MenubarSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.SubContent>) {\n  return (\n    <MenubarPrimitive.SubContent\n      data-slot=\"menubar-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Menubar,\n  MenubarPortal,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarGroup,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarItem,\n  MenubarShortcut,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarSub,\n  MenubarSubTrigger,\n  MenubarSubContent,\n}\n","size_bytes":8394},"src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDownIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction NavigationMenu({\n  className,\n  children,\n  viewport = true,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Root> & {\n  viewport?: boolean\n}) {\n  return (\n    <NavigationMenuPrimitive.Root\n      data-slot=\"navigation-menu\"\n      data-viewport={viewport}\n      className={cn(\n        \"group/navigation-menu relative flex max-w-max flex-1 items-center justify-center\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      {viewport && <NavigationMenuViewport />}\n    </NavigationMenuPrimitive.Root>\n  )\n}\n\nfunction NavigationMenuList({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.List>) {\n  return (\n    <NavigationMenuPrimitive.List\n      data-slot=\"navigation-menu-list\"\n      className={cn(\n        \"group flex flex-1 list-none items-center justify-center gap-1\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Item>) {\n  return (\n    <NavigationMenuPrimitive.Item\n      data-slot=\"navigation-menu-item\"\n      className={cn(\"relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=open]:hover:bg-accent data-[state=open]:text-accent-foreground data-[state=open]:focus:bg-accent data-[state=open]:bg-accent/50 focus-visible:ring-ring/50 outline-none transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1\"\n)\n\nfunction NavigationMenuTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Trigger>) {\n  return (\n    <NavigationMenuPrimitive.Trigger\n      data-slot=\"navigation-menu-trigger\"\n      className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n      {...props}\n    >\n      {children}{\" \"}\n      <ChevronDownIcon\n        className=\"relative top-[1px] ml-1 size-3 transition duration-300 group-data-[state=open]:rotate-180\"\n        aria-hidden=\"true\"\n      />\n    </NavigationMenuPrimitive.Trigger>\n  )\n}\n\nfunction NavigationMenuContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Content>) {\n  return (\n    <NavigationMenuPrimitive.Content\n      data-slot=\"navigation-menu-content\"\n      className={cn(\n        \"data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 top-0 left-0 w-full p-2 pr-2.5 md:absolute md:w-auto\",\n        \"group-data-[viewport=false]/navigation-menu:bg-popover group-data-[viewport=false]/navigation-menu:text-popover-foreground group-data-[viewport=false]/navigation-menu:data-[state=open]:animate-in group-data-[viewport=false]/navigation-menu:data-[state=closed]:animate-out group-data-[viewport=false]/navigation-menu:data-[state=closed]:zoom-out-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:zoom-in-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:fade-in-0 group-data-[viewport=false]/navigation-menu:data-[state=closed]:fade-out-0 group-data-[viewport=false]/navigation-menu:top-full group-data-[viewport=false]/navigation-menu:mt-1.5 group-data-[viewport=false]/navigation-menu:overflow-hidden group-data-[viewport=false]/navigation-menu:rounded-md group-data-[viewport=false]/navigation-menu:border group-data-[viewport=false]/navigation-menu:shadow group-data-[viewport=false]/navigation-menu:duration-200 **:data-[slot=navigation-menu-link]:focus:ring-0 **:data-[slot=navigation-menu-link]:focus:outline-none\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuViewport({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Viewport>) {\n  return (\n    <div\n      className={cn(\n        \"absolute top-full left-0 isolate z-50 flex justify-center\"\n      )}\n    >\n      <NavigationMenuPrimitive.Viewport\n        data-slot=\"navigation-menu-viewport\"\n        className={cn(\n          \"origin-top-center bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border shadow md:w-[var(--radix-navigation-menu-viewport-width)]\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction NavigationMenuLink({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Link>) {\n  return (\n    <NavigationMenuPrimitive.Link\n      data-slot=\"navigation-menu-link\"\n      className={cn(\n        \"data-[active=true]:focus:bg-accent data-[active=true]:hover:bg-accent data-[active=true]:bg-accent/50 data-[active=true]:text-accent-foreground hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus-visible:ring-ring/50 [&_svg:not([class*='text-'])]:text-muted-foreground flex flex-col gap-1 rounded-sm p-2 text-sm transition-all outline-none focus-visible:ring-[3px] focus-visible:outline-1 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuIndicator({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Indicator>) {\n  return (\n    <NavigationMenuPrimitive.Indicator\n      data-slot=\"navigation-menu-indicator\"\n      className={cn(\n        \"data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"bg-border relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm shadow-md\" />\n    </NavigationMenuPrimitive.Indicator>\n  )\n}\n\nexport {\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n  navigationMenuTriggerStyle,\n}\n","size_bytes":6664},"src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  MoreHorizontalIcon,\n} from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button, buttonVariants } from \"@/components/ui/button\"\n\nfunction Pagination({ className, ...props }: React.ComponentProps<\"nav\">) {\n  return (\n    <nav\n      role=\"navigation\"\n      aria-label=\"pagination\"\n      data-slot=\"pagination\"\n      className={cn(\"mx-auto flex w-full justify-center\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationContent({\n  className,\n  ...props\n}: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"pagination-content\"\n      className={cn(\"flex flex-row items-center gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationItem({ ...props }: React.ComponentProps<\"li\">) {\n  return <li data-slot=\"pagination-item\" {...props} />\n}\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<React.ComponentProps<typeof Button>, \"size\"> &\n  React.ComponentProps<\"a\">\n\nfunction PaginationLink({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) {\n  return (\n    <a\n      aria-current={isActive ? \"page\" : undefined}\n      data-slot=\"pagination-link\"\n      data-active={isActive}\n      className={cn(\n        buttonVariants({\n          variant: isActive ? \"outline\" : \"ghost\",\n          size,\n        }),\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationPrevious({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) {\n  return (\n    <PaginationLink\n      aria-label=\"Go to previous page\"\n      size=\"default\"\n      className={cn(\"gap-1 px-2.5 sm:pl-2.5\", className)}\n      {...props}\n    >\n      <ChevronLeftIcon />\n      <span className=\"hidden sm:block\">Previous</span>\n    </PaginationLink>\n  )\n}\n\nfunction PaginationNext({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) {\n  return (\n    <PaginationLink\n      aria-label=\"Go to next page\"\n      size=\"default\"\n      className={cn(\"gap-1 px-2.5 sm:pr-2.5\", className)}\n      {...props}\n    >\n      <span className=\"hidden sm:block\">Next</span>\n      <ChevronRightIcon />\n    </PaginationLink>\n  )\n}\n\nfunction PaginationEllipsis({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      aria-hidden\n      data-slot=\"pagination-ellipsis\"\n      className={cn(\"flex size-9 items-center justify-center\", className)}\n      {...props}\n    >\n      <MoreHorizontalIcon className=\"size-4\" />\n      <span className=\"sr-only\">More pages</span>\n    </span>\n  )\n}\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n","size_bytes":2712},"src/components/ui/popover.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Popover({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) {\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />\n}\n\nfunction PopoverTrigger({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />\n}\n\nfunction PopoverContent({\n  className,\n  align = \"center\",\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Content>) {\n  return (\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content\n        data-slot=\"popover-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden\",\n          className\n        )}\n        {...props}\n      />\n    </PopoverPrimitive.Portal>\n  )\n}\n\nfunction PopoverAnchor({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />\n}\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","size_bytes":1635},"src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Progress({\n  className,\n  value,\n  ...props\n}: React.ComponentProps<typeof ProgressPrimitive.Root>) {\n  return (\n    <ProgressPrimitive.Root\n      data-slot=\"progress\"\n      className={cn(\n        \"relative h-3 w-full overflow-hidden rounded-full\",\n        \"border bg-white\",\n        className\n      )}\n      {...props}\n    >\n      <ProgressPrimitive.Indicator\n        data-slot=\"progress-indicator\"\n        className=\"bg-pink-400 h-full w-full flex-1 transition-all\"\n        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n      />\n    </ProgressPrimitive.Root>\n  )\n}\n\nexport { Progress }\n","size_bytes":754},"src/components/ui/radio-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { CircleIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction RadioGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {\n  return (\n    <RadioGroupPrimitive.Root\n      data-slot=\"radio-group\"\n      className={cn(\"grid gap-3\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction RadioGroupItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {\n  return (\n    <RadioGroupPrimitive.Item\n      data-slot=\"radio-group-item\"\n      className={cn(\n        \"border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 aspect-square size-4 shrink-0 rounded-full border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator\n        data-slot=\"radio-group-indicator\"\n        className=\"relative flex items-center justify-center\"\n      >\n        <CircleIcon className=\"fill-primary absolute top-1/2 left-1/2 size-2 -translate-x-1/2 -translate-y-1/2\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n}\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1466},"src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { GripVerticalIcon } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction ResizablePanelGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) {\n  return (\n    <ResizablePrimitive.PanelGroup\n      data-slot=\"resizable-panel-group\"\n      className={cn(\n        \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ResizablePanel({\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.Panel>) {\n  return <ResizablePrimitive.Panel data-slot=\"resizable-panel\" {...props} />\n}\n\nfunction ResizableHandle({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) {\n  return (\n    <ResizablePrimitive.PanelResizeHandle\n      data-slot=\"resizable-handle\"\n      className={cn(\n        \"bg-border focus-visible:ring-ring relative flex w-px items-center justify-center after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:ring-1 focus-visible:ring-offset-1 focus-visible:outline-hidden data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:translate-x-0 data-[panel-group-direction=vertical]:after:-translate-y-1/2 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n        className\n      )}\n      {...props}\n    >\n      {withHandle && (\n        <div className=\"bg-border z-10 flex h-4 w-3 items-center justify-center rounded-xs border\">\n          <GripVerticalIcon className=\"size-2.5\" />\n        </div>\n      )}\n    </ResizablePrimitive.PanelResizeHandle>\n  )\n}\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":2028},"src/components/ui/scroll-area.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction ScrollArea({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {\n  return (\n    <ScrollAreaPrimitive.Root\n      data-slot=\"scroll-area\"\n      className={cn(\"relative\", className)}\n      {...props}\n    >\n      <ScrollAreaPrimitive.Viewport\n        data-slot=\"scroll-area-viewport\"\n        className=\"focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1\"\n      >\n        {children}\n      </ScrollAreaPrimitive.Viewport>\n      <ScrollBar />\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  )\n}\n\nfunction ScrollBar({\n  className,\n  orientation = \"vertical\",\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {\n  return (\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\n      data-slot=\"scroll-area-scrollbar\"\n      orientation={orientation}\n      className={cn(\n        \"flex touch-none p-px transition-colors select-none\",\n        orientation === \"vertical\" &&\n          \"h-full w-2.5 border-l border-l-transparent\",\n        orientation === \"horizontal\" &&\n          \"h-2.5 flex-col border-t border-t-transparent\",\n        className\n      )}\n      {...props}\n    >\n      <ScrollAreaPrimitive.ScrollAreaThumb\n        data-slot=\"scroll-area-thumb\"\n        className=\"bg-border relative flex-1 rounded-full\"\n      />\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\n  )\n}\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1645},"src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}\n\nfunction SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}\n\nfunction SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}\n\nfunction SelectTrigger({\n  className,\n  size = \"default\",\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: \"sm\" | \"default\"\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = \"popper\",\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md\",\n          position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n          className\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            \"p-1\",\n            position === \"popper\" &&\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1\"\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn(\"bg-border pointer-events-none -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n}\n","size_bytes":6253},"src/components/ui/separator.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Separator({\n  className,\n  orientation = \"horizontal\",\n  decorative = true,\n  ...props\n}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {\n  return (\n    <SeparatorPrimitive.Root\n      data-slot=\"separator\"\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Separator }\n","size_bytes":699},"src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { XIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {\n  return <SheetPrimitive.Root data-slot=\"sheet\" {...props} />\n}\n\nfunction SheetTrigger({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {\n  return <SheetPrimitive.Trigger data-slot=\"sheet-trigger\" {...props} />\n}\n\nfunction SheetClose({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Close>) {\n  return <SheetPrimitive.Close data-slot=\"sheet-close\" {...props} />\n}\n\nfunction SheetPortal({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Portal>) {\n  return <SheetPrimitive.Portal data-slot=\"sheet-portal\" {...props} />\n}\n\nfunction SheetOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {\n  return (\n    <SheetPrimitive.Overlay\n      data-slot=\"sheet-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SheetContent({\n  className,\n  children,\n  side = \"right\",\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Content> & {\n  side?: \"top\" | \"right\" | \"bottom\" | \"left\"\n}) {\n  return (\n    <SheetPortal>\n      <SheetOverlay />\n      <SheetPrimitive.Content\n        data-slot=\"sheet-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n          side === \"right\" &&\n            \"data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm\",\n          side === \"left\" &&\n            \"data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm\",\n          side === \"top\" &&\n            \"data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b\",\n          side === \"bottom\" &&\n            \"data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <SheetPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none\">\n          <XIcon className=\"size-4\" />\n          <span className=\"sr-only\">Close</span>\n        </SheetPrimitive.Close>\n      </SheetPrimitive.Content>\n    </SheetPortal>\n  )\n}\n\nfunction SheetHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sheet-header\"\n      className={cn(\"flex flex-col gap-1.5 p-4\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sheet-footer\"\n      className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Title>) {\n  return (\n    <SheetPrimitive.Title\n      data-slot=\"sheet-title\"\n      className={cn(\"text-foreground font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Description>) {\n  return (\n    <SheetPrimitive.Description\n      data-slot=\"sheet-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sheet,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4090},"src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]\"\n            : \"group-data-[collapsible=icon]:w-(--sidebar-width-icon)\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]\"\n            : \"group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"size-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-(--skeleton-width) flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21633},"src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"skeleton\"\n      className={cn(\"bg-accent animate-pulse rounded-md\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":276},"src/components/ui/slider.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Slider({\n  className,\n  defaultValue,\n  value,\n  min = 0,\n  max = 100,\n  ...props\n}: React.ComponentProps<typeof SliderPrimitive.Root>) {\n  const _values = React.useMemo(\n    () =>\n      Array.isArray(value)\n        ? value\n        : Array.isArray(defaultValue)\n          ? defaultValue\n          : [min, max],\n    [value, defaultValue, min, max]\n  )\n\n  return (\n    <SliderPrimitive.Root\n      data-slot=\"slider\"\n      defaultValue={defaultValue}\n      value={value}\n      min={min}\n      max={max}\n      className={cn(\n        \"relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col\",\n        className\n      )}\n      {...props}\n    >\n      <SliderPrimitive.Track\n        data-slot=\"slider-track\"\n        className={cn(\n          \"bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5\"\n        )}\n      >\n        <SliderPrimitive.Range\n          data-slot=\"slider-range\"\n          className={cn(\n            \"bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full\"\n          )}\n        />\n      </SliderPrimitive.Track>\n      {Array.from({ length: _values.length }, (_, index) => (\n        <SliderPrimitive.Thumb\n          data-slot=\"slider-thumb\"\n          key={index}\n          className=\"border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50\"\n        />\n      ))}\n    </SliderPrimitive.Root>\n  )\n}\n\nexport { Slider }\n","size_bytes":2001},"src/components/ui/sonner.tsx":{"content":"\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, ToasterProps } from \"sonner\"\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      style={\n        {\n          \"--normal-bg\": \"var(--popover)\",\n          \"--normal-text\": \"var(--popover-foreground)\",\n          \"--normal-border\": \"var(--border)\",\n        } as React.CSSProperties\n      }\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","size_bytes":564},"src/components/ui/switch.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitive from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Switch({\n  className,\n  ...props\n}: React.ComponentProps<typeof SwitchPrimitive.Root>) {\n  return (\n    <SwitchPrimitive.Root\n      data-slot=\"switch\"\n      className={cn(\n        \"peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <SwitchPrimitive.Thumb\n        data-slot=\"switch-thumb\"\n        className={cn(\n          \"bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0\"\n        )}\n      />\n    </SwitchPrimitive.Root>\n  )\n}\n\nexport { Switch }\n","size_bytes":1177},"src/components/ui/table.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Table({ className, ...props }: React.ComponentProps<\"table\">) {\n  return (\n    <div\n      data-slot=\"table-container\"\n      className=\"relative w-full overflow-x-auto\"\n    >\n      <table\n        data-slot=\"table\"\n        className={cn(\"w-full caption-bottom text-sm\", className)}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction TableHeader({ className, ...props }: React.ComponentProps<\"thead\">) {\n  return (\n    <thead\n      data-slot=\"table-header\"\n      className={cn(\"[&_tr]:border-b\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableBody({ className, ...props }: React.ComponentProps<\"tbody\">) {\n  return (\n    <tbody\n      data-slot=\"table-body\"\n      className={cn(\"[&_tr:last-child]:border-0\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableFooter({ className, ...props }: React.ComponentProps<\"tfoot\">) {\n  return (\n    <tfoot\n      data-slot=\"table-footer\"\n      className={cn(\n        \"bg-muted/50 border-t font-medium [&>tr]:last:border-b-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableRow({ className, ...props }: React.ComponentProps<\"tr\">) {\n  return (\n    <tr\n      data-slot=\"table-row\"\n      className={cn(\n        \"hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableHead({ className, ...props }: React.ComponentProps<\"th\">) {\n  return (\n    <th\n      data-slot=\"table-head\"\n      className={cn(\n        \"text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCell({ className, ...props }: React.ComponentProps<\"td\">) {\n  return (\n    <td\n      data-slot=\"table-cell\"\n      className={cn(\n        \"p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCaption({\n  className,\n  ...props\n}: React.ComponentProps<\"caption\">) {\n  return (\n    <caption\n      data-slot=\"table-caption\"\n      className={cn(\"text-muted-foreground mt-4 text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2448},"src/components/ui/tabs.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn(\"flex flex-col gap-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  return (\n    <TabsPrimitive.List\n      data-slot=\"tabs-list\"\n      className={cn(\n        \"bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn(\"flex-1 outline-none\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1969},"src/components/ui/textarea.tsx":{"content":"import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Textarea({ className, ...props }: React.ComponentProps<\"textarea\">) {\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        \"border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border px-3 py-2 text-base transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        \"md:text-base bg-white\",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Textarea };\n","size_bytes":760},"src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nfunction ToggleGroup({\n  className,\n  variant,\n  size,\n  children,\n  ...props\n}: React.ComponentProps<typeof ToggleGroupPrimitive.Root> &\n  VariantProps<typeof toggleVariants>) {\n  return (\n    <ToggleGroupPrimitive.Root\n      data-slot=\"toggle-group\"\n      data-variant={variant}\n      data-size={size}\n      className={cn(\n        \"group/toggle-group flex w-fit items-center rounded-md data-[variant=outline]:shadow-xs\",\n        className\n      )}\n      {...props}\n    >\n      <ToggleGroupContext.Provider value={{ variant, size }}>\n        {children}\n      </ToggleGroupContext.Provider>\n    </ToggleGroupPrimitive.Root>\n  )\n}\n\nfunction ToggleGroupItem({\n  className,\n  children,\n  variant,\n  size,\n  ...props\n}: React.ComponentProps<typeof ToggleGroupPrimitive.Item> &\n  VariantProps<typeof toggleVariants>) {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      data-slot=\"toggle-group-item\"\n      data-variant={context.variant || variant}\n      data-size={context.size || size}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        \"min-w-0 flex-1 shrink-0 rounded-none shadow-none first:rounded-l-md last:rounded-r-md focus:z-10 focus-visible:z-10 data-[variant=outline]:border-l-0 data-[variant=outline]:first:border-l\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n}\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1925},"src/components/ui/toggle.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium hover:bg-muted hover:text-muted-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] outline-none transition-[color,box-shadow] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive whitespace-nowrap\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-xs hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Toggle({\n  className,\n  variant,\n  size,\n  ...props\n}: React.ComponentProps<typeof TogglePrimitive.Root> &\n  VariantProps<typeof toggleVariants>) {\n  return (\n    <TogglePrimitive.Root\n      data-slot=\"toggle\"\n      className={cn(toggleVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Toggle, toggleVariants }\n","size_bytes":1570},"src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction TooltipProvider({\n  delayDuration = 0,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return (\n    <TooltipPrimitive.Provider\n      data-slot=\"tooltip-provider\"\n      delayDuration={delayDuration}\n      {...props}\n    />\n  )\n}\n\nfunction Tooltip({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n    </TooltipProvider>\n  )\n}\n\nfunction TooltipTrigger({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 0,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content>) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <TooltipPrimitive.Arrow className=\"bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]\" />\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  )\n}\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1891},"src/modules/auth/constants.ts":{"content":"export const AUTH_COOKIE = \"payload-token\"","size_bytes":42},"src/modules/auth/schemas.ts":{"content":"import { z } from \"zod\";\r\n\r\nexport const loginSchema = z.object({\r\n  email: z.string().email(),\r\n  password: z.string(),\r\n});\r\n\r\nexport const registerSchema = z.object({\r\n  email: z.string().email(),\r\n  password: z.string(),\r\n  username: z\r\n    .string()\r\n    .min(3, \"Username must be at least 3 characters\")\r\n    .max(63, \"Username must be less than 63 characters\")\r\n    .regex(\r\n      /^[a-z0-9][a-z0-9-]*[a-z0-9]$/,\r\n      \"Username can only contain lowercase letters, numbers and hyphens. It must start and end with a letter or number\"\r\n    )\r\n    .refine(\r\n      (val) => !val.includes(\"--\"),\r\n      \"Username cannot contain consecutive hyphens\"\r\n    )\r\n    .transform((val) => val.toLowerCase()),\r\n});\r\n","size_bytes":710},"src/modules/categories/types.ts":{"content":"import { AppRouter } from \"@/trpc/routers/_app\";\r\nimport { inferRouterOutputs } from \"@trpc/server\";\r\n\r\nexport type CategoriesGetManyOutput =\r\n  inferRouterOutputs<AppRouter>[\"categories\"][\"getMany\"];\r\n","size_bytes":202},"src/modules/checkout/types.ts":{"content":"import Stripe from \"stripe\";\r\n\r\nexport type ProductMetadata = {\r\n  stripeAccountId: string;\r\n  id: string;\r\n  name: string;\r\n  price: number;\r\n};\r\n\r\nexport type ChecckoutMetadata = {\r\n  userId: string;\r\n};\r\n\r\nexport type ExpandListItem = Stripe.LineItem & {\r\n  price: Stripe.Price & {\r\n    product: Stripe.Product & {\r\n      metadata: ProductMetadata;\r\n    };\r\n  };\r\n};\r\n","size_bytes":371},"src/modules/home/constants.ts":{"content":"export const DEFAULT_BG_COLOR = \"#F5F5F5\"","size_bytes":41},"src/modules/products/search-params.ts":{"content":"import { createLoader, parseAsString, parseAsArrayOf, parseAsStringLiteral } from \"nuqs/server\";\r\n\r\nexport const sortValues = [\r\n  \"curated\",\r\n  \"trending\",\r\n  \"hot_and_new\",\r\n  \"price_asc\",\r\n  \"price_desc\",\r\n] as const;\r\n\r\nexport type SortType = typeof sortValues[number];\r\n\r\nexport const params = {\r\n  sort: parseAsStringLiteral(sortValues).withDefault(\"curated\"),  \r\n      minPrice: parseAsString.withOptions({\r\n      clearOnDefault: true,\r\n    })\r\n    .withDefault(\"\"),\r\n    maxPrice: parseAsString.withOptions({\r\n      clearOnDefault: true,\r\n    })\r\n    .withDefault(\"\"),\r\n    tags: parseAsArrayOf(parseAsString)\r\n    .withOptions({\r\n      clearOnDefault: true\r\n    })  \r\n    .withDefault([])\r\n}\r\n\r\nexport const loadProductFilters = createLoader(params)","size_bytes":758},"src/modules/products/types.ts":{"content":"import { AppRouter } from \"@/trpc/routers/_app\";\r\nimport { inferRouterOutputs } from \"@trpc/server\";\r\n\r\nexport type ProductsGetManyOutput = inferRouterOutputs<AppRouter>[\"products\"][\"getMany\"]","size_bytes":192},"src/modules/reviews/types.ts":{"content":"import { inferRouterOutputs } from '@trpc/server';\r\n\r\nimport type {AppRouter} from \"@/trpc/routers/_app\"\r\n\r\nexport type ReviewsGetOneOutput = inferRouterOutputs<AppRouter>[\"reviews\"][\"getOne\"]","size_bytes":192},"src/trpc/routers/_app.ts":{"content":"import { authRouter } from \"@/modules/auth/server/procedures\";\r\nimport { createTRPCRouter } from \"../init\";\r\nimport { categoriesRouter } from \"@/modules/categories/server/procedures\";\r\nimport { productsRouter } from './../../modules/products/server/procedures';\r\nimport { tagsRouter } from \"@/modules/tags/server/procedures\";\r\nimport { tenantsRouter } from \"@/modules/tenants/server/procedures\";\r\nimport { checkoutRouter } from \"@/modules/checkout/server/procedures\";\r\nimport { reviewsRouter } from \"@/modules/reviews/server/procedures\";\r\nimport { libraryRouter } from \"@/modules/library/server'/procedures\";\r\n\r\nexport const appRouter = createTRPCRouter({\r\n  categories: categoriesRouter,\r\n  auth: authRouter,\r\n  products: productsRouter,\r\n  tags: tagsRouter,\r\n  tenants: tenantsRouter,\r\n  checkout: checkoutRouter,\r\n  library: libraryRouter,\r\n  reviews: reviewsRouter\r\n});\r\n\r\nexport type AppRouter = typeof appRouter;\r\n","size_bytes":920},"src/app/(app)/(home)/layout.tsx":{"content":"import React, { Suspense } from \"react\";\r\nimport { Navbar } from \"../../../modules/home/ui/components/navbar\";\r\nimport { Footer } from \"../../../modules/home/ui/components/footer\";\r\nimport SearchFilters, { SearchFiltersSkeleton } from \"../../../modules/home/ui/components/search-filters\";\r\nimport { getQueryClient, trpc } from \"@/trpc/server\";\r\nimport { dehydrate, HydrationBoundary } from \"@tanstack/react-query\";\r\n\r\ninterface Props {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst Layout = async ({ children }: Props) => {\r\n  const queryClient = getQueryClient();\r\n  void queryClient.prefetchQuery(trpc.categories.getMany.queryOptions());\r\n\r\n  return (\r\n    <div className=\"flex flex-col min-h-screen \">\r\n      <Navbar />\r\n      <HydrationBoundary state={dehydrate(queryClient)}>\r\n        <Suspense fallback={<SearchFiltersSkeleton />}>\r\n          <SearchFilters />\r\n        </Suspense>\r\n      </HydrationBoundary>\r\n      <div className=\"flex-1 bg-[#f4f4f0]\">{children}</div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","size_bytes":1040},"src/app/(app)/(home)/page.tsx":{"content":"import { DEFAULT_LIMIT } from \"@/constants\";\r\nimport { loadProductFilters } from \"@/modules/products/search-params\";\r\nimport ProductListView from \"@/modules/products/ui/views/product-list-view\";\r\nimport { getQueryClient, trpc } from \"@/trpc/server\";\r\nimport { dehydrate, HydrationBoundary } from \"@tanstack/react-query\";\r\nimport { SearchParams } from \"nuqs\";\r\n\r\ninterface Props {\r\n  params: Promise<{\r\n    category: string\r\n  }>,\r\n  searchParams: Promise<SearchParams>\r\n}\r\n\r\nexport default async function Home({searchParams}: Props) {\r\n  const filters = await loadProductFilters(searchParams)\r\n\r\n  const queryClient = getQueryClient()\r\n  void queryClient.prefetchInfiniteQuery(trpc.products.getMany.infiniteQueryOptions({\r\n    ...filters,\r\n    limit: DEFAULT_LIMIT\r\n  }))\r\n\r\n  return (\r\n    <HydrationBoundary state={dehydrate(queryClient)}>\r\n      <ProductListView />\r\n    </HydrationBoundary>\r\n  );\r\n}\r\n","size_bytes":905},"src/app/(app)/(home)/types.ts":{"content":"import { Category } from \"@/payload-types\";\r\n\r\nexport type CustomCategory = Category & {\r\n  subcategories: Category[];\r\n};\r\n","size_bytes":124},"src/app/(payload)/admin/importMap.js":{"content":"import { TenantField as TenantField_1d0591e3cf4f332c83a86da13a0de59a } from '@payloadcms/plugin-multi-tenant/client'\nimport { TenantSelector as TenantSelector_1d0591e3cf4f332c83a86da13a0de59a } from '@payloadcms/plugin-multi-tenant/client'\nimport { TenantSelectionProvider as TenantSelectionProvider_d6d5f193a167989e2ee7d14202901e62 } from '@payloadcms/plugin-multi-tenant/rsc'\n\nexport const importMap = {\n  \"@payloadcms/plugin-multi-tenant/client#TenantField\": TenantField_1d0591e3cf4f332c83a86da13a0de59a,\n  \"@payloadcms/plugin-multi-tenant/client#TenantSelector\": TenantSelector_1d0591e3cf4f332c83a86da13a0de59a,\n  \"@payloadcms/plugin-multi-tenant/rsc#TenantSelectionProvider\": TenantSelectionProvider_d6d5f193a167989e2ee7d14202901e62\n}\n","size_bytes":740},"src/modules/auth/server/procedures.ts":{"content":"import { z } from \"zod\";\r\nimport { headers as getHeaders, cookies as getCookies } from \"next/headers\";\r\nimport { baseProcedure, createTRPCRouter } from \"@/trpc/init\";\r\nimport { TRPCError } from \"@trpc/server\";\r\nimport { AUTH_COOKIE } from \"../constants\";\r\nimport { registerSchema } from \"../schemas\";\r\nimport { generateAuthCookie } from \"@/lib/utils\";\r\n\r\nexport const authRouter = createTRPCRouter({\r\n  session: baseProcedure.query(async ({ ctx }) => {\r\n    const headers = await getHeaders();\r\n    const session = await ctx.db.auth({ headers });\r\n    console.log((session))\r\n    return session;\r\n  }),\r\n\r\n  logout: baseProcedure.mutation(async () => {\r\n    const cookies = await getCookies();\r\n    cookies.delete(AUTH_COOKIE);\r\n  }),\r\n\r\n  register: baseProcedure\r\n    .input(registerSchema)\r\n    .mutation(async ({ input, ctx }) => {\r\n      const existingData = await ctx.db.find({\r\n        collection: \"users\",\r\n        limit: 1,\r\n        where: {\r\n          username: {\r\n            equals: input.username\r\n          }\r\n        }\r\n      })\r\n\r\n      const existingUser = existingData.docs[0]\r\n\r\n      if(existingUser) {\r\n        throw new TRPCError({\r\n          code: \"BAD_REQUEST\",\r\n          message: \"Username already taken\"\r\n        })\r\n      }\r\n\r\n      const tenant = await ctx.db.create({\r\n        collection: \"tenants\",\r\n        data: {\r\n          name: input.username,\r\n          slug: input.username,\r\n          stripeAccountId: \"test\"\r\n        }\r\n      })\r\n\r\n      await ctx.db.create({\r\n        collection: \"users\",\r\n        data: {\r\n          email: input.email,\r\n          username: input.username,\r\n          password: input.password,\r\n          tenants: [\r\n            {\r\n              tenant: tenant.id\r\n            }\r\n          ]\r\n        },\r\n      });\r\n\r\n      const data = await ctx.db.login({\r\n        collection: \"users\",\r\n        data: {\r\n          email: input.email,\r\n          password: input.password,\r\n        },\r\n      });\r\n\r\n      if (!data.token) {\r\n        throw new TRPCError({\r\n          code: \"UNAUTHORIZED\",\r\n          message: \"Failed to register\",\r\n        });\r\n      }\r\n\r\n      await generateAuthCookie({\r\n        prefix: ctx.db.config.cookiePrefix,\r\n        value: data.token\r\n      })\r\n\r\n      return data;\r\n    }),\r\n\r\n  login: baseProcedure\r\n    .input(\r\n      z.object({\r\n        email: z.string().email(),\r\n        password: z.string(),\r\n      })\r\n    )\r\n    .mutation(async ({ input, ctx }) => {\r\n      const data = await ctx.db.login({\r\n        collection: \"users\",\r\n        data: {\r\n          email: input.email,\r\n          password: input.password,\r\n        },\r\n      });\r\n\r\n      if (!data.token) {\r\n        throw new TRPCError({\r\n          code: \"UNAUTHORIZED\",\r\n          message: \"Failed to login\",\r\n        });\r\n      }\r\n\r\n      await generateAuthCookie({\r\n        prefix: ctx.db.config.cookiePrefix,\r\n        value: data.token\r\n      })\r\n\r\n      return data;\r\n    }),\r\n});\r\n","size_bytes":2929},"src/modules/categories/server/procedures.ts":{"content":"import { baseProcedure, createTRPCRouter } from \"@/trpc/init\";\r\nimport { CustomCategory } from \"@/app/(app)/(home)/types\";\r\nimport { Category } from \"@/payload-types\";\r\n\r\nexport const categoriesRouter = createTRPCRouter({\r\n  getMany: baseProcedure.query(async ({ctx}) => {\r\n    const data = await ctx.db.find({\r\n      collection: \"categories\",\r\n      depth: 1,\r\n      pagination: false,\r\n      where: {\r\n        parent: {\r\n          exists: false,\r\n        },\r\n      },\r\n      sort: \"name\",\r\n    });\r\n\r\n    const formattedData: CustomCategory[] = data.docs.map((doc) => ({\r\n      ...doc,\r\n      subcategories: (doc.subcategories?.docs ?? []).map((doc) => ({\r\n        ...(doc as Category),\r\n      })),\r\n    }));\r\n    return formattedData;\r\n  }),\r\n});\r\n","size_bytes":751},"src/modules/checkout/hooks/use-cart.ts":{"content":"import { useCallback } from \"react\";\r\nimport {useShallow} from \"zustand/react/shallow\"\r\nimport { useCartStore } from \"../store/use-cart-toast\";\r\n\r\nexport const useCart = (tenantSlug: string) => {\r\n  const addProduct = useCartStore((state) => state.addProduct)\r\n  const removeProduct = useCartStore((state) => state.removeProduct)\r\n  const clearCart = useCartStore((state) => state.clearCart)\r\n  const clearAllCarts = useCartStore((state) => state.clearAllCarts)\r\n\r\n  const productIds = useCartStore(useShallow((state) => state.tenantCarts[tenantSlug]?.productIds || []));\r\n\r\n  const toggleProduct = useCallback((productId: string) => {\r\n    if (productIds.includes(productId)) {\r\n      removeProduct(tenantSlug, productId);\r\n    } else {\r\n      addProduct(tenantSlug, productId);\r\n    }\r\n  }, [addProduct, removeProduct, productIds, tenantSlug]);\r\n\r\n  const isProductInCart = (productId: string) => {\r\n    return productIds.includes(productId);\r\n  };\r\n\r\n  const clearTenantCart = useCallback(() => {\r\n    clearCart(tenantSlug);\r\n  }, [tenantSlug, clearCart]);\r\n\r\n  const handleAddProduct = useCallback((productId: string) => {\r\n    addProduct(tenantSlug, productId)\r\n  }, [])\r\n\r\n  const handleRemoveProduct = useCallback((productId: string) => {\r\n    removeProduct(tenantSlug, productId)\r\n  }, [])\r\n\r\n  return {\r\n    productIds,\r\n    addProduct: handleAddProduct,\r\n    removeproduct: handleRemoveProduct,\r\n    clearCart: clearTenantCart,\r\n    clearAllCarts,\r\n    toggleProduct,\r\n    isProductInCart,\r\n    totalItems: productIds.length,\r\n  };\r\n};\r\n","size_bytes":1547},"src/modules/checkout/hooks/use-checkout-states.ts":{"content":"import { parseAsBoolean, useQueryStates } from \"nuqs\";\r\n\r\nexport const useCheckoutStates = () => {\r\n  return useQueryStates({\r\n    success: parseAsBoolean.withDefault(false).withOptions({\r\n      clearOnDefault: true,\r\n    }),\r\n    cancel: parseAsBoolean.withDefault(false).withOptions({\r\n      clearOnDefault: true,\r\n    }),\r\n  });\r\n};\r\n","size_bytes":337},"src/modules/checkout/server/procedures.ts":{"content":"import {\r\n  baseProcedure,\r\n  createTRPCRouter,\r\n  protectedProcedure,\r\n} from \"@/trpc/init\";\r\nimport { Media, Tenant } from \"@/payload-types\";\r\nimport { z } from \"zod\";\r\nimport { TRPCError } from \"@trpc/server\";\r\nimport Stripe from \"stripe\";\r\nimport { ChecckoutMetadata, ProductMetadata } from \"../types\";\r\nimport { stripe } from \"@/lib/stripe\";\r\n\r\nexport const checkoutRouter = createTRPCRouter({\r\n  purchase: protectedProcedure\r\n    .input(\r\n      z.object({\r\n        productIds: z.array(z.string()).min(1),\r\n        tenantSlug: z.string().min(1),\r\n      })\r\n    )\r\n    .mutation(async ({ ctx, input }) => {\r\n      const products = await ctx.db.find({\r\n        collection: \"products\",\r\n        depth: 2,\r\n        where: {\r\n          and: [\r\n            {\r\n              id: {\r\n                in: input.productIds,\r\n              },\r\n            },\r\n            {\r\n              \"tenant.slug\": {\r\n                equals: input.tenantSlug,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      });\r\n\r\n      if (products.totalDocs !== input.productIds.length) {\r\n        throw new TRPCError({\r\n          code: \"NOT_FOUND\",\r\n          message: \"Products not found\",\r\n        });\r\n      }\r\n\r\n      const tenantsData = await ctx.db.find({\r\n        collection: \"tenants\",\r\n        limit: 1,\r\n        pagination: false,\r\n        where: {\r\n          slug: {\r\n            equals: input.tenantSlug,\r\n          },\r\n        },\r\n      });\r\n\r\n      const tenant = tenantsData.docs[0];\r\n\r\n      if (!tenant) {\r\n        throw new TRPCError({\r\n          code: \"NOT_FOUND\",\r\n          message: \"Tenant not found\",\r\n        });\r\n      }\r\n\r\n      const lineItems: Stripe.Checkout.SessionCreateParams.LineItem[] =\r\n        products.docs.map((product) => ({\r\n          quantity: 1,\r\n          price_data: {\r\n            unit_amount: product.price * 100,\r\n            currency: \"usd\",\r\n            product_data: {\r\n              name: product.name,\r\n              metadata: {\r\n                stripeAccountId: tenant.stripeAccountId,\r\n                id: product.id,\r\n                name: product.name,\r\n                price: product.price,\r\n              } as ProductMetadata,\r\n            },\r\n          },\r\n        }));\r\n\r\n      const checkout = await stripe.checkout.sessions.create({\r\n        customer_email: ctx.session.user.email,\r\n        mode: \"payment\",\r\n        payment_method_types: [\"card\"],\r\n        line_items: lineItems,\r\n        success_url: `${process.env.NEXT_PUBLIC_APP_URL}/tenants/${input.tenantSlug}/checkout?success=true`,\r\n        cancel_url: `${process.env.NEXT_PUBLIC_APP_URL}/tenants/${input.tenantSlug}/checkout?cancel=true`,\r\n        invoice_creation: {\r\n          enabled: true,\r\n        },\r\n        metadata: {\r\n          tenantId: tenant.id,\r\n          userId: ctx.session.user.id,\r\n        } as ChecckoutMetadata,\r\n      });\r\n\r\n      if (!checkout.url) {\r\n        throw new TRPCError({\r\n          code: \"INTERNAL_SERVER_ERROR\",\r\n          message: \"Failed to create checkout session\",\r\n        });\r\n      }\r\n\r\n      return { url: checkout.url };\r\n    }),\r\n\r\n  getProducts: baseProcedure\r\n    .input(\r\n      z.object({\r\n        ids: z.array(z.string()),\r\n      })\r\n    )\r\n    .query(async ({ ctx, input }) => {\r\n      const data = await ctx.db.find({\r\n        collection: \"products\",\r\n        depth: 2,\r\n        where: {\r\n          id: {\r\n            in: input.ids,\r\n          },\r\n        },\r\n      });\r\n\r\n      if (data.totalDocs !== input.ids.length) {\r\n        throw new TRPCError({\r\n          code: \"NOT_FOUND\",\r\n          message: \"Products not found\",\r\n        });\r\n      }\r\n\r\n      const totalPrice = data.docs.reduce((acc, product) => {\r\n        const price = Number(product.price);\r\n        return acc + (isNaN(price) ? 0 : price);\r\n      }, 0);\r\n\r\n      return {\r\n        ...data,\r\n        totalPrice,\r\n        docs: data.docs.map((doc) => ({\r\n          ...doc,\r\n          image: doc.image as Media | null,\r\n          tenant: doc.tenant as Tenant & { image: Media | null },\r\n        })),\r\n      };\r\n    }),\r\n});\r\n","size_bytes":4050},"src/modules/checkout/store/use-cart-toast.ts":{"content":"import { create } from \"zustand\";\r\nimport { persist, createJSONStorage } from \"zustand/middleware\";\r\n\r\ninterface TenantCart {\r\n  productIds: string[];\r\n}\r\n\r\ninterface CartState {\r\n  tenantCarts: Record<string, TenantCart>;\r\n  addProduct: (tenantSlug: string, productId: string) => void;\r\n  removeProduct: (tenantSlug: string, productId: string) => void;\r\n  clearCart: (tenantSlug: string) => void;\r\n  clearAllCarts: () => void;\r\n  getCartByTenant: (tenantSlug: string) => string[];\r\n}\r\n\r\nexport const useCartStore = create<CartState>()(\r\n  persist(\r\n    (set, get) => ({\r\n      tenantCarts: {},\r\n\r\n      addProduct: (tenantSlug, productId) =>\r\n        set((state) => ({\r\n          tenantCarts: {\r\n            ...state.tenantCarts,\r\n            [tenantSlug]: {\r\n              productIds: [\r\n                ...(state.tenantCarts[tenantSlug]?.productIds || []),\r\n                productId,\r\n              ],\r\n            },\r\n          },\r\n        })),\r\n\r\n      removeProduct: (tenantSlug, productId) =>\r\n        set((state) => ({\r\n          tenantCarts: {\r\n            ...state.tenantCarts,\r\n            [tenantSlug]: {\r\n              productIds:\r\n                state.tenantCarts[tenantSlug]?.productIds.filter(\r\n                  (id) => id !== productId\r\n                ) || [],\r\n            },\r\n          },\r\n        })),\r\n\r\n      clearCart: (tenantSlug) =>\r\n        set((state) => ({\r\n          tenantCarts: {\r\n            ...state.tenantCarts,\r\n            [tenantSlug]: { productIds: [] },\r\n          },\r\n        })),\r\n\r\n      clearAllCarts: () =>\r\n        set(() => ({\r\n          tenantCarts: {},\r\n        })),\r\n\r\n      getCartByTenant: (tenantSlug) =>\r\n        get().tenantCarts[tenantSlug]?.productIds || [],\r\n    }),\r\n    {\r\n      name: \"funroad-cart\",\r\n      storage: createJSONStorage(() => window.localStorage),\r\n    }\r\n  )\r\n);\r\n","size_bytes":1843},"src/modules/library/server'/procedures.ts":{"content":"import z from \"zod\";\r\nimport { createTRPCRouter, protectedProcedure } from \"@/trpc/init\";\r\nimport { Media, Tenant } from \"@/payload-types\";\r\nimport { DEFAULT_LIMIT } from \"@/constants\";\r\nimport { TRPCError } from \"@trpc/server\";\r\n\r\nexport const libraryRouter = createTRPCRouter({\r\n  getOne: protectedProcedure\r\n    .input(\r\n      z.object({\r\n        productId: z.string(),\r\n      })\r\n    )\r\n    .query(async ({ ctx, input }) => {\r\n      const ordersData = await ctx.db.find({\r\n        collection: \"orders\",\r\n        limit: 1,\r\n        pagination: false,\r\n        where: {\r\n          and: [\r\n            {\r\n              product: {\r\n                equals: input.productId,\r\n              },\r\n            },\r\n            {\r\n              user: {\r\n                equals: ctx.session.user.id,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      });\r\n\r\n      const order = ordersData.docs[0];\r\n\r\n      if (!order) {\r\n        throw new TRPCError({\r\n          code: \"NOT_FOUND\",\r\n          message: \"Order not found\",\r\n        });\r\n      }\r\n\r\n      const product = await ctx.db.findByID({\r\n        collection: \"products\",\r\n        id: input.productId,\r\n      });\r\n\r\n      if(!product) {\r\n        throw new TRPCError({\r\n          code: \"NOT_FOUND\",\r\n          message: \"Product not found\"\r\n        })\r\n      }\r\n\r\n      return product;\r\n    }),\r\n    getMany: protectedProcedure\r\n    .input(\r\n      z.object({\r\n        cursor: z.number().default(1),\r\n        limit: z.number().default(DEFAULT_LIMIT),\r\n      })\r\n    )\r\n    .query(async ({ ctx, input }) => {\r\n      const ordersData = await ctx.db.find({\r\n        collection: \"orders\",\r\n        depth: 0,\r\n        page: input.cursor,\r\n        limit: input.limit,\r\n        where: {\r\n          user: {\r\n            equals: ctx.session.user.id,\r\n          },\r\n        },\r\n      });\r\n\r\n      const productIds = ordersData.docs.map((order) => order.product);\r\n\r\n      const productsData = await ctx.db.find({\r\n        collection: \"products\",\r\n        pagination: false,\r\n        where: {\r\n          id: {\r\n            in: productIds,\r\n          },\r\n        },\r\n      });\r\n\r\n      const dataWithSummarizedReviews = await Promise.all(\r\n        productsData.docs.map(async (doc) => {\r\n          const reviewsData = await ctx.db.find({\r\n            collection: \"reviews\",\r\n            pagination: false,\r\n            where: { product: { equals: doc.id } },\r\n          });\r\n\r\n          const reviewCount = reviewsData.totalDocs;\r\n          const reviewRating =\r\n            reviewCount > 0\r\n              ? reviewsData.docs.reduce(\r\n                  (acc, review) => acc + review.rating,\r\n                  0\r\n                ) / reviewCount\r\n              : 0;\r\n\r\n          return {\r\n            ...doc,\r\n            reviewCount,\r\n            reviewRating,\r\n          };\r\n        })\r\n      );\r\n\r\n      return {\r\n        ...productsData,\r\n        docs: dataWithSummarizedReviews.map((doc) => ({\r\n          ...doc,\r\n          image: doc.image as Media | null,\r\n          tenant: doc.tenant as Tenant & { image: Media | null },\r\n        })),\r\n      };\r\n    }),\r\n});\r\n","size_bytes":3112},"src/modules/products/hooks/use-product-filters.ts":{"content":"import { useQueryStates, parseAsString, parseAsArrayOf, parseAsStringLiteral } from \"nuqs\";\r\n\r\nexport const sortValues = [\r\n  \"curated\",\r\n  \"trending\",\r\n  \"hot_and_new\",\r\n  \"price_asc\",\r\n  \"price_desc\",\r\n] as const;\r\n\r\nexport type SortType = typeof sortValues[number];\r\n\r\nconst params = {\r\n  sort: parseAsStringLiteral(sortValues).withDefault(\"curated\"),\r\n    minPrice: parseAsString.withOptions({\r\n      clearOnDefault: true,\r\n    })\r\n    .withDefault(\"\"),\r\n    maxPrice: parseAsString.withOptions({\r\n      clearOnDefault: true,\r\n    })\r\n    .withDefault(\"\"),\r\n    tags: parseAsArrayOf(parseAsString)\r\n    .withOptions({\r\n      clearOnDefault: true\r\n    })\r\n    .withDefault([])\r\n}\r\n\r\nexport const useProductFilters = () => {\r\n  return useQueryStates(params);\r\n};","size_bytes":764},"src/modules/products/server/procedures.ts":{"content":"import z from \"zod\";\r\nimport { headers as getHeaders } from \"next/headers\";\r\nimport { baseProcedure, createTRPCRouter } from \"@/trpc/init\";\r\nimport { Sort, Where } from \"payload\";\r\nimport { CustomCategory } from \"@/app/(app)/(home)/types\";\r\nimport { Category, Media, Tenant } from \"@/payload-types\";\r\nimport { sortValues } from \"../search-params\";\r\nimport { DEFAULT_LIMIT } from \"@/constants\";\r\n\r\nfunction mapSort(input?: string | null): Sort {\r\n  switch (input) {\r\n    case \"price_asc\":\r\n      return \"price\";\r\n    case \"price_desc\":\r\n      return \"-price\";\r\n    case \"curated\":\r\n      return \"-createdAt\";\r\n    case \"trending\":\r\n      return \"price\";\r\n    case \"hot_and_new\":\r\n      return \"-createdAt\";\r\n    default:\r\n      return \"-createdAt\";\r\n  }\r\n}\r\n\r\nexport const productsRouter = createTRPCRouter({\r\n  getOne: baseProcedure\r\n    .input(\r\n      z.object({\r\n        id: z.string(), // always require a string id\r\n      })\r\n    )\r\n    .query(async ({ ctx, input }) => {\r\n      const headers = await getHeaders();\r\n      const session = await ctx.db.auth({ headers });\r\n\r\n      const product = await ctx.db.findByID({\r\n        collection: \"products\",\r\n        id: input.id,\r\n        depth: 2,\r\n      });\r\n\r\n      let isPurchased = false;\r\n\r\n      if (session?.user) {\r\n        const ordersData = await ctx.db.find({\r\n          collection: \"orders\",\r\n          pagination: false,\r\n          limit: 1,\r\n          where: {\r\n            and: [\r\n              { product: { equals: input.id } },\r\n              { user: { equals: session.user.id } },\r\n            ],\r\n          },\r\n        });\r\n\r\n        isPurchased = ordersData.docs.length > 0;\r\n      }\r\n\r\n      const reviews = await ctx.db.find({\r\n        collection: \"reviews\",\r\n        pagination: false,\r\n        where: {\r\n          product: { equals: input.id },\r\n        },\r\n      });\r\n\r\n      const reviewCount = reviews.totalDocs;\r\n      const reviewRating =\r\n        reviewCount > 0\r\n          ? reviews.docs.reduce((acc, review) => acc + review.rating, 0) /\r\n            reviewCount\r\n          : 0;\r\n\r\n      const ratingDistribution: Record<number, number> = {\r\n        5: 0,\r\n        4: 0,\r\n        3: 0,\r\n        2: 0,\r\n        1: 0,\r\n      };\r\n\r\n      if (reviewCount > 0) {\r\n        reviews.docs.forEach((review) => {\r\n          const rating = review.rating;\r\n          if (rating >= 1 && rating <= 5) {\r\n            ratingDistribution[rating] =\r\n              (ratingDistribution[rating] || 0) + 1;\r\n          }\r\n        });\r\n\r\n        Object.keys(ratingDistribution).forEach((key) => {\r\n          const rating = Number(key);\r\n          const count = ratingDistribution[rating] || 0;\r\n          ratingDistribution[rating] = Math.round(\r\n            (count / reviewCount) * 100\r\n          );\r\n        });\r\n      }\r\n\r\n      return {\r\n        ...product,\r\n        isPurchased,\r\n        image: product.image as Media | null,\r\n        cover: product.cover as Media | null,\r\n        tenant: product.tenant as Tenant & { image: Media | null },\r\n        reviewRating,\r\n        reviewCount,\r\n        ratingDistribution,\r\n      };\r\n    }),\r\n\r\n  getMany: baseProcedure\r\n    .input(\r\n      z.object({\r\n        cursor: z.number().default(1),\r\n        limit: z.number().default(DEFAULT_LIMIT),\r\n        category: z.string().nullable().optional(),\r\n        minPrice: z.string().nullable().optional(),\r\n        maxPrice: z.string().nullable().optional(),\r\n        tags: z.array(z.string()).nullable().optional(),\r\n        sort: z.enum(sortValues).nullable().optional(),\r\n        tenantSlug: z.string().nullable().optional(),\r\n      })\r\n    )\r\n    .query(async ({ ctx, input }) => {\r\n      const where: Where = {};\r\n      const sort: Sort = mapSort(input.sort);\r\n\r\n      if (input.minPrice || input.maxPrice) {\r\n        where.price = {};\r\n        if (input.minPrice) {\r\n          where.price.greater_than_equal = Number(input.minPrice);\r\n        }\r\n        if (input.maxPrice) {\r\n          where.price.less_than_equal = Number(input.maxPrice);\r\n        }\r\n      }\r\n\r\n      if (input.tenantSlug) {\r\n        where[\"tenant.slug\"] = { equals: input.tenantSlug };\r\n      }\r\n\r\n      if (input.category) {\r\n        const categoriesData = await ctx.db.find({\r\n          collection: \"categories\",\r\n          depth: 1,\r\n          limit: 1,\r\n          pagination: false,\r\n          where: { slug: { equals: input.category } },\r\n        });\r\n\r\n        const formattedData: CustomCategory[] = categoriesData.docs.map(\r\n          (doc) => ({\r\n            ...doc,\r\n            subcategories: (doc.subcategories?.docs ?? []).map((doc) => ({\r\n              ...(doc as Category),\r\n              subcategories: undefined,\r\n            })),\r\n          })\r\n        );\r\n\r\n        const subcategoriesSlugs: string[] = [];\r\n        const parentCategory = formattedData[0];\r\n\r\n        if (parentCategory) {\r\n          subcategoriesSlugs.push(\r\n            ...parentCategory.subcategories.map(\r\n              (subcategory) => subcategory.slug\r\n            )\r\n          );\r\n\r\n          where[\"category.slug\"] = {\r\n            in: [parentCategory.slug, ...subcategoriesSlugs],\r\n          };\r\n        }\r\n      }\r\n\r\n      if (input.tags && input.tags.length > 0) {\r\n        where[\"tags.name\"] = { in: input.tags };\r\n      }\r\n\r\n      if (input.sort === \"hot_and_new\") {\r\n        const thirtyDaysAgo = new Date();\r\n        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\r\n\r\n        where.createdAt = {\r\n          greater_than_equal: thirtyDaysAgo.toISOString(),\r\n        };\r\n      }\r\n\r\n      const data = await ctx.db.find({\r\n        collection: \"products\",\r\n        depth: 2,\r\n        where,\r\n        sort,\r\n        page: input.cursor,\r\n        limit: input.limit,\r\n      });\r\n\r\n      const dataWithSummarizedReviews = await Promise.all(\r\n        data.docs.map(async (doc) => {\r\n          const reviewsData = await ctx.db.find({\r\n            collection: \"reviews\",\r\n            pagination: false,\r\n            where: { product: { equals: doc.id } },\r\n          });\r\n\r\n          const reviewCount = reviewsData.totalDocs;\r\n          const reviewRating =\r\n            reviewCount > 0\r\n              ? reviewsData.docs.reduce(\r\n                  (acc, review) => acc + review.rating,\r\n                  0\r\n                ) / reviewCount\r\n              : 0;\r\n\r\n          return {\r\n            ...doc,\r\n            reviewCount,\r\n            reviewRating,\r\n          };\r\n        })\r\n      );\r\n\r\n      return {\r\n        ...data,\r\n        docs: dataWithSummarizedReviews.map((doc) => ({\r\n          ...doc,\r\n          image: doc.image as Media | null,\r\n          tenant: doc.tenant as Tenant & { image: Media | null },\r\n        })),\r\n      };\r\n    }),\r\n});\r\n","size_bytes":6673},"src/modules/reviews/server/procedures.ts":{"content":"import z from \"zod\";\r\nimport { createTRPCRouter, protectedProcedure } from \"@/trpc/init\";\r\nimport { TRPCError } from \"@trpc/server\";\r\n\r\nexport const reviewsRouter = createTRPCRouter({\r\n  // Get a single review by the current user for a product\r\n  getOne: protectedProcedure\r\n    .input(\r\n      z.object({\r\n        productId: z.string(),\r\n      })\r\n    )\r\n    .query(async ({ ctx, input }) => {\r\n      const product = await ctx.db.findByID({\r\n        collection: \"products\",\r\n        id: input.productId,\r\n      });\r\n\r\n      if (!product) {\r\n        throw new TRPCError({\r\n          code: \"NOT_FOUND\",\r\n          message: \"Product not found\",\r\n        });\r\n      }\r\n\r\n      const reviewsData = await ctx.db.find({\r\n        collection: \"reviews\",\r\n        limit: 1,\r\n        pagination: false,\r\n        where: {\r\n          and: [\r\n            { product: { equals: input.productId } },\r\n            { user: { equals: ctx.session.user.id } },\r\n          ],\r\n        },\r\n      });\r\n\r\n      return reviewsData.docs[0] ?? null;\r\n    }),\r\n\r\n  create: protectedProcedure\r\n    .input(\r\n      z.object({\r\n        productId: z.string(),\r\n        rating: z\r\n          .number()\r\n          .min(1, { message: \"Rating is required\" })\r\n          .max(5, { message: \"Rating must be between 1 and 5\" }),\r\n        description: z.string().min(1, { message: \"Description is required\" }),\r\n      })\r\n    )\r\n    .mutation(async ({ input, ctx }) => {\r\n      const product = await ctx.db.findByID({\r\n        collection: \"products\",\r\n        id: input.productId,\r\n      });\r\n\r\n      if (!product) {\r\n        throw new TRPCError({\r\n          code: \"NOT_FOUND\",\r\n          message: \"Product not found\",\r\n        });\r\n      }\r\n\r\n      // ✅ First check if user already reviewed\r\n      const existingReviewsData = await ctx.db.find({\r\n        collection: \"reviews\",\r\n        limit: 1,\r\n        pagination: false,\r\n        where: {\r\n          and: [\r\n            { product: { equals: input.productId } },\r\n            { user: { equals: ctx.session.user.id } },\r\n          ],\r\n        },\r\n      });\r\n\r\n      if (existingReviewsData.totalDocs > 0) {\r\n        throw new TRPCError({\r\n          code: \"CONFLICT\",\r\n          message: \"You have already reviewed this product\",\r\n        });\r\n      }\r\n\r\n      // ✅ Create new review\r\n      const review = await ctx.db.create({\r\n        collection: \"reviews\",\r\n        data: {\r\n          user: ctx.session.user.id,\r\n          product: product.id,\r\n          rating: input.rating,\r\n          description: input.description,\r\n        },\r\n      });\r\n\r\n      return review;\r\n    }),\r\n    update: protectedProcedure\r\n    .input(\r\n      z.object({\r\n        reviewId: z.string(),\r\n        rating: z\r\n          .number()\r\n          .min(1, { message: \"Rating is required\" })\r\n          .max(5, { message: \"Rating must be between 1 and 5\" }),\r\n        description: z.string().min(1, { message: \"Description is required\" }),\r\n      })\r\n    )\r\n    .mutation(async ({ input, ctx }) => {\r\n      const existingReview = await ctx.db.findByID({\r\n        depth: 0,\r\n        collection: \"reviews\",\r\n        id: input.reviewId\r\n      });\r\n\r\n      if (!existingReview) {\r\n        throw new TRPCError({\r\n          code: \"NOT_FOUND\",\r\n          message: \"Product not found\",\r\n        });\r\n      }\r\n\r\n      if(existingReview.user !==  ctx.session.user.id) {\r\n        throw new TRPCError({\r\n          code: \"FORBIDDEN\",\r\n          message: \"Your are not allowed to update this product\"\r\n        })\r\n      }\r\n\r\n      const updateReview = await ctx.db.update({\r\n        collection: \"reviews\",\r\n        id: input.reviewId,\r\n        data: {\r\n          rating: input.rating,\r\n          description: input.description,\r\n        },\r\n      });\r\n\r\n      return updateReview;\r\n    }),\r\n});\r\n","size_bytes":3769},"src/modules/tags/server/procedures.ts":{"content":"import z from \"zod\";\r\nimport { baseProcedure, createTRPCRouter } from \"@/trpc/init\";\r\nimport { DEFAULT_LIMIT } from \"@/constants\";\r\n\r\nexport const tagsRouter = createTRPCRouter({\r\n  getMany: baseProcedure\r\n    .input(\r\n      z.object({\r\n        cursor: z.number().default(1),\r\n        limit: z.number().default(DEFAULT_LIMIT),\r\n      })\r\n    )\r\n\r\n    .query(async ({ ctx, input }) => {\r\n      const data = await ctx.db.find({\r\n        collection: \"tags\",\r\n        page: input.cursor,\r\n        limit: input.limit,\r\n      });\r\n\r\n      return data;\r\n    }),\r\n});\r\n","size_bytes":561},"src/modules/tenants/server/procedures.ts":{"content":"import z from \"zod\";\r\nimport { baseProcedure, createTRPCRouter } from \"@/trpc/init\";\r\nimport { TRPCError } from \"@trpc/server\";\r\nimport { Media, Tenant } from \"@/payload-types\";\r\n\r\nexport const tenantsRouter = createTRPCRouter({\r\n  getOne: baseProcedure\r\n    .input(\r\n      z.object({\r\n        slug: z.string(),\r\n      })\r\n    )\r\n\r\n    .query(async ({ ctx, input }) => {\r\n      const tenantsData = await ctx.db.find({\r\n        collection: \"tenants\",\r\n        depth: 1,\r\n        where: {\r\n          slug: {\r\n            equals: input.slug,\r\n          },\r\n        },\r\n        limit: 1,\r\n        pagination: false\r\n      });\r\n\r\n      const tenant = tenantsData.docs[0];\r\n\r\n      if (!tenant) {\r\n        throw new TRPCError({ code: \"NOT_FOUND\", message: \"Tenant not found\" });\r\n      }\r\n\r\n      return tenant as Tenant & {image: Media | null};\r\n    }),\r\n});\r\n","size_bytes":855},"src/app/(app)/(auth)/sign-in/page.tsx":{"content":"import { SignInView } from '@/modules/auth/ui/views/sign-in-view'\r\nimport { caller } from '@/trpc/server'\r\nimport { redirect } from 'next/navigation'\r\nimport React from 'react'\r\n\r\nconst SignIn = async() => {\r\n  const session = await caller.auth.session()\r\n\r\n  if(session?.user) {\r\n    redirect(\"/\")\r\n  }\r\n  \r\n  return (\r\n    <SignInView />\r\n  )\r\n}\r\n\r\nexport default SignIn\r\n","size_bytes":374},"src/app/(app)/(auth)/sign-up/page.tsx":{"content":"import { SignUpView } from '@/modules/auth/ui/views/sign-up-view'\r\nimport { caller } from '@/trpc/server'\r\nimport { redirect } from 'next/navigation'\r\nimport React from 'react'\r\n\r\nconst SignUp = async() => {\r\n  const session = await caller.auth.session()\r\n\r\n  if(session?.user) {\r\n    redirect(\"/\")\r\n  }\r\n  return (\r\n      <SignUpView />\r\n  )\r\n}\r\n\r\nexport default SignUp\r\n","size_bytes":372},"src/app/(app)/(home)/[category]/page.tsx":{"content":"import type { SearchParams } from \"nuqs/server\";\r\nimport { getQueryClient, trpc } from \"@/trpc/server\";\r\nimport { dehydrate, HydrationBoundary } from \"@tanstack/react-query\";\r\nimport React from \"react\";\r\nimport { loadProductFilters } from \"@/modules/products/search-params\";\r\nimport ProductListView from \"@/modules/products/ui/views/product-list-view\";\r\nimport { DEFAULT_LIMIT } from \"@/constants\";\r\n\r\ninterface Props {\r\n  params: Promise<{\r\n    category: string;\r\n  }>;\r\n  searchParams: Promise<SearchParams>;\r\n}\r\n\r\nconst CategoryPage = async ({ params, searchParams }: Props) => {\r\n  const { category } = await params;\r\n  const filters = await loadProductFilters(searchParams);\r\n\r\n  const queryClient = getQueryClient();\r\n  void queryClient.prefetchInfiniteQuery(\r\n    trpc.products.getMany.infiniteQueryOptions({\r\n      category,\r\n      ...filters,\r\n      limit: DEFAULT_LIMIT\r\n    })\r\n  );\r\n\r\n  return (\r\n    <HydrationBoundary state={dehydrate(queryClient)}>\r\n      <ProductListView category={category} />\r\n    </HydrationBoundary>\r\n  );\r\n};\r\n\r\nexport default CategoryPage;\r\n","size_bytes":1080},"src/app/(app)/(home)/about/page.tsx":{"content":"import React from 'react'\r\n\r\nconst About = () => {\r\n  return (\r\n    <div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default About\r\n","size_bytes":127},"src/app/(app)/(home)/contact/page.tsx":{"content":"import React from 'react'\r\n\r\nconst Contact = () => {\r\n  return (\r\n    <div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Contact\r\n","size_bytes":131},"src/app/(app)/(home)/features/page.tsx":{"content":"import React from 'react'\r\n\r\nconst Features = () => {\r\n  return (\r\n    <div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Features\r\n","size_bytes":133},"src/app/(app)/(home)/pricing/page.tsx":{"content":"import React from 'react'\r\n\r\nconst Pricing = () => {\r\n  return (\r\n    <div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Pricing\r\n","size_bytes":131},"src/app/(app)/(library)/library/page.tsx":{"content":"import { DEFAULT_LIMIT } from \"@/constants\";\r\nimport LibraryView from \"@/modules/library/ui/views/library-view\";\r\nimport { getQueryClient, trpc } from \"@/trpc/server\";\r\nimport { dehydrate, HydrationBoundary } from \"@tanstack/react-query\";\r\n\r\ninterface Props {\r\n  params: { productId?: string }; // ✅ make optional\r\n}\r\n\r\nconst LibraryPage = async ({ params }: Props) => {\r\n  const { productId } = params;\r\n  const queryClient = getQueryClient();\r\n\r\n  await queryClient.prefetchInfiniteQuery(\r\n    trpc.library.getMany.infiniteQueryOptions({\r\n      limit: DEFAULT_LIMIT,\r\n    })\r\n  );\r\n\r\n  if (productId) {\r\n    void queryClient.prefetchQuery(\r\n      trpc.reviews.getOne.queryOptions({ productId })\r\n    );\r\n  }\r\n\r\n  return (\r\n    <HydrationBoundary state={dehydrate(queryClient)}>\r\n      <LibraryView productId={productId} />\r\n    </HydrationBoundary>\r\n  );\r\n};\r\n\r\nexport default LibraryPage;\r\n","size_bytes":895},"src/app/(payload)/admin/[[...segments]]/not-found.tsx":{"content":"/* THIS FILE WAS GENERATED AUTOMATICALLY BY PAYLOAD. */\n/* DO NOT MODIFY IT BECAUSE IT COULD BE REWRITTEN AT ANY TIME. */\nimport type { Metadata } from 'next'\n\nimport config from '@payload-config'\nimport { NotFoundPage, generatePageMetadata } from '@payloadcms/next/views'\nimport { importMap } from '../importMap'\n\ntype Args = {\n  params: Promise<{\n    segments: string[]\n  }>\n  searchParams: Promise<{\n    [key: string]: string | string[]\n  }>\n}\n\nexport const generateMetadata = ({ params, searchParams }: Args): Promise<Metadata> =>\n  generatePageMetadata({ config, params, searchParams })\n\nconst NotFound = ({ params, searchParams }: Args) =>\n  NotFoundPage({ config, params, searchParams, importMap })\n\nexport default NotFound\n","size_bytes":731},"src/app/(payload)/admin/[[...segments]]/page.tsx":{"content":"/* THIS FILE WAS GENERATED AUTOMATICALLY BY PAYLOAD. */\n/* DO NOT MODIFY IT BECAUSE IT COULD BE REWRITTEN AT ANY TIME. */\nimport type { Metadata } from 'next'\n\nimport config from '@payload-config'\nimport { RootPage, generatePageMetadata } from '@payloadcms/next/views'\nimport { importMap } from '../importMap'\n\ntype Args = {\n  params: Promise<{\n    segments: string[]\n  }>\n  searchParams: Promise<{\n    [key: string]: string | string[]\n  }>\n}\n\nexport const generateMetadata = ({ params, searchParams }: Args): Promise<Metadata> =>\n  generatePageMetadata({ config, params, searchParams })\n\nconst Page = ({ params, searchParams }: Args) =>\n  RootPage({ config, params, searchParams, importMap })\n\nexport default Page\n","size_bytes":715},"src/app/(payload)/api/[...slug]/route.ts":{"content":"/* THIS FILE WAS GENERATED AUTOMATICALLY BY PAYLOAD. */\n/* DO NOT MODIFY IT BECAUSE IT COULD BE REWRITTEN AT ANY TIME. */\nimport config from '@payload-config'\nimport '@payloadcms/next/css'\nimport {\n  REST_DELETE,\n  REST_GET,\n  REST_OPTIONS,\n  REST_PATCH,\n  REST_POST,\n  REST_PUT,\n} from '@payloadcms/next/routes'\n\nexport const GET = REST_GET(config)\nexport const POST = REST_POST(config)\nexport const DELETE = REST_DELETE(config)\nexport const PATCH = REST_PATCH(config)\nexport const PUT = REST_PUT(config)\nexport const OPTIONS = REST_OPTIONS(config)\n","size_bytes":550},"src/app/(payload)/api/graphql/route.ts":{"content":"/* THIS FILE WAS GENERATED AUTOMATICALLY BY PAYLOAD. */\n/* DO NOT MODIFY IT BECAUSE IT COULD BE REWRITTEN AT ANY TIME. */\nimport config from '@payload-config'\nimport { GRAPHQL_POST, REST_OPTIONS } from '@payloadcms/next/routes'\n\nexport const POST = GRAPHQL_POST(config)\n\nexport const OPTIONS = REST_OPTIONS(config)\n","size_bytes":315},"src/app/(payload)/api/graphql-playground/route.ts":{"content":"/* THIS FILE WAS GENERATED AUTOMATICALLY BY PAYLOAD. */\n/* DO NOT MODIFY IT BECAUSE IT COULD BE REWRITTEN AT ANY TIME. */\nimport config from '@payload-config'\nimport '@payloadcms/next/css'\nimport { GRAPHQL_PLAYGROUND_GET } from '@payloadcms/next/routes'\n\nexport const GET = GRAPHQL_PLAYGROUND_GET(config)\n","size_bytes":305},"src/modules/auth/ui/views/sign-in-view.tsx":{"content":"\"use client\";\r\n\r\nimport { Poppins } from \"next/font/google\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\nimport Link from \"next/link\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { z } from \"zod\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { useTRPC } from \"@/trpc/client\";\r\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\r\nimport { toast } from \"sonner\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { loginSchema } from \"../../schemas\";\r\n\r\nconst poppins = Poppins({\r\n  subsets: [\"latin\"],\r\n  weight: [\"700\"],\r\n});\r\n\r\nexport const SignInView = () => {\r\n  const router = useRouter();\r\n\r\n  const trpc = useTRPC();\r\n  const queryClient = useQueryClient()\r\n  \r\n  const login = useMutation(\r\n    trpc.auth.login.mutationOptions({\r\n      onError: (error) => {\r\n        toast.error(error.message);\r\n      },\r\n      onSuccess: async() => {\r\n        await queryClient.invalidateQueries(trpc.auth.session.queryFilter())\r\n        router.push(\"/\");\r\n      },\r\n    })\r\n  );\r\n\r\n  const form = useForm<z.infer<typeof loginSchema>>({\r\n    mode: \"all\",\r\n    resolver: zodResolver(loginSchema),\r\n    defaultValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n  });\r\n\r\n  const onSubmit = (values: z.infer<typeof loginSchema>) => {\r\n    login.mutate(values);\r\n  };\r\n\r\n  return (\r\n    <div className=\"grid grid-cols-1 lg:grid-cols-5\">\r\n      <div className=\"bg-[#F4F4F0] h-screen w-full lg:col-span-3 overflow-y-auto\">\r\n        <Form {...form}>\r\n          <form\r\n            onSubmit={form.handleSubmit(onSubmit)}\r\n            className=\"flex flex-col gap-8 p-4 lg:p-10\"\r\n          >\r\n            <div className=\"flex items-center justify-between mb-5\">\r\n              <Link href=\"/\">\r\n                <span\r\n                  className={cn(\"text-2xl font-semibold\", poppins.className)}\r\n                >\r\n                  funroad\r\n                </span>\r\n              </Link>\r\n              <Button\r\n                asChild\r\n                variant=\"ghost\"\r\n                size=\"sm\"\r\n                className=\"text-base border-none underline\"\r\n              >\r\n                <Link href=\"/sign-up\">Sign up</Link>\r\n              </Button>\r\n            </div>\r\n            <h1 className=\"text-4xl font-medium\">Welcome back to Funroad.</h1>\r\n\r\n            <FormField\r\n              name=\"email\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel className=\"text-base block mb-2\">Email</FormLabel>\r\n                  <FormControl>\r\n                    <Input {...field} />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              name=\"password\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel className=\"text-base block mb-2\">\r\n                    Password\r\n                  </FormLabel>\r\n                  <FormControl>\r\n                    <Input {...field} type=\"password\" />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <Button\r\n              disabled={login.isPending}\r\n              type=\"submit\"\r\n              size=\"lg\"\r\n              variant=\"elevated\"\r\n              className=\"bg-black text-white hover:bg-pink-400 hover:text-primary\"\r\n            >\r\n              Login\r\n            </Button>\r\n          </form>\r\n        </Form>\r\n      </div>\r\n\r\n      <div\r\n        className=\"h-screen w-full lg:col-span-2 hidden lg:block\"\r\n        style={{\r\n          backgroundImage: \"url('/auth-bg.png')\",\r\n          backgroundSize: \"cover\",\r\n          backgroundPosition: \"center\",\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","size_bytes":4007},"src/modules/auth/ui/views/sign-up-view.tsx":{"content":"\"use client\";\r\n\r\nimport { Poppins } from \"next/font/google\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { registerSchema } from \"../../schemas\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormDescription,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\nimport Link from \"next/link\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { z } from \"zod\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { useTRPC } from \"@/trpc/client\";\r\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\r\nimport { toast } from \"sonner\";\r\nimport { useRouter } from \"next/navigation\";\r\n\r\nconst poppins = Poppins({\r\n  subsets: [\"latin\"],\r\n  weight: [\"700\"],\r\n});\r\n\r\nexport const SignUpView = () => {\r\n  const router = useRouter();\r\n\r\n  const trpc = useTRPC();\r\n  const queryClient = useQueryClient()\r\n\r\n  const register = useMutation(\r\n    trpc.auth.register.mutationOptions({\r\n      onError: (error) => {\r\n        toast.error(error.message);\r\n      },\r\n      onSuccess: async() => {\r\n                await queryClient.invalidateQueries(trpc.auth.session.queryFilter())\r\n\r\n        router.push(\"/\");\r\n      },\r\n    })\r\n  );\r\n\r\n  const form = useForm<z.infer<typeof registerSchema>>({\r\n    mode: \"all\",\r\n    resolver: zodResolver(registerSchema),\r\n    defaultValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n      username: \"\",\r\n    },\r\n  });\r\n\r\n  const onSubmit = (values: z.infer<typeof registerSchema>) => {\r\n    register.mutate(values);\r\n  };\r\n\r\n  const username = form.watch(\"username\");\r\n  const usernameErrors = form.formState.errors.username;\r\n\r\n  const showPreview = username && !usernameErrors;\r\n\r\n  return (\r\n    <div className=\"grid grid-cols-1 lg:grid-cols-5\">\r\n      <div className=\"bg-[#F4F4F0] h-screen w-full lg:col-span-3 overflow-y-auto\">\r\n        <Form {...form}>\r\n          <form\r\n            onSubmit={form.handleSubmit(onSubmit)}\r\n            className=\"flex flex-col gap-8 p-4 lg:p-10\"\r\n          >\r\n            <div className=\"flex items-center justify-between mb-5\">\r\n              <Link href=\"/\">\r\n                <span\r\n                  className={cn(\"text-2xl font-semibold\", poppins.className)}\r\n                >\r\n                  funroad\r\n                </span>\r\n              </Link>\r\n              <Button\r\n                asChild\r\n                variant=\"ghost\"\r\n                size=\"sm\"\r\n                className=\"text-base border-none underline\"\r\n              >\r\n                <Link href=\"/sign-in\">Sign in</Link>\r\n              </Button>\r\n            </div>\r\n            <h1 className=\"text-4xl font-medium\">\r\n              Join over 1,580 creators earning money on Funroad.\r\n            </h1>\r\n            <FormField\r\n              name=\"username\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel className=\"text-base block mb-2\">\r\n                    Username\r\n                  </FormLabel>\r\n                  <FormControl>\r\n                    <Input {...field} />\r\n                  </FormControl>\r\n                  <FormDescription\r\n                    className={cn(\"hidden\", showPreview && \"block mt-2\")}\r\n                  >\r\n                    Your store will be available at&nbsp;\r\n                    <strong>{username}</strong>.shop.com\r\n                  </FormDescription>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              name=\"email\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel className=\"text-base block mb-2\">Email</FormLabel>\r\n                  <FormControl>\r\n                    <Input {...field} />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              name=\"password\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel className=\"text-base block mb-2\">\r\n                    Password\r\n                  </FormLabel>\r\n                  <FormControl>\r\n                    <Input {...field} type=\"password\" />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <Button\r\n              disabled={register.isPending}\r\n              type=\"submit\"\r\n              size=\"lg\"\r\n              variant=\"elevated\"\r\n              className=\"bg-black text-white hover:bg-pink-400 hover:text-primary\"\r\n            >\r\n              Create account\r\n            </Button>\r\n          </form>\r\n        </Form>\r\n      </div>\r\n\r\n      <div\r\n        className=\"h-screen w-full lg:col-span-2 hidden lg:block\"\r\n        style={{\r\n          backgroundImage: \"url('/auth-bg.png')\",\r\n          backgroundSize: \"cover\",\r\n          backgroundPosition: \"center\",\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","size_bytes":5046},"src/modules/checkout/ui/components/checkout-button.tsx":{"content":"import { Button } from \"@/components/ui/button\";\r\nimport { useCart } from \"../../hooks/use-cart\";\r\nimport { cn, generateTenantUrl } from \"@/lib/utils\";\r\nimport Link from \"next/link\";\r\nimport { ShoppingCartIcon } from \"lucide-react\";\r\n\r\ninterface CheckoutButtonProps {\r\n  className?: string;\r\n  hideIfEmpty?: boolean;\r\n  tenantSlug: string;\r\n}\r\n\r\nexport const CheckoutButton = ({\r\n  className,\r\n  hideIfEmpty,\r\n  tenantSlug,\r\n}: CheckoutButtonProps) => {\r\n  const { totalItems } = useCart(tenantSlug);\r\n\r\n  if (hideIfEmpty && totalItems === 0) return null;\r\n\r\n  return (\r\n    <Button variant=\"elevated\" asChild className={cn(\"bg-white\", className)}>\r\n      <Link href={`${generateTenantUrl(tenantSlug)}/checkout`}>\r\n        <ShoppingCartIcon /> {totalItems > 0 ? totalItems : \"\"}\r\n      </Link>\r\n    </Button>\r\n  );\r\n};\r\n","size_bytes":820},"src/modules/checkout/ui/components/checkout-item.tsx":{"content":"import { cn, formatCurrency } from \"@/lib/utils\";\r\nimport Image from \"next/image\";\r\nimport Link from \"next/link\";\r\nimport React from \"react\";\r\n\r\ninterface CheckoutItemProps {\r\n  isLast?: boolean;\r\n  imageUrl?: string | null;\r\n  name: string;\r\n  productUrl: string;\r\n  tenantUrl: string;\r\n  tenantName: string;\r\n  price: number;\r\n  onRemove: () => void;\r\n}\r\n\r\nconst CheckoutItem = ({\r\n  isLast,\r\n  imageUrl,\r\n  name,\r\n  productUrl,\r\n  tenantUrl,\r\n  tenantName,\r\n  price,\r\n  onRemove,\r\n}: CheckoutItemProps) => {\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"grid grid-cols-[8.5rem_1fr_auto] gap-4 pr-4 border-b\",\r\n        isLast && \"border-b-0\"\r\n      )}\r\n    >\r\n      <div className=\"overflow-hidden border-r\">\r\n        <div className=\"relative aspect-square h-full\">\r\n          <Image\r\n            src={imageUrl || \"/placeholder.png\"}\r\n            alt={name}\r\n            fill\r\n            className=\"object-cover\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"py-4 flex flex-col justify-between\">\r\n        <div>\r\n          <Link href={productUrl}>\r\n            <h4 className=\"font-bold underline\">{name}</h4>\r\n          </Link>\r\n          <Link href={tenantUrl}>\r\n            <p className=\"font-bold underline\">{tenantName}</p>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"py-4 flex flex-col justify-between\">\r\n        <p className=\"font-medium\">{formatCurrency(price)}</p>\r\n        <button\r\n          className=\"underline font-medium cursor-pointer\"\r\n          onClick={onRemove}\r\n          type=\"button\"\r\n        >\r\n          Remove\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutItem;\r\n","size_bytes":1683},"src/modules/checkout/ui/components/checkout-sidebar.tsx":{"content":"import { Button } from \"@/components/ui/button\";\r\nimport { formatCurrency } from \"@/lib/utils\";\r\nimport { CircleXIcon } from \"lucide-react\";\r\nimport React from \"react\";\r\n\r\ninterface CheckoutSidebarProps {\r\n  total: number;\r\n  onPurchase: () => void;\r\n  isCanceled?: boolean;\r\n  disabled?: boolean;\r\n}\r\n\r\nconst CheckoutSidebar = ({\r\n  total,\r\n  onPurchase,\r\n  isCanceled,\r\n  disabled,\r\n}: CheckoutSidebarProps) => {\r\n  return (\r\n    <div className=\"border rounded-md overflow-hidden bg-white flex flex-col\">\r\n      <div className=\"flex items-center justify-between p-4 border-b\">\r\n        <h4 className=\"font-medium text-lg\">Total</h4>\r\n        <p className=\"font-medium text-lg\">{formatCurrency(total)}</p>\r\n      </div>\r\n      <div className=\"p-4 flex items-center justify-center\">\r\n        <Button\r\n          variant=\"elevated\"\r\n          disabled={disabled}\r\n          onClick={onPurchase}\r\n          size=\"lg\"\r\n          className=\"text-base w-full text-white bg-primary hover:bg-pink-400 hover:text-primary\"\r\n        >\r\n          Checkout\r\n        </Button>\r\n      </div>\r\n\r\n      {isCanceled && (\r\n        <div className=\"p-4 justify-center items-center border-t\">\r\n          <div className=\"bg-red-100 border border-red-400 font-medium px-4 py-3 rounded flex items-center\">\r\n            <div className=\"flex items-center\">\r\n              <CircleXIcon className=\"size-6 mr-2 fill-red-500 text-red-100\" />\r\n              <span>Checkout failed. Please try again.</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutSidebar;\r\n","size_bytes":1596},"src/modules/checkout/ui/components/navbar.tsx":{"content":"\"use client\";\r\n\r\nimport Link from \"next/link\";\r\nimport React from \"react\";\r\nimport { generateTenantUrl } from \"@/lib/utils\";\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\ninterface Props {\r\n  slug: string;\r\n}\r\n\r\nconst Navbar = ({ slug }: Props) => {\r\n  return (\r\n    <nav className=\"h-20 border-b font-medium bg-white\">\r\n      <div className=\"max-w-(--breakpoint-xl) mx-auto flex justify-between items-center h-full px-4 lg:px-12\">\r\n        <p className=\"text-xl\">Checkout</p>\r\n        <Button variant=\"elevated\" asChild>\r\n          <Link href={generateTenantUrl(slug)}>Continue Shopping</Link>\r\n        </Button>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n\r\nexport const NavbarSkeleton = () => {\r\n  return (\r\n    <nav className=\"h-20 border-b font-medium bg-white\">\r\n      <div className=\"max-w-(--breakpoint-xl) mx-auto flex justify-between items-center h-full px-4 lg:px-12\">\r\n        {/* <p className=\"text-xl\">{data.name}</p> */}\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n","size_bytes":999},"src/modules/checkout/ui/views/checkout-view.tsx":{"content":"\"use client\";\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport { useCart } from \"../../hooks/use-cart\";\r\nimport { useTRPC } from \"@/trpc/client\";\r\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\r\nimport { toast } from \"sonner\";\r\nimport { generateTenantUrl } from \"@/lib/utils\";\r\nimport CheckoutItem from \"../components/checkout-item\";\r\nimport CheckoutSidebar from \"../components/checkout-sidebar\";\r\nimport { InboxIcon, LoaderIcon } from \"lucide-react\";\r\nimport { useCheckoutStates } from \"../../hooks/use-checkout-states\";\r\nimport { useRouter } from \"next/navigation\";\r\n\r\ninterface CheckoutViewProps {\r\n  tenantSlug: string;\r\n}\r\n\r\nconst CheckoutView = ({ tenantSlug }: CheckoutViewProps) => {\r\n  const router = useRouter()\r\n  const [states, setStates] = useCheckoutStates()\r\n  const { productIds, clearAllCarts, removeproduct, clearCart } = useCart(tenantSlug);\r\n\r\n  const trpc = useTRPC();\r\n  const queryClient = useQueryClient()\r\n  const { data, error, isLoading } = useQuery(\r\n    trpc.checkout.getProducts.queryOptions({\r\n      ids: productIds,\r\n    })\r\n  );\r\n\r\n  const purchase = useMutation(trpc.checkout.purchase.mutationOptions({\r\n    onMutate: () => {\r\n      setStates({success: false, cancel: false})\r\n    },\r\n    onSuccess: (data) => {\r\n      window.location.href = data.url\r\n    },\r\n    onError: (error) => {\r\n      if(error.data?.code === \"UNAUTHORIZED\") {\r\n        router.push(\"/sign-in\")\r\n      }\r\n      toast.error(error.message)\r\n    },\r\n  }));\r\n\r\n  useEffect(() => {\r\n    if(states.success) {\r\n      setStates({success: false, cancel: false})\r\n      clearCart();\r\n      queryClient.invalidateQueries(trpc.library.getMany.infiniteQueryFilter())\r\n      router.push(\"/library\")\r\n    }\r\n  }, [states.success, clearCart, router, setStates, queryClient, trpc.library.getMany])\r\n  \r\n\r\n  useEffect(() => {\r\n    if (error?.data?.code === \"NOT_FOUND\") {\r\n      clearAllCarts();\r\n      toast.warning(\"Invalid products found, cart cleared\");\r\n    }\r\n  }, [error, clearAllCarts]);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"lg:pt-16 pt-4 px-4 lg:px-12\">\r\n        <div className=\"border border-black border-dashed flex items-center justify-center p-8 flex-col gap-y-4 bg-white w-full rounded-lg\">\r\n          <LoaderIcon className=\"text-muted-foreground animate-spin\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n if (data?.totalDocs === 0) {\r\n  return (\r\n    <div className=\"lg:pt-16 pt-4 px-4 lg:px-12\">\r\n      <div className=\"border border-black border-dashed flex items-center justify-center p-8 flex-col gap-y-4 bg-white w-full rounded-lg\">\r\n        <InboxIcon className=\"w-8 h-8 text-muted-foreground\" />\r\n        <p className=\"text-base font-medium\">No products found</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n  return (\r\n    <div className=\"lg:pt-16 pt-4 px-4 lg:px-12\">\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-7 gap-4 lg:gap-16\">\r\n        <div className=\"lg:col-span-4\">\r\n          <div className=\"border rounded-md overflow-hidden bg-white\">\r\n            {data?.docs.map((product, index) => (\r\n              <CheckoutItem\r\n                key={product.id}\r\n                isLast={index === data.docs.length - 1}\r\n                imageUrl={product.image?.url}\r\n                name={product.name}\r\n                productUrl={`${generateTenantUrl(product.tenant.slug)}/products/${product.id}`}\r\n                tenantUrl={generateTenantUrl(product.tenant.slug)}\r\n                tenantName={product.tenant.name}\r\n                price={product.price}\r\n                onRemove={() => removeproduct(product.id)}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"lg:col-span-3\">\r\n          <CheckoutSidebar\r\n            total={data?.totalPrice || 0}\r\n            onPurchase={() => purchase.mutate({ tenantSlug, productIds })}\r\n            isCanceled={states.cancel}\r\n            disabled={purchase.isPending}\r\n          />{\" \"}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutView;\r\n","size_bytes":4038},"src/modules/home/ui/components/footer.tsx":{"content":"export const Footer = () => {\r\n    return (\r\n        <footer className=\"flex border-t justify-between font-medium p-6\">\r\n            <div className=\"flex items-center gap-2\">\r\n                <p>funroad, Inc.</p>\r\n            </div>\r\n        </footer>\r\n    )\r\n}","size_bytes":261},"src/modules/home/ui/components/navbar-sidebar.tsx":{"content":"import { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport {\r\n  Sheet,\r\n  SheetContent,\r\n  SheetHeader,\r\n  SheetTitle,\r\n} from \"@/components/ui/sheet\";\r\nimport Link from \"next/link\";\r\n\r\ninterface NavbarItem {\r\n  href: string;\r\n  children: React.ReactNode;\r\n}\r\n\r\ninterface Props {\r\n  items: NavbarItem[];\r\n  open: boolean;\r\n  onOpenChange: (open: boolean) => void;\r\n}\r\n\r\nexport const NavbarSidebar = ({ items, open, onOpenChange }: Props) => {\r\n  return (\r\n    <Sheet open={open} onOpenChange={onOpenChange}>\r\n      <SheetContent side=\"left\" className=\"p-0 transition-none\">\r\n        <SheetHeader className=\"p-4 border-b\">\r\n          <SheetTitle>Menu</SheetTitle>\r\n        </SheetHeader>\r\n        <ScrollArea className=\"flex flex-col overflow-y-auto h-full pb-2\">\r\n          {items.map((item) => (\r\n            <Link\r\n              key={item.href}\r\n              href={item.href}\r\n              className=\"w-full text-left p-4 hover:bg-black hover:text-white flex items-center text-base font-medium\"\r\n              onClick={() => onOpenChange(false)}\r\n            >\r\n              {item.children}\r\n            </Link>\r\n          ))}\r\n\r\n          <div className=\"border-t\">\r\n            <Link\r\n              href=\"/sign-in\"\r\n              className=\"w-full text-left p-4 hover:bg-black hover:text-white flex items-center text-base font-medium\"\r\n            >\r\n              Log in\r\n            </Link>\r\n            <Link\r\n              href=\"/sign-up\"\r\n              className=\"w-full text-left p-4 hover:bg-black hover:text-white flex items-center text-base font-medium\"\r\n            >\r\n              Start selling\r\n            </Link>\r\n          </div>\r\n        </ScrollArea>\r\n      </SheetContent>\r\n    </Sheet>\r\n  );\r\n};\r\n","size_bytes":1731},"src/modules/home/ui/components/navbar.tsx":{"content":"\"use client\";\r\n\r\nimport Link from \"next/link\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Poppins } from \"next/font/google\";\r\nimport { usePathname } from \"next/navigation\";\r\nimport { NavbarSidebar } from \"./navbar-sidebar\";\r\nimport { useState } from \"react\";\r\nimport { MenuIcon } from \"lucide-react\";\r\nimport { useTRPC } from \"@/trpc/client\";\r\nimport { useQuery } from \"@tanstack/react-query\";\r\n\r\nconst poppins = Poppins({\r\n  subsets: [\"latin\"],\r\n  weight: [\"700\"],\r\n});\r\n\r\ninterface NavbarItemsProps {\r\n  href: string;\r\n  children: React.ReactNode;\r\n  isActive?: boolean;\r\n}\r\n\r\nconst NavbarItem = ({ href, children, isActive }: NavbarItemsProps) => {\r\n  return (\r\n    <Button\r\n      asChild\r\n      variant=\"outline\"\r\n      className={cn(\r\n        \"bg-transparent hover:bg-transparent rounded-full hover:border-primary border-transparent px-3.5 text-lg\",\r\n        isActive && \"bg-black text-white hover:bg-black hover:text-white\"\r\n      )}\r\n    >\r\n      <Link href={href}>{children}</Link>\r\n    </Button>\r\n  );\r\n};\r\n\r\nconst navbarItems = [\r\n  { href: \"/\", children: \"Home\" },\r\n  { href: \"/about\", children: \"About\" },\r\n  { href: \"/features\", children: \"Features\" },\r\n  { href: \"/pricing\", children: \"Pricing\" },\r\n  { href: \"/contact\", children: \"Contact\" },\r\n];\r\n\r\nexport const Navbar = () => {\r\n  const pathname = usePathname();\r\n  const trpc = useTRPC()\r\n  const session = useQuery(trpc.auth.session.queryOptions())\r\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n\r\n  return (\r\n    <nav className=\"h-20 flex items-center justify-between border-b font-medium bg-white\">\r\n      <Link href=\"/\" className=\"pl-6 flex items-center\">\r\n        <span className={cn(\"text-5xl font-semibold\", poppins.className)}>\r\n          funroad\r\n        </span>\r\n      </Link>\r\n      <NavbarSidebar\r\n        open={isSidebarOpen}\r\n        items={navbarItems}\r\n        onOpenChange={setIsSidebarOpen}\r\n      />\r\n\r\n      <div className=\" items-center gap-4 hidden lg:flex\">\r\n        {navbarItems.map((item) => (\r\n          <NavbarItem\r\n            key={item.href}\r\n            href={item.href}\r\n            isActive={pathname === item.href}\r\n          >\r\n            {item.children}\r\n          </NavbarItem>\r\n        ))}\r\n      </div>\r\n\r\n      {session.data?.user ? (\r\n        <div className=\"hidden lg:flex h-full\">\r\n        <Button\r\n          asChild\r\n          className=\"border-l border-t-0 border-b-0 border-r-0 px-12 h-full rounded-none bg-black text-white hover:bg-pink-400 hover:text-black transition-colors text-lg\"\r\n        >\r\n          <Link prefetch href=\"/admin\">\r\n          Dashboard\r\n          </Link>\r\n        </Button>\r\n        </div>\r\n      ) : (\r\n      <div className=\"hidden lg:flex h-full\">\r\n        <Button\r\n          asChild\r\n          variant=\"secondary\"\r\n          className=\"border-l border-t-0 border-b-0 border-r-0 px-12 h-full rounded-none bg-white hover:bg-pink-400 transition-colors text-lg\"\r\n        >\r\n          <Link prefetch href=\"/sign-in\">\r\n            Login\r\n          </Link>\r\n        </Button>\r\n        <Button\r\n          asChild\r\n          className=\"border-l border-t-0 border-b-0 border-r-0 px-12 h-full rounded-none bg-black text-white hover:bg-pink-400 hover:text-black transition-colors text-lg\"\r\n        >\r\n          <Link prefetch href=\"/sign-up\">\r\n            Start selling\r\n          </Link>\r\n        </Button>\r\n      </div>\r\n\r\n      )}\r\n\r\n\r\n      <div className=\"flex lg:hidden items-center justify-center\">\r\n        <Button\r\n          variant=\"ghost\"\r\n          className=\"size-12 border-transparent bg-white\"\r\n          onClick={() => setIsSidebarOpen(true)}\r\n        >\r\n          <MenuIcon />\r\n        </Button>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n","size_bytes":3746},"src/modules/library/ui/components/product-card.tsx":{"content":"import { StarIcon } from \"lucide-react\";\r\nimport Image from \"next/image\";\r\nimport Link from \"next/link\";\r\nimport React from \"react\";\r\n\r\ninterface ProductCardProps {\r\n  id: string;\r\n  name: string;\r\n  imageUrl?: string | null;\r\n  tenantSlug: string;\r\n  tenantImageUrl?: string | null;\r\n  reviewRating: number;\r\n  reviewCount: number;\r\n  price: number;\r\n}\r\n\r\nconst ProductCard = ({\r\n  id,\r\n  name,\r\n  imageUrl,\r\n  tenantSlug,\r\n  tenantImageUrl,\r\n  reviewRating,\r\n  reviewCount,\r\n}: ProductCardProps) => {\r\n  return (\r\n    <Link prefetch href={`/library/${id}`}>\r\n      <div className=\"hover:shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] transition-shadow border rounded-md bg-white overflow-hidden h-full flex flex-col\">\r\n        <div className=\"relative aspect-square\">\r\n          <Image\r\n            alt={name}\r\n            fill\r\n            src={imageUrl || \"/placeholder.png\"}\r\n            className=\"object-cover\"\r\n          />\r\n        </div>\r\n        <div className=\"p-4 border-y flex flex-col gap-3 flex-1\">\r\n          <h2 className=\"text-md font-medium line-clamp-4\">{name}</h2>\r\n          <div className=\"flex items-center gap-2\">\r\n            {tenantImageUrl && (\r\n              <Image\r\n                alt={tenantSlug}\r\n                src={tenantImageUrl}\r\n                width={16}\r\n                height={16}\r\n                className=\"rounded-full border shrink-0 size-[16px]\"\r\n              />\r\n            )}\r\n            <p className=\"text-sm underline font-medium\">{tenantSlug}</p>\r\n          </div>\r\n\r\n          {reviewCount > 0 && (\r\n            <div className=\"flex items-center gap-1\">\r\n              <StarIcon className=\"size-3.5 fill-black\" />\r\n              <p className=\"text-sm font-medium\">\r\n                {reviewRating} ({reviewCount})\r\n              </p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default ProductCard;\r\n\r\nexport const ProductCardSkeleton = () => {\r\n  return (\r\n    <div className=\"w-full aspect-3/4 bg-neutral-200 rounded-lg animate-pulse\" />\r\n  );\r\n};\r\n","size_bytes":2053},"src/modules/library/ui/components/product-list.tsx":{"content":"\"use client\";\r\n\r\nimport { useTRPC } from \"@/trpc/client\";\r\nimport { useSuspenseInfiniteQuery } from \"@tanstack/react-query\";\r\nimport React from \"react\";\r\nimport { DEFAULT_LIMIT } from \"@/constants\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { InboxIcon } from \"lucide-react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport ProductCard, { ProductCardSkeleton } from \"./product-card\";\r\n\r\nconst ProductList = () => {\r\n  const trpc = useTRPC();\r\n\r\n  const { data, hasNextPage, isFetchingNextPage, fetchNextPage } =\r\n    useSuspenseInfiniteQuery(\r\n      trpc.library.getMany.infiniteQueryOptions(\r\n        {\r\n          limit: DEFAULT_LIMIT,\r\n        },\r\n        {\r\n          getNextPageParam: (lastPage) =>\r\n            lastPage.docs.length > 0 ? lastPage.nextPage : undefined,\r\n        }\r\n      )\r\n    );\r\n\r\n  if (data.pages?.[0]?.docs.length === 0) {\r\n    return (\r\n      <div className=\"border border-black border-dashed flex items-center justify-center p-8 flex-col gap-y-4 bg-white w-full rounded-lg\">\r\n        <InboxIcon />\r\n        <p className=\"text-base font-medium\">No products found</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={cn(\r\n          \"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4 gap-4\"\r\n        )}\r\n      >\r\n        {data?.pages.flatMap((page) =>\r\n          page.docs.map((product) => (\r\n            <ProductCard\r\n              key={product.id}\r\n              id={product.id}\r\n              name={product.name}\r\n              imageUrl={product.image?.url}\r\n              tenantSlug={product.tenant?.slug}\r\n              tenantImageUrl={product.tenant?.image?.url}\r\n              reviewRating={product.reviewRating}\r\n              reviewCount={product.reviewCount}\r\n              price={product.price}\r\n            />\r\n          ))\r\n        )}\r\n      </div>\r\n      <div className=\"flex justify-center pt-8\">\r\n        {hasNextPage && (\r\n          <Button\r\n            disabled={isFetchingNextPage}\r\n            onClick={() => fetchNextPage()}\r\n            className=\"font-medium disabled:opacity-50 text-base bg-white\"\r\n            variant=\"elevated\"\r\n          >\r\n            Load more\r\n          </Button>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductList;\r\n\r\nexport const ProductListSkeleton = () => {\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4 gap-4\"\r\n      )}\r\n    >\r\n      {Array.from({ length: DEFAULT_LIMIT }).map((_, index) => (\r\n        <ProductCardSkeleton key={index} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","size_bytes":2660},"src/modules/library/ui/components/review-form.tsx":{"content":"\"use client\";\r\n\r\nimport StarPicker from \"@/components/star-picker\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { ReviewsGetOneOutput } from \"@/modules/reviews/types\";\r\nimport { useTRPC } from \"@/trpc/client\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\r\nimport React, { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { toast } from \"sonner\";\r\nimport { z } from \"zod\";\r\n\r\ninterface ReviewFormProps {\r\n  productId: string;\r\n  initialData?: ReviewsGetOneOutput;\r\n}\r\n\r\nconst formSchema = z.object({\r\n  rating: z.number().min(1, { message: \"Rating is required\" }).max(5),\r\n  description: z.string().min(1, { message: \"Description is required\" }),\r\n});\r\n\r\nconst ReviewForm = ({ productId, initialData }: ReviewFormProps) => {\r\n  const [isPreview, setIsPreview] = useState(!!initialData);\r\n\r\n  const trpc = useTRPC()\r\n  const queryClient = useQueryClient()\r\n  const createReview = useMutation(trpc.reviews.create.mutationOptions({\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries(trpc.reviews.getOne.queryOptions({\r\n        productId\r\n      }))\r\n      setIsPreview(true)\r\n    },\r\n    onError: (error) => {\r\n      toast.error(error.message)\r\n    }\r\n  }))\r\n\r\n  const updateReview = useMutation(trpc.reviews.update.mutationOptions({\r\n     onSuccess: () => {\r\n      queryClient.invalidateQueries(trpc.reviews.getOne.queryOptions({\r\n        productId\r\n      }))\r\n      setIsPreview(true)\r\n    },\r\n    onError: (error) => {\r\n      toast.error(error.message)\r\n    }\r\n  }))\r\n\r\n  const form = useForm<z.infer<typeof formSchema>>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      rating: initialData?.rating ?? 0,\r\n      description: initialData?.description ?? \"\",\r\n    },\r\n  });\r\n\r\n  const onSubmit = (values: z.infer<typeof formSchema>) => {\r\n    if(initialData) {\r\n      updateReview.mutate({\r\n        reviewId: initialData.id,\r\n        rating: values.rating,\r\n        description: values.description\r\n      })\r\n    } else {\r\n      createReview.mutate({\r\n        productId,\r\n        rating: values.rating,\r\n        description: values.description\r\n      })\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form {...form}>\r\n      <form\r\n        className=\"flex flex-col gap-y-4\"\r\n        onSubmit={form.handleSubmit(onSubmit)}\r\n      >\r\n        <p className=\"font-medium\">\r\n          {isPreview ? \"Your rating:\" : \"Liked it? Give it a rating\"}\r\n        </p>\r\n\r\n\r\n        <FormField\r\n          control={form.control}\r\n          name=\"rating\"\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <FormControl>\r\n                <StarPicker value={field.value} onChange={field.onChange} disabled={isPreview} />\r\n              </FormControl>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n        <FormField\r\n          control={form.control}\r\n          name=\"description\"\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <FormControl>\r\n                <Textarea\r\n                  placeholder=\"Want to leave a written review?\"\r\n                  disabled={isPreview}\r\n                  {...field}\r\n                />\r\n              </FormControl>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n\r\n        {!isPreview && (\r\n          <Button\r\n            variant=\"elevated\"\r\n            disabled={createReview.isPending || updateReview.isPending}\r\n            type=\"submit\"\r\n            size=\"lg\"\r\n            className=\"bg-black text-white hover:bg-pink-400 hover:text-primary w-fit\"\r\n          >\r\n            {initialData ? \"Update review\" : \"Post review\"}\r\n          </Button>\r\n        )}\r\n      </form>\r\n\r\n      {isPreview && (\r\n        <Button\r\n          onClick={() => setIsPreview(false)}\r\n          size=\"lg\"\r\n          type=\"button\"\r\n          variant=\"elevated\"\r\n          className=\"w-fit mt-4\"\r\n        >\r\n          Edit\r\n        </Button>\r\n      )}\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default ReviewForm;\r\n","size_bytes":4223},"src/modules/library/ui/components/review-sidebar.tsx":{"content":"import React from 'react'\r\nimport { useTRPC } from '@/trpc/client';\r\nimport { useSuspenseQuery } from '@tanstack/react-query';\r\nimport ReviewForm from './review-form';\r\n\r\ninterface Props {\r\n    productId: string\r\n}\r\n\r\nconst ReviewSidebar = ({productId}: Props) => {\r\n    const trpc = useTRPC()\r\n    const {data} = useSuspenseQuery(trpc.reviews.getOne.queryOptions({ productId }));\r\n\r\n  return (\r\n    <ReviewForm productId={productId} initialData={data} />\r\n  )\r\n}\r\n\r\nexport default ReviewSidebar\r\n","size_bytes":497},"src/modules/library/ui/views/library-view.tsx":{"content":"import { ArrowLeftIcon } from \"lucide-react\";\r\nimport Link from \"next/link\";\r\nimport React, { Suspense } from \"react\";\r\nimport ProductList, { ProductListSkeleton } from \"../components/product-list\";\r\n\r\nconst LibraryView = () => {\r\n  return (\r\n    <div className=\"min-h-screen bg-white\">\r\n      <nav className=\"p-4 bg-[#F4F4F0] w-full border-b\">\r\n        <Link prefetch href=\"/\" className=\"flex items-center gap-2\">\r\n          <ArrowLeftIcon className=\"size-4\" />\r\n          <span className=\"text font-medium\">Continue shopping</span>\r\n        </Link>\r\n      </nav>\r\n      <header className=\"bg-[#F4F4F0] py-8 border-b\">\r\n        <div className=\"max-w-(--breakpoint-xl) mx-auto px-4 lg:px-12 flex flex-col gap-y-4\">\r\n          <h1 className=\"text-[40px] font-medium\">Library</h1>\r\n          <p className=\"font-medium\">Your purchase and reviews</p>\r\n        </div>\r\n      </header>\r\n      <section className=\"max-w-(--breakpoint-xl) mx-auto px-4 lg:px-12 py-10\">\r\n        <Suspense fallback={<ProductListSkeleton />}>\r\n            <ProductList  />\r\n        </Suspense>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LibraryView;\r\n","size_bytes":1139},"src/modules/library/ui/views/product-view.tsx":{"content":"\"use client\";\r\n\r\nimport { ArrowLeftIcon } from \"lucide-react\";\r\nimport Link from \"next/link\";\r\nimport React from \"react\";\r\nimport { useTRPC } from \"@/trpc/client\";\r\nimport { useSuspenseQuery } from \"@tanstack/react-query\";\r\nimport ReviewSidebar from \"../components/review-sidebar\";\r\n\r\ninterface Props {\r\n  productId: string;\r\n}\r\n\r\nconst ProductView = ({ productId }: Props) => {\r\n  const trpc = useTRPC();\r\n  const { data } = useSuspenseQuery(\r\n    trpc.library.getOne.queryOptions({\r\n      productId,\r\n    })\r\n  );\r\n  return (\r\n    <div className=\"min-h-screen bg-white\">\r\n      <nav className=\"p-4 bg-[#F4F4F0] w-full border-b\">\r\n        <Link prefetch href=\"/library\" className=\"flex items-center gap-2\">\r\n          <ArrowLeftIcon className=\"size-4\" />\r\n          <span className=\"text font-medium\">Back to Library</span>\r\n        </Link>\r\n      </nav>\r\n      <header className=\"bg-[#F4F4F0] py-8 border-b\">\r\n        <div className=\"max-w-(--breakpoint-xl) mx-auto px-4 lg:px-12\">\r\n          <h1 className=\"text-[40px] font-medium\">{data.name}</h1>\r\n        </div>\r\n      </header>\r\n      <section className=\"max-w-(--breakpoint-xl) mx-auto px-4 lg:px-12 py-10\">\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-7 gap-4 lg:gap-16\">\r\n          <div className=\"lg:col-span-2\">\r\n            <div className=\"p-4 bg-white rounded-md border gap-4\">\r\n              <ReviewSidebar productId={productId} />\r\n            </div>\r\n          </div>\r\n          <div className=\"lg:col-span-5\">\r\n            <p className=\"font-medium italic text-muted-foreground\">\r\n              No Special Content\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductView;\r\n","size_bytes":1716},"src/modules/products/ui/components/cart-button.tsx":{"content":"\"use client\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { useCart } from \"@/modules/checkout/hooks/use-cart\";\r\nimport Link from \"next/link\";\r\n\r\ninterface Props {\r\n  tenantSlug: string;\r\n  productId: string;\r\n  isPurchased?: boolean;\r\n}\r\n\r\nexport const CartButton = ({ tenantSlug, productId, isPurchased }: Props) => {\r\n  const cart = useCart(tenantSlug);\r\n\r\n  if(isPurchased) {\r\n    return (\r\n      <Button variant=\"elevated\" asChild className=\"flex-1 font-medium\">\r\n        <Link href={`/library/${productId}`}>\r\n        View in Library</Link>\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      variant=\"elevated\"\r\n      className={cn(\r\n        \"flex-1 bg-pink-400\",\r\n        cart.isProductInCart(productId) && \"bg-white\"\r\n      )}\r\n      onClick={() => cart.toggleProduct(productId)}\r\n    >\r\n      {cart.isProductInCart(productId) ? \"Remove from cart\" : \"Add to cart\"}\r\n    </Button>\r\n  );\r\n};\r\n","size_bytes":962},"src/modules/products/ui/components/price-filter.tsx":{"content":"\"use client\";\r\n\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport React, { ChangeEvent } from \"react\";\r\n\r\ninterface Props {\r\n  minPrice?: string | null;\r\n  maxPrice?: string | null;\r\n  onMinPriceChange?: (value: string) => void;\r\n  onMaxPriceChange?: (value: string) => void;\r\n}\r\n\r\nexport const formatAsCurrency = (value: string) => {\r\n  const numericValue = value.replace(/[^0-9.]/g, \"\");\r\n  const parts = numericValue.split(\".\");\r\n\r\n  const formattedValue =\r\n    parts[0] + (parts.length > 1 ? \".\" + parts[1]?.slice(0, 2) : \"\");\r\n\r\n  if (!formattedValue) return \"\";\r\n\r\n  const numberValue = parseFloat(formattedValue);\r\n  if (isNaN(numberValue)) return \"\";\r\n\r\n  return new Intl.NumberFormat(\"en-US\", {\r\n    style: \"currency\",\r\n    currency: \"USD\",\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 2,\r\n  }).format(numberValue);\r\n};\r\n\r\nconst PriceFilter = ({\r\n  minPrice,\r\n  maxPrice,\r\n  onMinPriceChange,\r\n  onMaxPriceChange,\r\n}: Props) => {\r\n  const handleMinPriceChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const numericValue = e.target.value.replace(/[^0-9.]/g, \"\");\r\n    onMinPriceChange?.(numericValue); // ✅ safe call\r\n  };\r\n\r\n  const handleMaxPriceChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const numericValue = e.target.value.replace(/[^0-9.]/g, \"\");\r\n    onMaxPriceChange?.(numericValue); // ✅ safe call\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-4\">\r\n      {/* Min Price */}\r\n      <div className=\"flex flex-col gap-2\">\r\n        <Label className=\"font-medium text-base\">Minimum price</Label>\r\n        <Input\r\n          type=\"text\"\r\n          placeholder=\"$0\"\r\n          value={minPrice ? formatAsCurrency(minPrice) : \"\"}\r\n          onChange={handleMinPriceChange}\r\n        />\r\n      </div>\r\n\r\n      {/* Max Price */}\r\n      <div className=\"flex flex-col gap-2\">\r\n        <Label className=\"font-medium text-base\">Maximum price</Label>\r\n        <Input\r\n          type=\"text\"\r\n          placeholder=\"∞\"\r\n          value={maxPrice ? formatAsCurrency(maxPrice) : \"\"}\r\n          onChange={handleMaxPriceChange}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PriceFilter;\r\n","size_bytes":2203},"src/modules/products/ui/components/product-card.tsx":{"content":"import { formatCurrency, generateTenantUrl } from \"@/lib/utils\";\r\nimport { StarIcon } from \"lucide-react\";\r\nimport Image from \"next/image\";\r\nimport Link from \"next/link\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport React from \"react\";\r\n\r\ninterface ProductCardProps {\r\n  id: string;\r\n  name: string;\r\n  imageUrl?: string | null;\r\n  tenantSlug: string;\r\n  tenantImageUrl?: string | null;\r\n  reviewRating: number;\r\n  reviewCount: number;\r\n  price: number;\r\n}\r\n\r\nconst ProductCard = ({\r\n  id,\r\n  name,\r\n  imageUrl,\r\n  tenantSlug,\r\n  tenantImageUrl,\r\n  reviewRating,\r\n  reviewCount,\r\n  price,\r\n}: ProductCardProps) => {\r\n  const router = useRouter();\r\n  const handleUserClick = (e: React.MouseEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    router.push(generateTenantUrl(tenantSlug));\r\n  };\r\n\r\n  return (\r\n    <Link href={`${generateTenantUrl(tenantSlug)}/products/${id}`}>\r\n      <div className=\"hover:shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] transition-shadow border rounded-md bg-white overflow-hidden h-full flex flex-col\">\r\n        <div className=\"relative aspect-square\">\r\n          <Image\r\n            alt={name}\r\n            fill\r\n            src={imageUrl || \"/placeholder.png\"}\r\n            className=\"object-cover\"\r\n          />\r\n        </div>\r\n        <div className=\"p-4 border-y flex flex-col gap-3 flex-1\">\r\n          <h2 className=\"text-md font-medium line-clamp-4\">{name}</h2>\r\n          <div className=\"flex items-center gap-2\" onClick={handleUserClick}>\r\n            {tenantImageUrl && (\r\n              <Image\r\n                alt={tenantSlug}\r\n                src={tenantImageUrl}\r\n                width={16}\r\n                height={16}\r\n                className=\"rounded-full border shrink-0 size-[16px]\"\r\n              />\r\n            )}\r\n            <p className=\"text-sm underline font-medium\">{tenantSlug}</p>\r\n          </div>\r\n\r\n          {reviewCount > 0 && (\r\n            <div className=\"flex items-center gap-1\">\r\n              <StarIcon className=\"size-3.5 fill-black\" />\r\n              <p className=\"text-sm font-medium\">\r\n                {reviewRating} ({reviewCount})\r\n              </p>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"p-4\">\r\n          <div className=\"relative px-2 py-1 border bg-pink-400 w-fit\">\r\n            <p className=\"text-sm font-medium\">{formatCurrency(price)}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default ProductCard;\r\n\r\nexport const ProductCardSkeleton = () => {\r\n  return (\r\n    <div className=\"w-full aspect-3/4 bg-neutral-200 rounded-lg animate-pulse\" />\r\n  );\r\n};\r\n","size_bytes":2652},"src/modules/products/ui/components/product-filters.tsx":{"content":"\"use client\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { ChevronDownIcon, ChevronRightIcon } from \"lucide-react\";\r\nimport React, { useState } from \"react\";\r\nimport PriceFilter from \"./price-filter\";\r\nimport { useProductFilters } from \"../../hooks/use-product-filters\";\r\nimport TagsFilter from \"./tags-filter\";\r\n\r\ninterface ProductFiltersProps {\r\n  title: string;\r\n  className?: string;\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst ProductFilter = ({ title, className, children }: ProductFiltersProps) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const Icon = isOpen ? ChevronDownIcon : ChevronRightIcon;\r\n  return (\r\n    <div className={cn(\"p-4 border-b flex flex-col gap-2\", className)}>\r\n      <div\r\n        onClick={() => setIsOpen((current) => !current)}\r\n        className=\"flex items-center justify-between cursor-pointer\"\r\n      >\r\n        <p className=\"font-medium\">{title}</p>\r\n        <Icon className=\"size-5\" />\r\n      </div>\r\n      {isOpen && children}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ProductFilters = () => {\r\n  const [filters, setFilters] = useProductFilters();\r\n\r\n  const hasAnyFilters = Object.entries(filters).some(([key, value]) => {\r\n    if(key === \"sort\") return false\r\n\r\n    if(Array.isArray(value)) {\r\n      return value.length > 0\r\n    }\r\n\r\n    if (typeof value === \"string\") {\r\n      return value !== \"\";\r\n    }\r\n\r\n    return value !== null;\r\n  });\r\n\r\n  const onClear = () => {\r\n    setFilters({\r\n      minPrice: \"\",\r\n      maxPrice: \"\",\r\n      tags: [],\r\n    });\r\n  };\r\n\r\n  const onChange = (key: keyof typeof filters, value: unknown) => {\r\n    setFilters({ ...filters, [key]: value });\r\n  };\r\n  \r\n  return (\r\n    <div className=\"border rounded-md bg-white\">\r\n      <div className=\"p-4 border-b flex items-center justify-between\">\r\n        <p className=\"font-medium\">Filters</p>\r\n        {hasAnyFilters && (\r\n          <button\r\n            className=\"underline cursor-pointer\"\r\n            onClick={() => onClear()}\r\n            type=\"button\"\r\n          >\r\n            Clear\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      <ProductFilter title=\"Price\">\r\n        <PriceFilter\r\n          minPrice={filters.minPrice}\r\n          maxPrice={filters.maxPrice}\r\n          onMinPriceChange={(value) => onChange(\"minPrice\", value)}\r\n          onMaxPriceChange={(value) => onChange(\"maxPrice\", value)}\r\n        />\r\n      </ProductFilter>\r\n      <ProductFilter title=\"Tags\" className=\"border-b-0\">\r\n        <TagsFilter\r\n          value={filters.tags}\r\n          onChange={(value) => onChange(\"tags\", value)}\r\n        />\r\n      </ProductFilter>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductFilters;\r\n","size_bytes":2633},"src/modules/products/ui/components/product-list.tsx":{"content":"\"use client\";\r\n\r\nimport { useTRPC } from \"@/trpc/client\";\r\nimport { useSuspenseInfiniteQuery } from \"@tanstack/react-query\";\r\nimport React from \"react\";\r\nimport { useProductFilters } from \"../../hooks/use-product-filters\";\r\nimport ProductCard, { ProductCardSkeleton } from \"./product-card\";\r\nimport { DEFAULT_LIMIT } from \"@/constants\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { InboxIcon } from \"lucide-react\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface Props {\r\n  category?: string;\r\n  tenantSlug?: string;\r\n  narrowView?: boolean;\r\n}\r\n\r\nconst ProductList = ({ category, tenantSlug, narrowView }: Props) => {\r\n  const [filters] = useProductFilters();\r\n  const trpc = useTRPC();\r\n\r\n  const { data, hasNextPage, isFetchingNextPage, fetchNextPage } =\r\n    useSuspenseInfiniteQuery(\r\n      trpc.products.getMany.infiniteQueryOptions(\r\n        {\r\n          ...filters,\r\n          category,\r\n          tenantSlug,\r\n          limit: DEFAULT_LIMIT,\r\n        },\r\n        {\r\n          getNextPageParam: (lastPage) =>\r\n            lastPage.docs.length > 0 ? lastPage.nextPage : undefined,\r\n        }\r\n      )\r\n    );\r\n\r\n  if (data.pages?.[0]?.docs.length === 0) {\r\n    return (\r\n      <div className=\"border border-black border-dashed flex items-center justify-center p-8 flex-col gap-y-4 bg-white w-full rounded-lg\">\r\n        <InboxIcon />\r\n        <p className=\"text-base font-medium\">No products found</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={cn(\r\n          \"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4 gap-4\",\r\n          narrowView && \"lg:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-3\"\r\n        )}\r\n      >\r\n        {data?.pages.flatMap((page) =>\r\n          page.docs.map((product) => (\r\n            <ProductCard\r\n              key={product.id}\r\n              id={product.id}\r\n              name={product.name}\r\n              imageUrl={product.image?.url}\r\n              tenantSlug={product.tenant?.slug}\r\n              tenantImageUrl={product.tenant?.image?.url}\r\n              reviewRating={product.reviewRating}\r\n              reviewCount={product.reviewCount}\r\n              price={product.price}\r\n            />\r\n          ))\r\n        )}\r\n      </div>\r\n      <div className=\"flex justify-center pt-8\">\r\n        {hasNextPage && (\r\n          <Button\r\n            disabled={isFetchingNextPage}\r\n            onClick={() => fetchNextPage()}\r\n            className=\"font-medium disabled:opacity-50 text-base bg-white\"\r\n            variant=\"elevated\"\r\n          >\r\n            Load more\r\n          </Button>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductList;\r\n\r\nexport const ProductListSkeleton = ({ narrowView }: Props) => {\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4 gap-4\",\r\n        narrowView && \"lg:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-3\"\r\n      )}\r\n    >\r\n      {Array.from({ length: DEFAULT_LIMIT }).map((_, index) => (\r\n        <ProductCardSkeleton key={index} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","size_bytes":3145},"src/modules/products/ui/components/product-sort.tsx":{"content":"\"use client\";\r\n\r\nimport React from \"react\";\r\nimport { useProductFilters } from \"../../hooks/use-product-filters\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { sortValues } from \"../../search-params\";\r\n\r\ntype SortType = typeof sortValues[number]; // union of all sort values\r\n\r\nconst ProductSort = () => {\r\n  const [filters, setFilters] = useProductFilters();\r\n\r\n  const handleSortChange = (value: SortType) => {\r\n    console.log(\">>> ProductSort clicked:\", value);\r\n    setFilters({ ...filters, sort: value });\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex items-center gap-2\">\r\n      <Button\r\n        size=\"sm\"\r\n        className={cn(\r\n          \"rounded-full bg-white hover:bg-white\",\r\n          filters.sort !== \"curated\" &&\r\n            \"bg-transparent border-transparent hover:border-border hover:bg-transparent\"\r\n        )}\r\n        variant=\"secondary\"\r\n        onClick={() => handleSortChange(\"curated\")}\r\n      >\r\n        Curated\r\n      </Button>\r\n\r\n      <Button\r\n        size=\"sm\"\r\n        className={cn(\r\n          \"rounded-full bg-white hover:bg-white\",\r\n          filters.sort !== \"trending\" &&\r\n            \"bg-transparent border-transparent hover:border-border hover:bg-transparent\"\r\n        )}\r\n        variant=\"secondary\"\r\n        onClick={() => handleSortChange(\"trending\")}\r\n      >\r\n        Trending\r\n      </Button>\r\n\r\n      <Button\r\n        size=\"sm\"\r\n        className={cn(\r\n          \"rounded-full bg-white hover:bg-white\",\r\n          filters.sort !== \"hot_and_new\" &&\r\n            \"bg-transparent border-transparent hover:border-border hover:bg-transparent\"\r\n        )}\r\n        variant=\"secondary\"\r\n        onClick={() => handleSortChange(\"hot_and_new\")}\r\n      >\r\n        Hot & New\r\n      </Button>\r\n\r\n      {/* Example extra sort buttons */}\r\n      <Button\r\n        size=\"sm\"\r\n        className={cn(\r\n          \"rounded-full bg-white hover:bg-white\",\r\n          filters.sort !== \"price_asc\" &&\r\n            \"bg-transparent border-transparent hover:border-border hover:bg-transparent\"\r\n        )}\r\n        variant=\"secondary\"\r\n        onClick={() => handleSortChange(\"price_asc\")}\r\n      >\r\n        Price ↑\r\n      </Button>\r\n\r\n      <Button\r\n        size=\"sm\"\r\n        className={cn(\r\n          \"rounded-full bg-white hover:bg-white\",\r\n          filters.sort !== \"price_desc\" &&\r\n            \"bg-transparent border-transparent hover:border-border hover:bg-transparent\"\r\n        )}\r\n        variant=\"secondary\"\r\n        onClick={() => handleSortChange(\"price_desc\")}\r\n      >\r\n        Price ↓\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductSort;\r\n","size_bytes":2644},"src/modules/products/ui/components/tags-filter.tsx":{"content":"import { Checkbox } from \"@/components/ui/checkbox\";\r\nimport { DEFAULT_LIMIT } from \"@/constants\";\r\nimport { useTRPC } from \"@/trpc/client\";\r\nimport { useInfiniteQuery } from \"@tanstack/react-query\";\r\nimport { LoaderIcon } from \"lucide-react\";\r\nimport React from \"react\";\r\n\r\ninterface TagsFilterProps {\r\n  value?: string[] | null;\r\n  onChange: (value: string[]) => void;\r\n}\r\n\r\nconst TagsFilter = ({ value, onChange }: TagsFilterProps) => {\r\n  const trpc = useTRPC();\r\n  const { data, isLoading, fetchNextPage, hasNextPage, isFetchingNextPage } =\r\n    useInfiniteQuery(\r\n      trpc.tags.getMany.infiniteQueryOptions(\r\n        {\r\n          limit: DEFAULT_LIMIT,\r\n        },\r\n        {\r\n          getNextPageParam: (lastPage) => {\r\n            return lastPage.docs.length > 0 ? lastPage.nextPage : undefined;\r\n          },\r\n        }\r\n      )\r\n    );\r\n\r\n  const onClick = (tag: string) => {\r\n    if(value?.includes(tag)) {\r\n        onChange(value?.filter((t) => t !== tag) || [])\r\n    } else {\r\n        onChange([...(value || []), tag])\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-y-2\">\r\n      {isLoading ? (\r\n        <div className=\"flex items-center justify-center p-4\">\r\n          <LoaderIcon className=\"size-4 animate-spin\" />\r\n        </div>\r\n      ) : (\r\n        data?.pages.map((page) =>\r\n          page.docs.map((tag) => (\r\n            <div\r\n              key={tag.id}\r\n              className=\"flex items-center justify-between cursor-pointer\"\r\n              onClick={() => onClick(tag.name)}\r\n            >\r\n              <p className=\"font-medium\">{tag.name}</p>\r\n              <Checkbox\r\n                checked={value?.includes(tag.name)}\r\n                onCheckedChange={() => onClick(tag.name)}\r\n              />\r\n            </div>\r\n          ))\r\n        )\r\n      )}\r\n      {hasNextPage && (\r\n        <button\r\n          disabled={isFetchingNextPage}\r\n          onClick={() => fetchNextPage()}\r\n          className=\"underline font-medium text-start disabled:opacity-50 cursor-pointer\"\r\n        >\r\n            Load more...\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TagsFilter;","size_bytes":2136},"src/modules/products/ui/views/product-list-view.tsx":{"content":"import React, { Suspense } from \"react\";\r\nimport ProductSort from \"../components/product-sort\";\r\nimport ProductFilters from \"../components/product-filters\";\r\nimport ProductList, { ProductListSkeleton } from \"../components/product-list\";\r\n\r\ninterface Props {\r\n  category?: string;\r\n  tenantSlug?: string;\r\n  narrowView?: boolean;\r\n}\r\n\r\nconst ProductListView = ({ category, tenantSlug, narrowView }: Props) => {\r\n  return (\r\n    <div className=\"px-4 lg:px-8 py-8 flex flex-col gap-4\">\r\n      <div className=\"flex flex-col lg:flex-row lg:items-center gap-y-2 lg:gap-y-0 justify-between\">\r\n        <p className=\"text-2xl font-medium\">Curated for you</p>\r\n        <ProductSort />\r\n      </div>\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-6 xl:grid-cols-8 gap-y-6 gap-x-12\">\r\n        <div className=\"lg:col-span-2 xl:col-span-2\">\r\n          <ProductFilters />\r\n        </div>\r\n\r\n        <div className=\"lg:col-span-4 xl:col-span-6\">\r\n          <Suspense fallback={<ProductListSkeleton narrowView={narrowView} />}>\r\n            <ProductList category={category} tenantSlug={tenantSlug} narrowView={narrowView} />\r\n          </Suspense>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductListView;\r\n","size_bytes":1225},"src/modules/products/ui/views/product-view.tsx":{"content":"\"use client\";\r\n\r\nimport dynamic from \"next/dynamic\";\r\nimport StarRatings from \"@/components/star-rating\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Progress } from \"@/components/ui/progress\";\r\nimport { formatCurrency, generateTenantUrl } from \"@/lib/utils\";\r\nimport { useTRPC } from \"@/trpc/client\";\r\nimport { useSuspenseQuery } from \"@tanstack/react-query\";\r\nimport { CheckCheckIcon, LinkIcon, StarIcon } from \"lucide-react\";\r\nimport Image from \"next/image\";\r\nimport Link from \"next/link\";\r\nimport React, { Fragment, useState } from \"react\";\r\nimport { toast } from \"sonner\";\r\n\r\nconst CartButton = dynamic(\r\n  () => import(\"../components/cart-button\").then((mod) => mod.CartButton),\r\n  {\r\n    ssr: false,\r\n    loading: () => (\r\n      <Button disabled className=\"flex-1 bg-pink-200\">\r\n        Loading...\r\n      </Button>\r\n    ),\r\n  }\r\n);\r\n\r\ninterface ProductViewProps {\r\n  productId: string;\r\n  tenantSlug: string;\r\n}\r\n\r\nconst ProductView = ({ productId, tenantSlug }: ProductViewProps) => {\r\n  const trpc = useTRPC();\r\n  const { data } = useSuspenseQuery(\r\n    trpc.products.getOne.queryOptions({ id: productId })\r\n  );\r\n\r\n  const [isCopied, setIsCopied] = useState(false);\r\n  return (\r\n    <div className=\"px-4 lg:px-12 py-10\">\r\n      <div className=\"border rounded-sm bg-white overflow-hidden\">\r\n        <div className=\"relative aspect-[3.9] border-b\">\r\n          <Image\r\n            src={data.cover?.url || \"/placeholder.png\"}\r\n            alt={data.name}\r\n            fill\r\n            className=\"object-cover\"\r\n          />\r\n        </div>\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-6\">\r\n          <div className=\"col-span-4\">\r\n            <div className=\"p-6\">\r\n              <h1 className=\"text-4xl font-medium\">{data.name}</h1>\r\n            </div>\r\n            <div className=\"border-y flex\">\r\n              <div className=\"px-6 py-4 flex items-center justofy-center border-r\">\r\n                <div className=\"relative px-2 py-1 border bg-pink-400 w-fit\">\r\n                  <p className=\"text-base font-medium\">\r\n                    {formatCurrency(data.price)}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"px-6 py-4 flex items-center justify-center lg:border-r\">\r\n                <Link\r\n                  href={generateTenantUrl(tenantSlug)}\r\n                  className=\"flex items-center gap-2\"\r\n                >\r\n                  {data.tenant.image?.url && (\r\n                    <Image\r\n                      src={data.tenant.image.url}\r\n                      alt={data.tenant.name}\r\n                      width={20}\r\n                      height={20}\r\n                      className=\"rounded-full border shrink-0 size-[20px]\"\r\n                    />\r\n                  )}\r\n                  <p className=\"text-base underline font-medium\">\r\n                    {data.tenant.name}\r\n                  </p>\r\n                </Link>\r\n              </div>\r\n\r\n              <div className=\"hidden lg:flex px-6 py-4 items-center justify-center\">\r\n                <div className=\"flex items-center gap-1\">\r\n                  <StarRatings\r\n                    rating={data.reviewRating}\r\n                    iconClassName=\"size-4\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"block lg:hideen px-4 py-6 items-center justify-center border-b\">\r\n              <div className=\"flex items-center gap-1\">\r\n                <StarRatings\r\n                  rating={data.reviewRating}\r\n                  iconClassName=\"size-4\"\r\n                />\r\n                <p className=\"text-base font-medium\">\r\n                  {data.reviewCount} ratings\r\n                </p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"p-6\">\r\n              {data.description ? (\r\n                <p>{data.description}</p>\r\n              ) : (\r\n                <p className=\"font-medium text-muted-foreground italic\">\r\n                  No description provided\r\n                </p>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"col-span-2\">\r\n            <div className=\"border-t lg:border-t-0 lg:border-l h-full\">\r\n              <div className=\"flex flex-col gap-4 p-6 border-b\">\r\n                <div className=\"flex flex-row items-center gap-2\">\r\n                  <CartButton\r\n                    isPurchased={data.isPurchased}\r\n                    productId={data.id}\r\n                    tenantSlug={tenantSlug}\r\n                  />\r\n                  <Button\r\n                    variant=\"elevated\"\r\n                    className=\"size-12\"\r\n                    onClick={() => {\r\n                      navigator.clipboard.writeText(window.location.href);\r\n                      toast.success(\"URL copied to clipboard\");\r\n\r\n                      setTimeout(() => {\r\n                        setIsCopied(false);\r\n                      }, 1000);\r\n                    }}\r\n                    disabled={false}\r\n                  >\r\n                    {isCopied ? <CheckCheckIcon /> : <LinkIcon />}\r\n                  </Button>\r\n                </div>\r\n\r\n                <p className=\"text-center font-medium\">\r\n                  {data.refundPolicy === \"no-refunds\"\r\n                    ? \"No refunds\"\r\n                    : `${data.refundPolicy} money background gurantee`}\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"p-6\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <h3 className=\"text-xl font-medium\">Ratings</h3>\r\n                  <div className=\"flex items-center gap-x-1 font-medium\">\r\n                    <StarIcon className=\"size-4 fill-black\" />\r\n                    <p>({data.reviewRating})</p>\r\n                    <p className=\"text-base\">({data.reviewCount}) ratings</p>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"grid grid-cols-[auto_1fr_auto] gap-3 mt-4\">\r\n                  {[5, 4, 3, 2, 1].map((stars) => (\r\n                    <Fragment key={stars}>\r\n                      <div className=\"font-medium\">\r\n                        {stars} {stars === 1 ? \"star\" : \"stars\"}\r\n                      </div>\r\n                      <Progress\r\n                        value={data.ratingDistribution[stars]}\r\n                        className=\"h-[1lh]\"\r\n                      />\r\n                      <div className=\"font-medium\">\r\n                        {data.ratingDistribution[stars]}%\r\n                      </div>\r\n                    </Fragment>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductView;\r\n","size_bytes":6778},"src/modules/tenants/ui/components/footer.tsx":{"content":"import { cn } from \"@/lib/utils\";\r\nimport { Poppins } from \"next/font/google\";\r\nimport Link from \"next/link\";\r\n\r\nconst poppins = Poppins({\r\n  subsets: [\"latin\"],\r\n  weight: [\"700\"],\r\n});\r\n\r\nexport const Footer = () => {\r\n  return (\r\n    <footer className=\"border-t font-medium bg-white\">\r\n      <div className=\"max-w-(--breakpoint-xl) mx-auto flex justify-between items-center h-full px-4 py-6 lg:px-12\">\r\n        <p>Powered by</p>\r\n        <Link href=\"/\">\r\n          <span className={cn(\"text-2xl font-semibold\", poppins.className)}>\r\n            funroad\r\n          </span>\r\n        </Link>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n","size_bytes":632},"src/modules/tenants/ui/components/navbar.tsx":{"content":"\"use client\";\r\n\r\nimport { useTRPC } from \"@/trpc/client\";\r\nimport { useSuspenseQuery } from \"@tanstack/react-query\";\r\nimport Link from \"next/link\";\r\nimport Image from \"next/image\";\r\nimport React from \"react\";\r\nimport { generateTenantUrl } from \"@/lib/utils\";\r\nimport dynamic from \"next/dynamic\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { ShoppingCartIcon } from \"lucide-react\";\r\n\r\nconst CheckoutButton = dynamic(\r\n  () =>\r\n    import(\"@/modules/checkout/ui/components/checkout-button\").then(\r\n      (mod) => mod.CheckoutButton\r\n    ),\r\n  {\r\n    ssr: false,\r\n    loading: () => (\r\n      <Button disabled className=\"bg-white\">\r\n        <ShoppingCartIcon className=\"text-black\" />\r\n      </Button>\r\n    ),\r\n  }\r\n);\r\n\r\ninterface Props {\r\n  slug: string;\r\n}\r\n\r\nconst Navbar = ({ slug }: Props) => {\r\n  const trpc = useTRPC();\r\n  const { data } = useSuspenseQuery(trpc.tenants.getOne.queryOptions({ slug }));\r\n\r\n  return (\r\n    <nav className=\"h-20 border-b font-medium bg-white\">\r\n      <div className=\"max-w-(--breakpoint-xl) mx-auto flex justify-between items-center h-full px-4 lg:px-12\">\r\n        <Link\r\n          href={generateTenantUrl(slug)}\r\n          className=\"flex items-center gap-2\"\r\n        >\r\n          {data.image?.url && (\r\n            <Image\r\n              src={data.image?.url}\r\n              width={32}\r\n              height={32}\r\n              className=\"rounded-full border shrink-0 size-[32px]\"\r\n              alt={slug}\r\n            />\r\n          )}\r\n          <p className=\"text-xl\">{data.name}</p>\r\n        </Link>\r\n\r\n        <CheckoutButton tenantSlug={slug} />\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n\r\nexport const NavbarSkeleton = () => {\r\n  return (\r\n    <nav className=\"h-20 border-b font-medium bg-white\">\r\n      <div className=\"max-w-(--breakpoint-xl) mx-auto flex justify-between items-center h-full px-4 lg:px-12\">\r\n        {/* <p className=\"text-xl\">{data.name}</p> */}\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n","size_bytes":1980},"src/app/(app)/(home)/[category]/[subcategory]/page.tsx":{"content":"import { loadProductFilters } from \"@/modules/products/search-params\";\r\nimport ProductListView from \"@/modules/products/ui/views/product-list-view\";\r\nimport { getQueryClient, trpc } from \"@/trpc/server\";\r\nimport { dehydrate, HydrationBoundary } from \"@tanstack/react-query\";\r\nimport { SearchParams } from \"nuqs/server\";\r\nimport React from \"react\";\r\n\r\ninterface Props {\r\n  params: Promise<{\r\n    subcategory: string;\r\n  }>;\r\n  searchParams: Promise<SearchParams>;\r\n}\r\n\r\nconst SubcategoryPage = async ({ params, searchParams }: Props) => {\r\n  const { subcategory } = await params;\r\n  const filters = await loadProductFilters(searchParams);\r\n\r\n  const queryClient = getQueryClient();\r\n  void queryClient.prefetchQuery(\r\n    trpc.products.getMany.queryOptions({\r\n      category: subcategory,\r\n      ...filters,\r\n    })\r\n  );\r\n\r\n  return (\r\n    <HydrationBoundary state={dehydrate(queryClient)}>\r\n      <ProductListView category={subcategory} />\r\n    </HydrationBoundary>\r\n  );\r\n};\r\n\r\nexport default SubcategoryPage;\r\n","size_bytes":1013},"src/app/(app)/(library)/library/[productId]/page.tsx":{"content":"import { getQueryClient, trpc } from \"@/trpc/server\";\r\nimport { HydrationBoundary } from \"@tanstack/react-query\";\r\nimport React from \"react\";\r\nimport { dehydrate } from \"@tanstack/react-query\";\r\nimport ProductView from \"@/modules/library/ui/views/product-view\";\r\n\r\ninterface Props {\r\n  params: { productId: string }; // ✅ correct\r\n}\r\n\r\nconst ProductIdPage = async ({ params }: Props) => {\r\n  const { productId } = params;\r\n\r\n  const queryClient = getQueryClient();\r\n  void queryClient.prefetchQuery(\r\n    trpc.library.getOne.queryOptions({\r\n        productId\r\n    })\r\n  );\r\n  \r\n  return (\r\n    <HydrationBoundary state={dehydrate(queryClient)}>\r\n      <ProductView productId={productId} />\r\n    </HydrationBoundary>\r\n  );\r\n};\r\n\r\nexport default ProductIdPage;\r\n","size_bytes":762},"src/app/(app)/api/stripe/webhooks/route.ts":{"content":"import { stripe } from \"@/lib/stripe\";\r\nimport { ExpandListItem } from \"@/modules/checkout/types\";\r\nimport { NextResponse } from \"next/server\";\r\nimport { getPayload } from \"payload\";\r\nimport Stripe from \"stripe\";\r\nimport config from \"@payload-config\";\r\n\r\nexport async function POST(req: Request) {\r\n  let event: Stripe.Event;\r\n\r\n  try {\r\n    const body = await req.text();\r\n\r\n    event = stripe.webhooks.constructEvent(\r\n      body,\r\n      req.headers.get(\"stripe-signature\") as string,\r\n      process.env.STRIPE_WEBHOOK_SECRET!\r\n    );\r\n  } catch (error) {\r\n    const errorMessage =\r\n      error instanceof Error ? error.message : \"Unknown error\";\r\n\r\n    if (!(error instanceof Error)) {\r\n      console.log(error);\r\n    }\r\n    return NextResponse.json(\r\n      { message: `Webhook Error: ${errorMessage}` },\r\n      { status: 400 }\r\n    );\r\n  }\r\n\r\n  console.log(\"✅ Webhook received:\", event.id);\r\n\r\n  const permittedEvents: string[] = [\"checkout.session.completed\"];\r\n\r\n  const payload = await getPayload({ config });\r\n\r\n  if (permittedEvents.includes(event.type)) {\r\n    try {\r\n      switch (event.type) {\r\n        case \"checkout.session.completed\": {\r\n          const data = event.data.object as Stripe.Checkout.Session;\r\n\r\n          if (!data.metadata?.userId) {\r\n            throw new Error(\"User ID is required\");\r\n          }\r\n\r\n          const user = await payload.findByID({\r\n            collection: \"users\",\r\n            id: data.metadata.userId,\r\n          });\r\n\r\n          if (!user) {\r\n            throw new Error(\"User not found\");\r\n          }\r\n\r\n          const expandedSession = await stripe.checkout.sessions.retrieve(\r\n            data.id,\r\n            {\r\n              expand: [\"line_items.data.price.product\"],\r\n            }\r\n          );\r\n\r\n          if (expandedSession.line_items?.data?.length) {\r\n            const lineItems = expandedSession.line_items\r\n              .data as unknown as ExpandListItem[];\r\n\r\n            for (const item of lineItems) {\r\n              await payload.create({\r\n                collection: \"orders\",\r\n                data: {\r\n                  stripeCheckoutSessionId: data.id,\r\n                  user: user.id,\r\n                  product: item.price.product.metadata.id,\r\n                  name: item.price.product.name,\r\n                },\r\n              });\r\n            }\r\n          }\r\n          break;\r\n        }\r\n\r\n        default:\r\n          throw new Error(`Unhandled event: ${event.type}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"❌ Webhook handler error:\", error);\r\n      return NextResponse.json(\r\n        { message: \"Webhook handler failed\" },\r\n        { status: 500 }\r\n      );\r\n    }\r\n  }\r\n\r\n  return NextResponse.json({ message: \"✅ Received\" }, { status: 200 });\r\n}","size_bytes":2755},"src/app/(app)/api/trpc/[trpc]/route.ts":{"content":"import { fetchRequestHandler } from '@trpc/server/adapters/fetch';\r\nimport { createTRPCContext } from '@/trpc/init';\r\nimport { appRouter } from '@/trpc/routers/_app';\r\nconst handler = (req: Request) =>\r\n  fetchRequestHandler({\r\n    endpoint: '/api/trpc',\r\n    req,\r\n    router: appRouter,\r\n    createContext: createTRPCContext,\r\n  });\r\nexport { handler as GET, handler as POST };","size_bytes":379},"src/modules/home/ui/components/search-filters/breadcrumbs-navigation.tsx":{"content":"import {\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  BreadcrumbLink,\r\n  BreadcrumbList,\r\n  BreadcrumbPage,\r\n  BreadcrumbSeparator,\r\n} from \"@/components/ui/breadcrumb\";\r\nimport Link from \"next/link\";\r\nimport React from \"react\";\r\n\r\ninterface Props {\r\n  activeCategoryName?: string | null;\r\n  activeCategory?: string | null;\r\n  activeSubcategoryName?: string | null;\r\n}\r\n\r\nconst BreadcrumbsNavigation = ({\r\n  activeCategoryName,\r\n  activeCategory,\r\n  activeSubcategoryName,\r\n}: Props) => {\r\n  if (!activeCategoryName || activeCategory === \"all\") return null;\r\n  return (\r\n    <Breadcrumb>\r\n      <BreadcrumbList>\r\n        {activeSubcategoryName ? (\r\n          <>\r\n            <BreadcrumbItem>\r\n              <BreadcrumbLink\r\n                asChild\r\n                className=\"text-xl font-medium underline text-primary\"\r\n              >\r\n                <Link href={`/${activeCategory}`}>{activeCategoryName}</Link>\r\n              </BreadcrumbLink>\r\n            </BreadcrumbItem>\r\n            <BreadcrumbSeparator className=\"text-primary font-medium text-lg\">\r\n            /\r\n            </BreadcrumbSeparator>\r\n            <BreadcrumbItem>\r\n              <BreadcrumbPage\r\n                className=\"text-xl font-medium\"\r\n              >\r\n                {activeSubcategoryName}\r\n              </BreadcrumbPage>\r\n            </BreadcrumbItem>\r\n          </>\r\n        ) : (\r\n                      <BreadcrumbItem>\r\n              <BreadcrumbPage\r\n                className=\"text-xl font-medium\"\r\n              >\r\n                {activeCategoryName}\r\n              </BreadcrumbPage>\r\n            </BreadcrumbItem>\r\n        )}\r\n      </BreadcrumbList>\r\n    </Breadcrumb>\r\n  );\r\n};\r\n\r\nexport default BreadcrumbsNavigation;\r\n","size_bytes":1712},"src/modules/home/ui/components/search-filters/categories.tsx":{"content":"\"use client\";\r\n\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport CategoryDropdown from \"./categoryDropdown\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { ListFilterIcon } from \"lucide-react\";\r\nimport CategoriesSidebar from \"./categoriesSidebar\";\r\nimport { CategoriesGetManyOutput } from \"@/modules/categories/types\";\r\nimport { useParams } from \"next/navigation\";\r\n\r\ninterface CategoriesProps {\r\n  data: CategoriesGetManyOutput;\r\n}\r\n\r\nconst Categories = ({ data }: CategoriesProps) => {\r\n  const params = useParams()\r\n\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const measureRef = useRef<HTMLDivElement>(null);\r\n  const viewAllRef = useRef<HTMLDivElement>(null);\r\n\r\n  const [visibleCount, setVisibleCount] = useState(data.length);\r\n  const [isAnyHovered, setIsAnyHovered] = useState(false);\r\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n\r\n  const categoryParam = params.category as string | undefined\r\n  const activeCategory = categoryParam || \"all\";\r\n\r\n  const activeCategoryIndex = data.findIndex(\r\n    (cat) => cat.slug === activeCategory\r\n  );\r\n  const isActiveCategoryHidden =\r\n    activeCategoryIndex >= visibleCount && activeCategoryIndex !== -1;\r\n\r\n  useEffect(() => {\r\n    const calculateVisible = () => {\r\n      if (!containerRef.current || !measureRef.current || !viewAllRef.current)\r\n        return;\r\n\r\n      const containerWidth = containerRef.current.offsetWidth;\r\n      const viewAllWidth = viewAllRef.current.offsetWidth;\r\n      const availableWidth = containerWidth - viewAllWidth;\r\n\r\n      const items = Array.from(measureRef.current.children);\r\n      let totalWidth = 0;\r\n      let visible = 0;\r\n\r\n      for (const item of items) {\r\n        const width = item.getBoundingClientRect().width;\r\n\r\n        if (totalWidth + width > availableWidth) break;\r\n        totalWidth += width;\r\n        visible++;\r\n      }\r\n\r\n      setVisibleCount(visible);\r\n    };\r\n\r\n    const resizeObserver = new ResizeObserver(calculateVisible);\r\n    resizeObserver.observe(containerRef.current!);\r\n\r\n    return () => resizeObserver.disconnect();\r\n  }, [data.length]);\r\n\r\n  return (\r\n    <div className=\"relative w-full\">\r\n      <CategoriesSidebar\r\n        open={isSidebarOpen}\r\n        onOpenChange={setIsSidebarOpen}\r\n      />\r\n\r\n      <div\r\n        ref={measureRef}\r\n        className=\"absolute opacity-0 pointer-events-none flex\"\r\n        style={{ position: \"fixed\", top: -9999, left: -9999 }}\r\n      >\r\n        {data.map((category) => (\r\n          <div key={category.id}>\r\n            <CategoryDropdown\r\n              category={category}\r\n              isActive={activeCategory === category.slug}\r\n              isNavigationHovered={false}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Visible container */}\r\n      <div\r\n        ref={containerRef}\r\n        onMouseEnter={() => setIsAnyHovered(true)}\r\n        onMouseLeave={() => setIsAnyHovered(false)}\r\n        className=\"flex flex-nowrap items-center\"\r\n      >\r\n        {data.slice(0, visibleCount).map((category) => (\r\n          <div key={category.id}>\r\n            <CategoryDropdown\r\n              category={category}\r\n              isActive={activeCategory === category.slug}\r\n              isNavigationHovered={isAnyHovered}\r\n            />\r\n          </div>\r\n        ))}\r\n\r\n        <div ref={viewAllRef} className=\"shrink-0\">\r\n          <Button\r\n            className={cn(\r\n              \"h-11 px-4 bg-transparent border-transparent rounded-full hover:bg-white hover:border-primary text-black\",\r\n              isActiveCategoryHidden &&\r\n                !isAnyHovered &&\r\n                \"bg-white border-primary\"\r\n            )}\r\n            onClick={() => setIsSidebarOpen(true)}\r\n          >\r\n            View All\r\n            <ListFilterIcon className=\"ml-2\" />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Categories;\r\n","size_bytes":3952},"src/modules/home/ui/components/search-filters/categoriesSidebar.tsx":{"content":"\"use client\";\r\n\r\nimport React, { useState } from \"react\";\r\nimport {\r\n  Sheet,\r\n  SheetContent,\r\n  SheetHeader,\r\n  SheetTitle,\r\n} from \"@/components/ui/sheet\";\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport { ChevronLeftIcon, ChevronRightIcon } from \"lucide-react\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { useTRPC } from \"@/trpc/client\";\r\nimport { useQuery } from \"@tanstack/react-query\";\r\nimport { CustomCategory } from \"@/app/(app)/(home)/types\";\r\nimport { CategoriesGetManyOutput } from \"@/modules/categories/types\";\r\n\r\ninterface CategoriesSidebarProps {\r\n  open: boolean;\r\n  onOpenChange: (open: boolean) => void;\r\n}\r\n\r\nconst CategoriesSidebar = ({\r\n  open,\r\n  onOpenChange,\r\n}: CategoriesSidebarProps) => {\r\n  const trpc = useTRPC()\r\n  const {data} = useQuery(trpc.categories.getMany.queryOptions())\r\n\r\n  const router = useRouter();\r\n\r\nconst [parentCategories, setParentCategories] = useState<CategoriesGetManyOutput | null>(null);\r\n\r\nconst [selectedCategory, setSelectedCategory] = useState<CategoriesGetManyOutput[1] | null>(null);\r\n\r\n  const currentCategories = parentCategories ?? data ?? [];\r\n\r\n  const handleOpenChange = (open: boolean) => {\r\n    setSelectedCategory(null);\r\n    setParentCategories(null);\r\n    onOpenChange(open);\r\n  };\r\n\r\n  const handleCategoryClick = (category: CategoriesGetManyOutput[1]) => {\r\n    if (category.subcategories && category.subcategories.length > 0) {\r\n      setParentCategories(category.subcategories as CategoriesGetManyOutput);\r\n      setSelectedCategory(category);\r\n    } else {\r\n      if (parentCategories && selectedCategory) {\r\n        router.push(`/${selectedCategory.slug}/${category.slug}`);\r\n      } else {\r\n        if (category.slug === \"all\") {\r\n          router.push(\"/\");\r\n        } else {\r\n          router.push(`/${category.slug}`);\r\n        }\r\n      }\r\n\r\n      handleOpenChange(false);\r\n    }\r\n  };\r\n\r\n  const handleBackClick = () => {\r\n    if (parentCategories) {\r\n      setParentCategories(null);\r\n      setSelectedCategory(null);\r\n    }\r\n  };\r\n\r\n  const backgroundColor = selectedCategory?.color || \"white\";\r\n\r\n  return (\r\n    <Sheet open={open} onOpenChange={handleOpenChange}>\r\n      <SheetContent\r\n        side=\"left\"\r\n        className=\"p-0 transition-none\"\r\n        style={{ backgroundColor: backgroundColor }}\r\n      >\r\n        <SheetHeader className=\"p-4 border-b\">\r\n          <SheetTitle>Categories</SheetTitle>\r\n        </SheetHeader>\r\n\r\n        <ScrollArea className=\"h-[calc(100vh-64px)]\">\r\n          <div className=\"flex flex-col pb-2\">\r\n            {parentCategories && (\r\n              <button\r\n                onClick={handleBackClick}\r\n                className=\"w-full text-left p-4 hover:bg-black hover:text-white flex items-center text-base font-medium\"\r\n              >\r\n                <ChevronLeftIcon className=\"size-4 mr-2\" />\r\n                Back\r\n              </button>\r\n            )}\r\n            {currentCategories?.map((category: CustomCategory) => (\r\n              <button\r\n                key={category.slug}\r\n                className=\"w-full text-left p-4 hover:bg-black hover:text-white flex justify-between items-center text-base font-medium cursor-pointer\"\r\n                onClick={() => handleCategoryClick(category)}\r\n              >\r\n                {category.name}\r\n                {category.subcategories &&\r\n                  category.subcategories.length > 0 && (\r\n                    <ChevronRightIcon className=\"size-4\" />\r\n                  )}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </ScrollArea>\r\n      </SheetContent>\r\n    </Sheet>\r\n  );\r\n};\r\n\r\nexport default CategoriesSidebar;\r\n","size_bytes":3663},"src/modules/home/ui/components/search-filters/categoryDropdown.tsx":{"content":"\"use client\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport SubcategoryMenu from \"./subcategoryMenu\";\r\nimport Link from \"next/link\";\r\nimport { CategoriesGetManyOutput } from \"@/modules/categories/types\";\r\n\r\ninterface CategoryDropdownProps {\r\n  category: CategoriesGetManyOutput[1];\r\n  isActive?: boolean;\r\n  isNavigationHovered?: boolean;\r\n}\r\n\r\nconst CategoryDropdown = ({\r\n  category,\r\n  isActive,\r\n  isNavigationHovered,\r\n}: CategoryDropdownProps) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const dropdownRef = useRef<HTMLDivElement>(null);\r\n\r\n  const onMouseEnter = () => {\r\n    if (category.subcategories) {\r\n      setIsOpen(true);\r\n    }\r\n  };\r\n\r\n  const onMouseLeave = () => setIsOpen(false);\r\n\r\n  // const toggleDropdown = () => {\r\n  //   if(category.subcategories?.docs?.length) {\r\n  //     setIsOpen(!isOpen)\r\n  //   }\r\n  // }\r\n\r\n  return (\r\n    <div\r\n      className=\"relative\"\r\n      ref={dropdownRef}\r\n      onMouseEnter={onMouseEnter}\r\n      onMouseLeave={onMouseLeave}\r\n      // onClick={toggleDropdown}\r\n    >\r\n      <div className=\"relative\">\r\n        <Button\r\n          variant=\"elevated\"\r\n          className={cn(\r\n            \"h-11 px-4 bg-transparent border-transparent rounded-full hover:bg-white hover:border-primary text-black\",\r\n            isActive && !isNavigationHovered && \"bg-white border-primary\",\r\n            isOpen &&\r\n              \"bg-white border-primary shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] translate-x-[4px] translate-y-[4px]\"\r\n          )}\r\n        >\r\n          <Link href={`/${category.slug === \"all\" ? \"\" : category.slug}`}>\r\n            {category.name}\r\n          </Link>\r\n        </Button>\r\n        {category.subcategories && category?.subcategories.length > 0 && (\r\n          <div\r\n            className={cn(\r\n              \"absolute left-1/2 -translate-x-1/2 w-0 h-0 border-l-[10px] border-r-[10px] border-b-[10px] border-l-transparent border-r-transparent border-b-black transition-opacity\",\r\n              isOpen ? \"opacity-100\" : \"opacity-0\"\r\n            )}\r\n            style={{ top: \"120%\", zIndex: 200 }}\r\n          />\r\n        )}\r\n      </div>\r\n\r\n      <SubcategoryMenu category={category} isOpen={isOpen} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CategoryDropdown;\r\n","size_bytes":2334},"src/modules/home/ui/components/search-filters/index.tsx":{"content":"\"use client\";\r\n\r\nimport React from \"react\";\r\nimport SearchInput from \"./search-input\";\r\nimport Categories from \"./categories\";\r\nimport { useTRPC } from \"@/trpc/client\";\r\nimport { useSuspenseQuery } from \"@tanstack/react-query\";\r\nimport { useParams } from \"next/navigation\";\r\nimport { DEFAULT_BG_COLOR } from \"@/modules/home/constants\";\r\nimport BreadcrumbsNavigation from \"./breadcrumbs-navigation\";\r\n\r\nconst SearchFilters = () => {\r\n  const trpc = useTRPC();\r\n  const { data } = useSuspenseQuery(trpc.categories.getMany.queryOptions());\r\n\r\n  const params = useParams();\r\n  const categoryParam = params.category as string | undefined;\r\n  const activeCategory = categoryParam || \"all\";\r\n\r\n  const activeCategoryData = data.find(\r\n    (category) => category.slug === activeCategory\r\n  );\r\n  const activeCategoryColor = activeCategoryData?.color || DEFAULT_BG_COLOR;\r\n  const activeCategoryName = activeCategoryData?.name || null;\r\n\r\n  const activeSubcategory = params.subcategory as string | undefined;\r\n  const activeSubcategoryName =\r\n    activeCategoryData?.subcategories?.find(\r\n      (subcategory) => subcategory.slug === activeSubcategory\r\n    )?.name || null;\r\n\r\n  return (\r\n    <div\r\n      className=\"px-4 lg:px-12 py-8 border-b flex flex-col gap-4 w-full\"\r\n      style={{\r\n        backgroundColor: activeCategoryColor,\r\n      }}\r\n    >\r\n      <SearchInput />\r\n      <div className=\"hidden lg:block\">\r\n        <Categories data={data} />\r\n      </div>\r\n      <BreadcrumbsNavigation\r\n        activeCategory={activeCategory}\r\n        activeCategoryName={activeCategoryName}\r\n        activeSubcategoryName={activeSubcategoryName}\r\n      />{\" \"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchFilters;\r\n\r\nexport const SearchFiltersSkeleton = () => {\r\n  return (\r\n    <div\r\n      className=\"px-4 lg:px-12 py-8 border-b flex flex-col gap-4 w-full\"\r\n      style={{\r\n        backgroundColor: \"#F5F5F5\",\r\n      }}\r\n    >\r\n      <SearchInput disabled />\r\n      <div className=\"hidden lg:block\">\r\n        <div className=\"h-11\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","size_bytes":2059},"src/modules/home/ui/components/search-filters/search-input.tsx":{"content":"\"use client\";\r\n\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { BookmarkCheckIcon, ListFilterIcon, SearchIcon } from \"lucide-react\";\r\nimport React, { useState } from \"react\";\r\nimport CategoriesSidebar from \"./categoriesSidebar\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { useTRPC } from \"@/trpc/client\";\r\nimport { useQuery } from \"@tanstack/react-query\";\r\nimport Link from \"next/link\";\r\n\r\ninterface Props {\r\n  disabled?: boolean;\r\n}\r\n\r\nconst SearchInput = ({ disabled }: Props) => {\r\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n\r\n  const trpc = useTRPC();\r\n  const session = useQuery(trpc.auth.session.queryOptions());\r\n  return (\r\n    <div className=\"flex items-center gap-2 w-full\">\r\n      <CategoriesSidebar open={isSidebarOpen} onOpenChange={setIsSidebarOpen} />\r\n      <div className=\"relative w-full\">\r\n        <SearchIcon className=\"absolute left-3 top-1/2 -translate-y-1/2 size-4 text-neutral-500\" />\r\n        <Input\r\n          className=\"pl-8\"\r\n          placeholder=\"Search products\"\r\n          disabled={disabled}\r\n        />\r\n      </div>\r\n\r\n      <Button\r\n        variant=\"elevated\"\r\n        className=\"size-12 shrink-0 flex lg:hidden\"\r\n        onClick={() => setIsSidebarOpen(true)}\r\n      >\r\n        <ListFilterIcon />\r\n      </Button>\r\n\r\n      {session.data?.user && (\r\n        <Button asChild variant=\"elevated\">\r\n          <Link prefetch href=\"/library\">\r\n            <BookmarkCheckIcon />\r\n            Library\r\n          </Link>\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n\r\nexport const SearchFiltersLoading = () => {\r\n  return (\r\n    <div\r\n      className=\"px-4 lg:px-12 py-8 border-b flex flex-col gap-4 w-full\"\r\n      style={{\r\n        backgroundColor: \"#F5F5F5\",\r\n      }}\r\n    >\r\n      <SearchInput />\r\n      <div className=\"hidden lg:block\">\r\n        <div className=\"h-11\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","size_bytes":1923},"src/modules/home/ui/components/search-filters/subcategoryMenu.tsx":{"content":"import { Category } from \"@/payload-types\";\r\nimport Link from \"next/link\";\r\nimport React from \"react\";\r\nimport { CategoriesGetManyOutput } from \"@/modules/categories/types\";\r\n\r\ninterface SubcategoryMenuProps {\r\n  category: CategoriesGetManyOutput[1];\r\n  isOpen: boolean;\r\n}\r\n\r\nconst SubcategoryMenu = ({\r\n  category,\r\n  isOpen,\r\n}: SubcategoryMenuProps) => {\r\n  if (\r\n    !isOpen ||\r\n    !category.subcategories ||\r\n    category.subcategories.length === 0\r\n  ) {\r\n    return null;\r\n  }\r\n\r\n  const backgroundColor = category.color || \"#F5F5F5\";\r\n\r\n  return (\r\n    <div\r\n      className=\"absolute z-100 mt-2\"\r\n      style={{ top: \"100%\", left: 0 }}\r\n    >\r\n      <div className=\"h-3 w-60\" />\r\n      <div\r\n        className=\"w-60 text-black rounded-md overflow-hidden border shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] -translate-x-[2px] -translate-y-[2px]\"\r\n        style={{ backgroundColor }}\r\n      >\r\n        <div>\r\n          {category.subcategories?.map((subcategory: Category) => (\r\n            <Link\r\n              href={`/${category.slug}/${subcategory.slug}`}\r\n              key={subcategory.slug}\r\n              className=\"w-full text-left p-3 hover:bg-black hover:text-white flex justify-between items-center underline font-medium\"\r\n            >\r\n              {subcategory.name}\r\n            </Link>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SubcategoryMenu;\r\n","size_bytes":1408},"src/modules/home/ui/components/search-filters/use-dropdown-position.ts":{"content":"// use-dropdown-position.ts\r\nimport { RefObject } from \"react\";\r\n\r\nexport const UseDropdownPosition = (\r\n  ref: RefObject<HTMLDivElement | null> | RefObject<HTMLDivElement>\r\n) => {\r\n  const getDropdownPosition = () => {\r\n    if (!ref.current) return { top: 0, left: 0 };\r\n\r\n    const rect = ref.current.getBoundingClientRect();\r\n    const dropdownWidth = 240;\r\n\r\n    let left = rect.left + window.scrollX;\r\n    const top = rect.bottom + window.scrollY;\r\n\r\n    if (left + dropdownWidth > window.innerWidth) {\r\n      left = rect.right + window.scrollX - dropdownWidth;\r\n\r\n      if (left < 0) {\r\n        left = window.innerWidth - dropdownWidth - 16;\r\n      }\r\n    }\r\n\r\n    if (left < 0) {\r\n      left = 16;\r\n    }\r\n\r\n    return { top, left };\r\n  };\r\n\r\n  return { getDropdownPosition };  \r\n};\r\n","size_bytes":791},"src/app/(app)/(tenants)/tenants/[slug]/(checkout)/layout.tsx":{"content":"import Navbar from \"@/modules/checkout/ui/components/navbar\";\r\nimport React from \"react\";\r\n\r\ninterface Props {\r\n  children: React.ReactNode;\r\n  params: Promise<{ slug: string }>;\r\n}\r\n\r\nconst Layout = async ({ children, params }: Props) => {\r\n  const { slug } = await params;\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-[#F4F4F0] flex flex-col\">\r\n      <Navbar slug={slug} />\r\n      <div className=\"flex-1\">\r\n        <div className=\"max-w-(--breakpoint-xl) mx-auto\">{children}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","size_bytes":552},"src/app/(app)/(tenants)/tenants/[slug]/(home)/layout.tsx":{"content":"import { Footer } from \"@/modules/tenants/ui/components/footer\";\r\nimport Navbar, { NavbarSkeleton } from \"@/modules/tenants/ui/components/navbar\";\r\nimport { getQueryClient, trpc } from \"@/trpc/server\";\r\nimport { dehydrate, HydrationBoundary } from \"@tanstack/react-query\";\r\nimport { Suspense } from \"react\";\r\n\r\ninterface LayoutProps {\r\n  children: React.ReactNode;\r\n  params: Promise<{ slug: string }>;\r\n}\r\n\r\nconst Layout = async ({ children, params }: LayoutProps) => {\r\n  const { slug } = await params;\r\n\r\n  const queryClient = getQueryClient();\r\n  void queryClient.prefetchQuery(\r\n    trpc.tenants.getOne.queryOptions({\r\n      slug,\r\n    })\r\n  );\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-[#F4F4F0] flex flex-col\">\r\n      <HydrationBoundary state={dehydrate(queryClient)}>\r\n        <Suspense fallback={<NavbarSkeleton />}>\r\n          <Navbar slug={slug} />\r\n        </Suspense>\r\n      </HydrationBoundary>\r\n\r\n      <div className=\"flex-1\">\r\n        <div className=\"max-w-(--breakpoint-xl) mx-auto\">{children}</div>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","size_bytes":1108},"src/app/(app)/(tenants)/tenants/[slug]/(home)/page.tsx":{"content":"import { DEFAULT_LIMIT } from \"@/constants\";\r\nimport { loadProductFilters } from \"@/modules/products/search-params\";\r\nimport ProductListView from \"@/modules/products/ui/views/product-list-view\";\r\nimport { getQueryClient, trpc } from \"@/trpc/server\";\r\nimport { dehydrate, HydrationBoundary } from \"@tanstack/react-query\";\r\nimport { SearchParams } from \"nuqs/server\";\r\nimport React from \"react\";\r\n\r\ninterface Props {\r\n  searchParams: Promise<SearchParams>;\r\n  params: Promise<{ slug: string }>;\r\n}\r\n\r\nconst Page = async ({ params, searchParams }: Props) => {\r\n  const { slug } = await params;\r\n  const filters = await loadProductFilters(searchParams);\r\n\r\n  const queryClient = getQueryClient();\r\n  void queryClient.prefetchInfiniteQuery(\r\n    trpc.products.getMany.infiniteQueryOptions({\r\n      ...filters,\r\n      tenantSlug: slug,\r\n      limit: DEFAULT_LIMIT,\r\n    })\r\n  );\r\n\r\n  return (\r\n    <HydrationBoundary state={dehydrate(queryClient)}>\r\n      <ProductListView tenantSlug={slug} narrowView />\r\n    </HydrationBoundary>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n","size_bytes":1060},"src/app/(app)/(tenants)/tenants/[slug]/(checkout)/checkout/page.tsx":{"content":"import CheckoutView from '@/modules/checkout/ui/views/checkout-view';\r\nimport React from 'react'\r\n\r\ninterface PageProps {\r\n    params: Promise<{slug: string}>\r\n}\r\n\r\nconst CheckoutPage = async ({params}: PageProps) => {\r\n    const {slug} = await params;\r\n  return (\r\n    <CheckoutView tenantSlug={slug} />\r\n  )\r\n}\r\n\r\nexport default CheckoutPage\r\n","size_bytes":345},"src/app/(app)/(tenants)/tenants/[slug]/(home)/products/[productId]/page.tsx":{"content":"import { getQueryClient, trpc } from \"@/trpc/server\";\r\nimport { HydrationBoundary } from \"@tanstack/react-query\";\r\nimport React from \"react\";\r\nimport { dehydrate } from \"@tanstack/react-query\";\r\nimport ProductView from \"@/modules/products/ui/views/product-view\";\r\n\r\ninterface Props {\r\n  params: Promise<{ productId: string; slug: string }>;\r\n}\r\n\r\nconst ProductIdPage = async ({ params }: Props) => {\r\n  const { productId, slug } = await params;\r\n  const queryClient = getQueryClient();\r\n  void queryClient.prefetchQuery(\r\n    trpc.tenants.getOne.queryOptions({\r\n      slug,\r\n    })\r\n  );\r\n  \r\n  return (\r\n    <HydrationBoundary state={dehydrate(queryClient)}>\r\n      <ProductView productId={productId} tenantSlug={slug} />\r\n    </HydrationBoundary>\r\n  );\r\n};\r\n\r\nexport default ProductIdPage;\r\n","size_bytes":793}},"version":1}